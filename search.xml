<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[高并发Web项目]]></title>
      <url>/2020/04/08/high-performance-web-application/</url>
      <content type="html"><![CDATA[<h4 id="Load-average"><a href="#Load-average" class="headerlink" title="Load average"></a>Load average</h4><p>负载对应的是一个数字：<code>load average: 1.02  1.04  1.30</code>，它们分别表示：1分钟、5分钟、15分钟内系统的平均负载。这里面最关键的是15分钟负载，相对于1分钟反应的是短时状况，它反应的是一定时间的压力。</p>
<p>可以将一个cpu内核理解为一条车道，负载为0表示无车，0.5表示车道内有一半的车，1表示车道内已经开满了车，超过1则表示已经有车在等待进入车道。所以对于一个内核，负载不要长期超过1。</p>
<p>如果有多个物理cpu，每个cpu又有多个内核，则不应该超过的负载为：<code>cpu数 x 内核数</code></p>
<p><strong>OSX</strong>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看负载</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sysctl -n vm.loadavg</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看cpu</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sysctl machdep.cpu</span></span><br></pre></td></tr></table></figure>
<p>查看CPU重要的参数是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CPU 内核数</span></span><br><span class="line">machdep.cpu.core_count: 4   </span><br><span class="line">machdep.cpu.thread_count: 8</span><br></pre></td></tr></table></figure>
<p><strong>Linux</strong>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看负载</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> top</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看cpu</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> cat /proc/cpuinfo</span></span><br></pre></td></tr></table></figure>
<h3 id="Tomcat-优化配置"><a href="#Tomcat-优化配置" class="headerlink" title="Tomcat 优化配置"></a>Tomcat 优化配置</h3><p><strong>maxThreads</strong>：允许的最大线程数，默认值为200</p>
<p><strong>acceptCount</strong>：当请求数超过最大线程数时，接受排队的请求个数，默认值为100</p>
<ul>
<li>如果设的较小，超出的请求会就直接被拒绝</li>
<li>如果设的较大，可能就会出现大量的请求超时</li>
</ul>
<blockquote>
<p>As a general rule of thumb, a lightweight, high performance application should look at using a maximum of 150 (accept) threads per CPU core (so a total of 600 on a 4 core box). A more conservative setting, for more heavyweight applications would be 300 accept threads. I’d expect most requirements to be somewhere around the middle (but this will need some analysis), but this is highly situational </p>
</blockquote>
<h3 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h3><p><strong>TPS</strong>：Transaction Per Second 事务处理能力，每秒处理事物数（打开页面、登录、选择商品、加入购物车、下单、付款）</p>
<p>主要功能模块：</p>
<ul>
<li>取样器：进行脚本逻辑控制。</li>
<li>线程组：压测场景控制。</li>
<li>监视器：监控压测运行，获取性能指标。</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html" target="_blank" rel="noopener">理解Linux系统负荷</a></li>
<li><a href="http://www.iocoder.cn/Performance-Testing/Tomcat-Jetty-Undertow-benchmark/" target="_blank" rel="noopener">性能测试 —— Tomcat、Jetty、Undertow 基准测试</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/96692243" target="_blank" rel="noopener">干货收藏！史上最强 Tomcat 8 性能优化来啦！| 原力计划</a></li>
<li></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 高并发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web应用 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译 Chromium WebView]]></title>
      <url>/2020/04/04/build-android-webview-by-chromium/</url>
      <content type="html"><![CDATA[<h4 id="在线代码"><a href="#在线代码" class="headerlink" title="在线代码"></a>在线代码</h4><p><a href="https://juejin.im/post/5a94f9d15188257a63113a74" target="_blank" rel="noopener">如何设计一个优雅健壮的Android WebView？</a></p>
<p><a href="https://chromium.googlesource.com/chromium/src/+/HEAD/android_webview/docs/build-instructions.md" target="_blank" rel="noopener">Chromium build webview 说明</a></p>
<p><a href="https://chromium.googlesource.com/chromium/src/+/HEAD/android_webview/docs/quick-start.md" target="_blank" rel="noopener">Google WebView quick start</a></p>
<h4 id="Chromium-Android-WebView"><a href="#Chromium-Android-WebView" class="headerlink" title="Chromium Android WebView"></a>Chromium Android WebView</h4><p><a href="https://www.zybuluo.com/rogeryi/note/23693" target="_blank" rel="noopener">本文</a>讲述如何对 Chromium Content 进行封装，对外提供一个封装好的 Android View - WebView 供第三方应用使用。代码涉及 Android WebView 和 Chromium Content 模块其中的一部分。</p>
<h4 id="Android-AdvancedWebView"><a href="#Android-AdvancedWebView" class="headerlink" title="Android-AdvancedWebView"></a>Android-AdvancedWebView</h4><p>一个比较早的开源项目，查看<a href="https://github.com/delight-im/Android-AdvancedWebView" target="_blank" rel="noopener">这里</a></p>
]]></content>
      
        <categories>
            
            <category> 浏览器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> Chromium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译 Firfox]]></title>
      <url>/2020/03/28/build-firefox/</url>
      <content type="html"><![CDATA[<h4 id="在线代码"><a href="#在线代码" class="headerlink" title="在线代码"></a>在线代码</h4><p>从<a href="https://hg.mozilla.org/mozilla-central/file/tip/netwerk/socket" target="_blank" rel="noopener">这里</a>在线浏览代码。</p>
<h4 id="tarball"><a href="#tarball" class="headerlink" title="tarball"></a>tarball</h4><p>tarball 是代码仓库的快照，打包了某个版本的全部代码，因为做了压缩，比直接<code>clone</code>下载的数据量更小，速度更稳定，也多了断点续传。国内推荐用这种方式下载，参考<a href="https://hg.cdn.mozilla.net/" target="_blank" rel="noopener">这里</a>。下载后解压成仓库的流程参考这里：<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Mercurial/Bundles" target="_blank" rel="noopener">解压 bundle</a>。</p>
<h4 id="Mozconfig"><a href="#Mozconfig" class="headerlink" title="Mozconfig"></a>Mozconfig</h4><p>一些编译时的配置需要放到 Mozconfig 文件里，参考<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Configuring_Build_Options" target="_blank" rel="noopener">这里</a>。</p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>编译流程参考：<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Simple_Firefox_build/Linux_and_MacOS_build_preparation" target="_blank" rel="noopener">这里</a>。</p>
<p>其中遇到一些技术点：</p>
<p><strong>artifact</strong>：这种方式不用编译C++相关的代码，编译速度更快。适合于面向 Java 语言的开发者。</p>
<h4 id="Developer-guide"><a href="#Developer-guide" class="headerlink" title="Developer guide"></a>Developer guide</h4><p>和 Firefox 开发相关的说明全在<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide" target="_blank" rel="noopener">这里</a>。</p>
<h4 id="Working-with-Mozilla-source-code"><a href="#Working-with-Mozilla-source-code" class="headerlink" title="Working with Mozilla source code"></a>Working with Mozilla source code</h4><p>和 Mozilla 代码相关的说明全在<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code" target="_blank" rel="noopener">这里</a>。包括如何检出代码，提交代码，编译等。</p>
<h4 id="Mozilla-Source-Code-Directory-Structure"><a href="#Mozilla-Source-Code-Directory-Structure" class="headerlink" title="Mozilla Source Code Directory Structure"></a>Mozilla Source Code Directory Structure</h4><p>源码目录结构，当你需要进一步熟悉各模块时，首先要区分都有哪些模块，参考：<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Directory_structure" target="_blank" rel="noopener">这里</a>。一般我比较关心的几个模块：</p>
<p><strong>browser</strong>：这里是浏览器的界面和主题相关代码</p>
<p><strong>netwerk</strong>：网络套件库，也叫 Necko</p>
<p><strong>security</strong>：包含 <code>NSS</code> 和 <code>PSM</code> 两套安全套件，<code>NSS</code> 包含了用于 SSL 的密码算法</p>
<p><strong>view</strong>：一套跨平台的 UI 组件库，承担绘图、事件处理、滚动、透明化等</p>
<p><strong>widget</strong>：它是 <code>view</code> 的宿主，是 <code>view</code> 与操作系统原生的 UI 系统的枢纽</p>
<h4 id="网络层-Necko"><a href="#网络层-Necko" class="headerlink" title="网络层 Necko"></a>网络层 Necko</h4><p><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Necko" target="_blank" rel="noopener">Necko</a> 是一个跨平台的网络库，提供了网络多层的接口。</p>
<h4 id="使用-GDB-调试"><a href="#使用-GDB-调试" class="headerlink" title="使用 GDB 调试"></a>使用 GDB 调试</h4><p>关于一些使用上可能遇到的问题，请参考<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_Mozilla_with_gdb" target="_blank" rel="noopener">这里</a></p>
]]></content>
      
        <categories>
            
            <category> 浏览器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> firefox </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[命令行编译 Java]]></title>
      <url>/2019/12/01/add-comment-to-hibernate/</url>
      <content type="html"><![CDATA[<h4 id="编译-Java"><a href="#编译-Java" class="headerlink" title="编译 Java"></a>编译 Java</h4><p>If you are using the Hibernate native API, then you need to use the Query#setComment method like this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; persons = (List&lt;Person&gt;) session.createQuery(</span><br><span class="line">    <span class="string">"select p "</span> +</span><br><span class="line">    <span class="string">"from Person p "</span>)</span><br><span class="line">.setComment( <span class="string">"t95=firstdraft"</span> )</span><br><span class="line">.list();</span><br></pre></td></tr></table></figure>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>If you are using JPA, then you can use a QueryHint:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; persons = entityManager.createQuery(</span><br><span class="line">        <span class="string">"select p "</span> +</span><br><span class="line">        <span class="string">"from Person p "</span>, Person.class)</span><br><span class="line">.setHint( <span class="string">"org.hibernate.comment"</span>, <span class="string">"t95=firstdraft"</span> )</span><br><span class="line">.getResultList();</span><br></pre></td></tr></table></figure>
<p><a href="https://vladmihalcea.com/hibernate-statementinspector/" target="_blank" rel="noopener">How to intercept and modify SQL queries with the Hibernate StatementInspector</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[命令行编译 Java]]></title>
      <url>/2019/11/28/build-java-in-command-line/</url>
      <content type="html"><![CDATA[<h4 id="编译-Java"><a href="#编译-Java" class="headerlink" title="编译 Java"></a>编译 Java</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -d 创建目录结构</span></span><br><span class="line">% javac -d . &lt;filename.java&gt;</span><br></pre></td></tr></table></figure>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux &amp; Mac</span></span><br><span class="line">% java -cp jarname.jar: package.ClassName </span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows CMD</span></span><br><span class="line">% java -cp jarname.jar;. package.ClassName</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译 Mac cef 2623]]></title>
      <url>/2019/10/07/build-mac-cef/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Fixed gclient_util after depot_tools changes</p>
</blockquote>
<p>解决办法：<a href="https://bitbucket.org/chromiumembedded/cef/pull-requests/251/fixed-gclient_util-after-depot_tools/diff" target="_blank" rel="noopener">这里</a></p>
]]></content>
      
        <categories>
            
            <category> cef </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cef </tag>
            
            <tag> MacOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VMware 安装 MacOS 流程]]></title>
      <url>/2019/10/04/vmware-install-macos/</url>
      <content type="html"><![CDATA[<h3 id="一、安装流程"><a href="#一、安装流程" class="headerlink" title="一、安装流程"></a>一、安装流程</h3><ol>
<li>安装 VMware</li>
<li>安装 MacOS 解锁工具</li>
<li>安装 MacOS 系统</li>
<li>配置虚拟机硬件参数</li>
</ol>
<p>下面有几个说明文章比较详细，基本按照步骤操作就可成功：</p>
<ul>
<li><a href="http://www.carrotchou.blog/18689.html" target="_blank" rel="noopener">VMware 虚拟机安装 macOS 10.14 教程</a></li>
<li><a href="https://www.w3h5.com/post/236.html" target="_blank" rel="noopener">VMware虚拟机安装黑苹果MacOS Mojave系统详细教程</a></li>
</ul>
<h3 id="二、常见问题"><a href="#二、常见问题" class="headerlink" title="二、常见问题"></a>二、常见问题</h3><blockquote>
<ol>
<li>新建虚拟机找不到 MAC 系统选项</li>
</ol>
</blockquote>
<p>解决：安装 MacOS 虚拟机解锁工具，从<a href="https://github.com/DrDonk/unlocker" target="_blank" rel="noopener">这里</a>下载。</p>
<blockquote>
<ol>
<li>苹果虚拟机启动花屏</li>
</ol>
</blockquote>
<p>解决：安装 MacOS 虚拟机解锁工具，从<a href="https://github.com/DrDonk/unlocker" target="_blank" rel="noopener">这里</a>下载。</p>
<blockquote>
<ol>
<li>不能登录 App Store</li>
</ol>
</blockquote>
<p>解决：更新虚拟机硬件配置，修改虚拟机 <code>.vmx</code> 文件，参考<a href="https://blog.csdn.net/tsh123321/article/details/80222868" target="_blank" rel="noopener">这篇文章</a></p>
]]></content>
      
        <categories>
            
            <category> vmware </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vmware </tag>
            
            <tag> MacOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好喝的啤酒]]></title>
      <url>/2019/07/25/beers/</url>
      <content type="html"><![CDATA[<h3 id="IPA"><a href="#IPA" class="headerlink" title="IPA"></a>IPA</h3><p>Indian Pale Ale（印度淡色艾尔），当年英国殖民印度，需要从英国运送啤酒到印度，为了延长啤酒保存时间，就在酒内添加大量啤酒花，使啤酒在桶内发酵好几个月。在这个过程中糖分被消耗掉的酒体保存了高度的酒精含量，导致IPA看起来酒体清淡，其实酒花香气和苦度都非常高。</p>
<h3 id="LAGER（拉格）"><a href="#LAGER（拉格）" class="headerlink" title="LAGER（拉格）"></a>LAGER（拉格）</h3><p>源自德国，采用低温发酵法，酒体清淡泡沫丰富，是常见的工业啤酒酿造方法。一般来说普通工业啤酒基本上都是拉格，比如燕京，青岛，雪花。</p>
]]></content>
      
        <categories>
            
            <category> drink </category>
            
        </categories>
        
        
        <tags>
            
            <tag> beer </tag>
            
            <tag> drink </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的周]]></title>
      <url>/2019/07/25/my-week-1/</url>
      <content type="html"><![CDATA[<h3 id="做人的背景"><a href="#做人的背景" class="headerlink" title="做人的背景"></a>做人的背景</h3><blockquote>
<p>浪子回头金不换<br>晚节不保</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> week </category>
            
        </categories>
        
        
        <tags>
            
            <tag> week </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jitsi Meet 视频技术]]></title>
      <url>/2019/07/12/jitsi-video/</url>
      <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin --tags</span></span><br></pre></td></tr></table></figure>
<p>收到下面的错误提示：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">remote: GitLab: Failed to authorize your Git request: internal API unreachable                                             </span><br><span class="line">To &lt;...&gt;                                          </span><br><span class="line"> ! [remote rejected]       origin/HEAD -&gt; origin/HEAD (pre-receive hook declined)   </span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>从<a href="https://gitlab.com/gitlab-com/support-forum/issues/2683" target="_blank" rel="noopener">这里</a>找到了解决方案：</p>
<blockquote>
<p>取消选择组设置里的 LFS 一项:</p>
</blockquote>
<p><strong>操作步骤：</strong></p>
<ol>
<li>打开并编辑组：<code>https://&lt;URL&gt;/admin/groups/&lt;GROUP&gt;/edit</code></li>
<li>找到 <code>Large File Storage</code> 配置</li>
<li>取消选择下面一项：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ] Allow projects within this group to use Git LFS</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> jitsi </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webrtc </tag>
            
            <tag> jitsi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gitlab Remote Rejected Error]]></title>
      <url>/2019/06/13/gitlab-remote-reject-error/</url>
      <content type="html"><![CDATA[<p>今天迁移一个项目到 Gitlab，前面一切正常，当推送标签时</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin --tags</span></span><br></pre></td></tr></table></figure>
<p>收到下面的错误提示：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">remote: GitLab: Failed to authorize your Git request: internal API unreachable                                             </span><br><span class="line">To &lt;...&gt;                                          </span><br><span class="line"> ! [remote rejected]       origin/HEAD -&gt; origin/HEAD (pre-receive hook declined)   </span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>从<a href="https://gitlab.com/gitlab-com/support-forum/issues/2683" target="_blank" rel="noopener">这里</a>找到了解决方案：</p>
<blockquote>
<p>取消选择组设置里的 LFS 一项:</p>
</blockquote>
<p><strong>操作步骤：</strong></p>
<ol>
<li>打开并编辑组：<code>https://&lt;URL&gt;/admin/groups/&lt;GROUP&gt;/edit</code></li>
<li>找到 <code>Large File Storage</code> 配置</li>
<li>取消选择下面一项：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ] Allow projects within this group to use Git LFS</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim 用法小结]]></title>
      <url>/2019/04/29/vim-usage/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="NERDTree"><a href="#NERDTree" class="headerlink" title="NERDTree"></a>NERDTree</h4><p><a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="noopener">这里</a></p>
<p>窗口跳转：<code>Ctrl - W</code> → <code>Ctrl - h/j/k/l</code></p>
<h4 id="TagBar"><a href="#TagBar" class="headerlink" title="TagBar"></a>TagBar</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Linux</span><br><span class="line">sudo apt-get install ctags</span><br><span class="line">#MacOS</span><br><span class="line">brew install ctags</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &apos;majutsushi/tagbar&apos;</span><br></pre></td></tr></table></figure>
<h3 id="SpaceVim"><a href="#SpaceVim" class="headerlink" title="SpaceVim"></a>SpaceVim</h3>]]></content>
      
        <categories>
            
            <category> vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vim </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chromium 模块]]></title>
      <url>/2019/03/03/chromium-modules/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left">模块</th>
<th style="text-align:left">说明</th>
<th style="text-align:center">必要性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">default_apps</td>
<td style="text-align:left">默认安装应用的目录</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">default_apps/external_extensions.json</td>
<td style="text-align:left">默认安装的配置文件</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">Extensions</td>
<td style="text-align:left">默认安装扩展的目录</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">Extensions/external_extensions.json</td>
<td style="text-align:left">默认安装的扩展的配置文件</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">Installer/chrmstp.exe</td>
<td style="text-align:left">chrome setup，和 setup.exe 完全一样 <sup>[1]</sup></td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">Installer/setup.exe</td>
<td style="text-align:left">安装文件，用于升级或卸载</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">Locales</td>
<td style="text-align:left">多语言文件</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">VisualElements</td>
<td style="text-align:left">?</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">WidevineCdm</td>
<td style="text-align:left">自带组件（component），Widevine Content Decryption Module，用于在HTML5视频网站播放DRM加密的视频，如netflix</td>
<td style="text-align:center">×?</td>
</tr>
<tr>
<td style="text-align:left">64.0.3282.186.manifest</td>
<td style="text-align:left">chrome 主清单文件</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">chrome.dll</td>
<td style="text-align:left">chrome 主模块</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">chrome.dll.sig</td>
<td style="text-align:left">签名文件?</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">chrome.exe.sig</td>
<td style="text-align:left">签名文件?</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">chrome_100_percent.pak</td>
<td style="text-align:left">1x 资源包</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">chrome_200_percent.pak</td>
<td style="text-align:left">2x 资源包</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">chrome_child.dll</td>
<td style="text-align:left">chrome 子进程模块？</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">chrome_child.dll.sig</td>
<td style="text-align:left">签名文件?</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">chrome_elf.dll</td>
<td style="text-align:left">Chrome Early Loading Framework <sup>[2]</sup></td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">chrome_watcher.dll</td>
<td style="text-align:left">Watcher进程加载 chrome_watcher.dll</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">d3dcompiler_43.dll</td>
<td style="text-align:left">required for Windows XP。 Direct3D HLSL Compiler for Redistribution</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">d3dcompiler_47.dll</td>
<td style="text-align:left">required for Windows Vista and newer。 Direct3D HLSL Compiler for Redistribution</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">eventlog_provider.dll</td>
<td style="text-align:left">windows 的事件日志</td>
<td style="text-align:center">√?</td>
</tr>
<tr>
<td style="text-align:left">ffmpeg.dll</td>
<td style="text-align:left">多媒体支持。如果不需要播放视频等</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">icudtl.dat</td>
<td style="text-align:left">International Components for Unicode Data File Little Endian，ICU库是一个支持国际化，本地化的软件库<sup>[3]</sup></td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">libegl.dll</td>
<td style="text-align:left"><a href="https://en.wikipedia.org/wiki/EGL_(API" target="_blank" rel="noopener">Embedded-System Graphics Library</a>) <sup>[4]</sup></td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">libglesv2.dll</td>
<td style="text-align:left"><a href="https://en.wikipedia.org/wiki/OpenGL_ES" target="_blank" rel="noopener">OpenGL for Embedded Systems (OpenGL ES or GLES)</a></td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:left">nacl_irt_x86_64.nexe</td>
<td style="text-align:left">Native Client integrated-runtime</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">natives_blob.bin</td>
<td style="text-align:left">binary large object，V8 引擎需要的数据文件</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">resources.pak</td>
<td style="text-align:left">资源文件</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">snapshot_blob.bin</td>
<td style="text-align:left">binary large object，V8 引擎需要的数据文件</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">v8_context_snapshot.bin</td>
<td style="text-align:left">Create V8 contexts from a snapshot file. It will make the initializations of V8 contexts for 1.6-3 times faster.</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:left">wow_helper.exe</td>
<td style="text-align:left">win32与win64兼容工具</td>
<td style="text-align:center">√</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><p>Support for WebGL is present in： </p>
<ul>
<li>Firefox 4+</li>
<li>Google Chrome 9+</li>
<li>Opera 12+, Safari 5.1+</li>
<li>Internet Explorer 11+</li>
<li>Microsoft Edge build 10240+</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol>
<li>The Active Setup executable will be an identical copy of setup.exe; this is necessary because Windows’ installer detection heuristics (which include things like process name being “setup.exe”) will otherwise force elevation for non-admin users when setup.exe is launched. This is mitigated by adding requestedExecutionLevel=”asInvoker” to setup.exe’s manifest on Vista+, but there is no such manifest entry on Windows XP (which results in crbug.com/166473). TODO(gab): Rename setup.exe itself altogether and use the same binary for Active Setup.</li>
<li><a href="http://gclxry.com/chrome-early-loading-framework/" target="_blank" rel="noopener">Chrome Early Loading Framework</a></li>
<li><a href="http://apps.icu-project.org/datacustom/" target="_blank" rel="noopener">International Components for Unicode</a></li>
<li><a href="https://en.wikipedia.org/wiki/ANGLE_(software" target="_blank" rel="noopener">ANGLE(Almost Native Graphics Layer Engine)</a>)<br>/en.wikipedia.org/wiki/ANGLE_(software))</li>
<li><a href="https://bitbucket.org/chromiumembedded/cef/src/816f700d3ea42bedc5ca5a2314c27b761b69abc5/tools/distrib/win/README.redistrib.txt?at=master&amp;fileviewer=file-view-default" target="_blank" rel="noopener">CEF redistrib</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API" target="_blank" rel="noopener">The WebGL API</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用用法]]></title>
      <url>/2019/02/21/git-usages/</url>
      <content type="html"><![CDATA[<h3 id="1-导出-commit-修改的文件"><a href="#1-导出-commit-修改的文件" class="headerlink" title="1 导出 commit 修改的文件"></a>1 导出 commit 修改的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT $commit_id | xargs tar -rf export.tar</span><br></pre></td></tr></table></figure>
<p><strong>git diff：</strong></p>
<ul>
<li>-r $commit_id：Take a diff of the given commit to its parent(s) (including all subdirectories, not just the top directory)</li>
<li>–no-commit-id –name-only：只输出文件名，不输出 SHA1</li>
<li>–diff-filter=ACMRT：Only show files added, copied, modified, renamed or that had their type changed (eg. file → symlink) in this commit. This leaves out deleted files.</li>
</ul>
<p><strong>tar：</strong></p>
<ul>
<li>-r：添加文件到已经压缩的文件</li>
<li>-f：指定压缩文件</li>
</ul>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laradock 配置 xdebug 与 phpstorm]]></title>
      <url>/2019/02/20/mac-laradock-xdebug-phpstorm/</url>
      <content type="html"><![CDATA[<h2 id="1-配置-Laradock"><a href="#1-配置-Laradock" class="headerlink" title="1 配置 Laradock"></a>1 配置 Laradock</h2><h3 id="1-1-修改-laradock-env"><a href="#1-1-修改-laradock-env" class="headerlink" title="1.1 修改 laradock/.env"></a>1.1 修改 laradock/.env</h3><p>打开 <code>.env</code> 文件，修改下列配置项：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">WORKSPACE_INSTALL_XDEBUG</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">PHP_FPM_INSTALL_XDEBUG</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-配置-laradock-php-fpm-xdebug-ini"><a href="#1-2-配置-laradock-php-fpm-xdebug-ini" class="headerlink" title="1.2 配置 laradock/php-fpm/xdebug.ini"></a>1.2 配置 laradock/php-fpm/xdebug.ini</h3><p>php-fpm 用于调试 php 的服务器模式，基于浏览器请求。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; <span class="doctag">NOTE:</span> The actual debug.so extention is NOT SET HERE but rather (/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; xdebug.remote_host=docker.for.mac.host.internal</span></span><br><span class="line"><span class="comment">; 这里要注意，很多文章说无须修改此项，但我的环境不行，必须配置</span></span><br><span class="line"><span class="comment">; 关于 host.docker.internal，请参考：https://docs.docker.com/docker-for-mac/networking/#there-is-no-docker0-bridge-on-macos</span></span><br><span class="line">xdebug.remote_host=host.docker.internal</span><br><span class="line">xdebug.remote_connect_back=0</span><br><span class="line"><span class="comment">; 配置端口号</span></span><br><span class="line">xdebug.remote_port=9001</span><br><span class="line"><span class="comment">; 配置 key</span></span><br><span class="line">xdebug.idekey=PHPSTORM</span><br><span class="line"></span><br><span class="line"><span class="comment">; 开启</span></span><br><span class="line">xdebug.remote_autostart=1</span><br><span class="line"><span class="comment">; 开启</span></span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.cli_color=0</span><br><span class="line">xdebug.profiler_enable=0</span><br><span class="line">xdebug.profiler_output_dir="~/xdebug/phpstorm/tmp/profiling"</span><br><span class="line"></span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_mode=req</span><br><span class="line"></span><br><span class="line">xdebug.var_display_max_children=-1</span><br><span class="line">xdebug.var_display_max_data=-1</span><br><span class="line">xdebug.var_display_max_depth=-1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="1-3-配置-laradock-workspace-xdebug-ini"><a href="#1-3-配置-laradock-workspace-xdebug-ini" class="headerlink" title="1.3 配置 laradock/workspace/xdebug.ini"></a>1.3 配置 laradock/workspace/xdebug.ini</h3><p>workspace 用于调试 php 的命令行模式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; <span class="doctag">NOTE:</span> The actual debug.so extention is NOT SET HERE but rather (/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini)</span></span><br><span class="line"></span><br><span class="line">xdebug.remote_host=host.docker.internal</span><br><span class="line">xdebug.remote_connect_back=0</span><br><span class="line">xdebug.remote_port=9001</span><br><span class="line">xdebug.idekey=PHPSTORM</span><br><span class="line"></span><br><span class="line">xdebug.remote_autostart=1</span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.cli_color=0</span><br><span class="line">xdebug.profiler_enable=0</span><br><span class="line">xdebug.profiler_output_dir="~/xdebug/phpstorm/tmp/profiling"</span><br><span class="line"></span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_mode=req</span><br><span class="line"></span><br><span class="line">xdebug.var_display_max_children=-1</span><br><span class="line">xdebug.var_display_max_data=-1</span><br><span class="line">xdebug.var_display_max_depth=-1</span><br></pre></td></tr></table></figure>
<h3 id="1-4-重新编译-php-fpm-和-workspace-容器"><a href="#1-4-重新编译-php-fpm-和-workspace-容器" class="headerlink" title="1.4 重新编译 php-fpm 和 workspace 容器"></a>1.4 重新编译 php-fpm 和 workspace 容器</h3><p><em>这里要注意，修改了 xdebug.ini 一定要重新编译容器</em></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose build --no-cache php-fpm workspace</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-重新启动容器"><a href="#1-5-重新启动容器" class="headerlink" title="1.5 重新启动容器"></a>1.5 重新启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d nginx</span></span><br></pre></td></tr></table></figure>
<h2 id="2-配置-PhpStorm"><a href="#2-配置-PhpStorm" class="headerlink" title="2 配置 PhpStorm"></a>2 配置 PhpStorm</h2><h3 id="2-1-配置-PHP"><a href="#2-1-配置-PHP" class="headerlink" title="2.1 配置 PHP"></a>2.1 配置 PHP</h3><p>打开 <code>Preferences &gt; Languages &amp; Frameworks &gt; PHP</code></p>
<p><img src="/images/posts/xdebug/phpstorm1.png" alt=""></p>
<h3 id="2-2-配置-DBGp-Proxy"><a href="#2-2-配置-DBGp-Proxy" class="headerlink" title="2.2 配置 DBGp Proxy"></a>2.2 配置 DBGp Proxy</h3><p>打开 <code>Preferences &gt; Languages &amp; Frameworks &gt; PHP &gt; DBGp Proxy</code></p>
<p><img src="/images/posts/xdebug/phpstorm2.png" alt=""></p>
<h3 id="2-3-添加服务器"><a href="#2-3-添加服务器" class="headerlink" title="2.3 添加服务器"></a>2.3 添加服务器</h3><p>打开 <code>Preferences &gt; Languages &amp; Frameworks &gt; PHP &gt; Server</code></p>
<p><img src="/images/posts/xdebug/phpstorm3.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laradock </tag>
            
            <tag> phpstorm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊聊 WebRTC]]></title>
      <url>/2019/02/16/webrtc-server/</url>
      <content type="html"><![CDATA[<p>Web Real-Time Communication（Web实时通信，WebRTC）由一组标准、协议和JavaScript API组成，用于实现浏览器之间（端到端）的音频、视频及数据共享。WebRTC使得实时通信变成一种标准功能，任何Web应用都无需借助第三方插件和专有软件，而是通过简单地JavaScript API即可完成。</p>
<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="1-STUN"><a href="#1-STUN" class="headerlink" title="1 STUN"></a>1 STUN</h3><p>Session Traversal Utilities for NAT (STUN) – RFC 5389</p>
<h3 id="2-TURN"><a href="#2-TURN" class="headerlink" title="2 TURN"></a>2 TURN</h3><p><strong>中继方式 NAT 穿透</strong>（Traversal Using Relay NAT (TURN) – RFC 5766）</p>
<h3 id="3-ICE"><a href="#3-ICE" class="headerlink" title="3 ICE"></a>3 ICE</h3><p><strong>交互式连接建立</strong>（Interactive Connectivity Establishment (ICE) – RFC 5245）</p>
<p>一种综合性的NAT穿越技术，它是一种框架，可以整合各种NAT穿越技术如STUN、TURN（Traversal Using Relay NAT 中继NAT实现的穿透）。ICE会先使用STUN，尝试建立一个基于UDP的连接，如果失败了，就会去TCP（先尝试HTTP，然后尝试HTTPS），如果依旧失败ICE就会使用一个中继的TURN服务器。</p>
<p>通信的两侧可能会处于不同的网络环境中，有时会存在好几层的访问控制、防火墙、路由跳转，所以我们需要一种方法在复杂的网络环境中找到对方，并且连接到相应的目标。WebRTC 使用集成了 STUN、TURN 的 ICE 来进行双方的数据通信。</p>
<a id="more"></a>
<h3 id="4-SDP"><a href="#4-SDP" class="headerlink" title="4 SDP"></a>4 SDP</h3><p><strong>会话描述协议</strong>（Session Description Protocol）</p>
<p>为了连接到其他用户，我们必须要对其他用户的设备情况有所了解，比如音频视频的编码解码器、使用何种编码格式、使用何种网络、设备的数据处理能力，所以我们需要一张“名片”来获得用户的所有信息，而 SDP 为我们提供了这些功能。</p>
<p>一个 SDP 的握手由一个 offer 和一个 answer 组成。</p>
<h3 id="5-RTCPeerConnection-对象"><a href="#5-RTCPeerConnection-对象" class="headerlink" title="5 RTCPeerConnection 对象"></a>5 RTCPeerConnection 对象</h3><p>RTCPeerConnection 对象是 WebRTC API 的入口，它负责创建、维护一个 WebRTC 连接，以及在这个连接中的数据传输。目前新版本的浏览器大都支持了这一对象，但是由于目前 API 还不稳定，所以需要加入各个浏览器内核的前缀，例如 Chrome 中我们使用 webkitRTCPeerConnection 来访问它。</p>
<h3 id="SCTP"><a href="#SCTP" class="headerlink" title="SCTP"></a>SCTP</h3><h3 id="SRTP"><a href="#SRTP" class="headerlink" title="SRTP"></a>SRTP</h3><h3 id="DTLS"><a href="#DTLS" class="headerlink" title="DTLS"></a>DTLS</h3><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="WebRTC的分层协议图"><a href="#WebRTC的分层协议图" class="headerlink" title="WebRTC的分层协议图"></a>WebRTC的分层协议图</h3><p><img src="https://image-static.segmentfault.com/266/264/2662644592-59ccfc5ce695f_articlex" alt=""></p>
<h2 id="连接模型"><a href="#连接模型" class="headerlink" title="连接模型"></a>连接模型</h2><h3 id="P2P-Mesh"><a href="#P2P-Mesh" class="headerlink" title="P2P Mesh"></a>P2P Mesh</h3><p>音视频数据流只在终端用户之间相互传输，不经过任何服务器节点，而且每个人都要与其它所有人建立P2P连接。</p>
<p><img src="https://blog.wilddog.com/wp-content/uploads/2017/09/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2017-09-20-%E4%B8%8B%E5%8D%883.42.12.png" alt=""></p>
<p><img src="https://pic4.zhimg.com/80/v2-1a208b10a56944a01331ee328415ce8b_hd.jpg" alt=""></p>
<h3 id="SFU-方案"><a href="#SFU-方案" class="headerlink" title="SFU 方案"></a>SFU 方案</h3><p>（Selective Forward Unit）。SFU从发布客户端复制音视频流的信息，然后分发到多个订阅客户端。典型的应用场景是1对多的直播服务。</p>
<p><img src="https://blog.wilddog.com/wp-content/uploads/2017/09/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2017-09-20-%E4%B8%8B%E5%8D%883.46.26.png" alt=""></p>
<p><img src="https://pic4.zhimg.com/80/v2-f46394c68633a826431d4424c27e9c5f_hd.jpg" alt=""></p>
<p>一个会议室 n 人，SFU 服务器的宽带是：</p>
<ul>
<li>incoming = bitrate x n </li>
<li>outgoing = bitrate x n + hangouts x n x (n-2)</li>
</ul>
<p>说明：bitrate：主画面码率，hangouts：小窗口码率</p>
<table>
<thead>
<tr>
<th style="text-align:center">participants</th>
<th style="text-align:center">resolution（bitrate/hangouts）</th>
<th style="text-align:center">incoming</th>
<th style="text-align:center">outgoing</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">720P（1.5Mbps/0.3Mbps）</td>
<td style="text-align:center">1.5x4=6Mbps</td>
<td style="text-align:center">1.5x4+0.3x4x(4-2)=8.4Mbps</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">VGA（0.6Mbps/0.3Mbps）</td>
<td style="text-align:center">0.6x9=5.4Mbps</td>
<td style="text-align:center">0.6x9+0.3x9x(9-2)=24.3Mbps</td>
</tr>
</tbody>
</table>
<h3 id="MCU"><a href="#MCU" class="headerlink" title="MCU"></a>MCU</h3><p>（Multi-point Control Unit）。MCU是传统视频会议系统中的核心控制单元，在WebRTC的系统实现中， 适合于多人音视频通话场景，MCU可以对接收到的多路流进行转码和混合，并向每个终端输出单路流。</p>
<p><img src="https://blog.wilddog.com/wp-content/uploads/2017/09/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2017-09-20-%E4%B8%8B%E5%8D%883.45.14.png" alt=""></p>
<p><img src="https://pic1.zhimg.com/v2-e91913906803cdd15faf31ce9ae2c614_r.jpg" alt=""></p>
<h2 id="NAT-穿透"><a href="#NAT-穿透" class="headerlink" title="NAT 穿透"></a>NAT 穿透</h2><h3 id="ICE"><a href="#ICE" class="headerlink" title="ICE"></a>ICE</h3><p><img src="https://image-static.segmentfault.com/165/053/1650533365-59ccfcb53d363_articlex" alt=""></p>
<p><img src="https://image-static.segmentfault.com/508/300/508300603-59ccfc7731a29_articlex" alt=""></p>
<p><img src="https://image-static.segmentfault.com/146/004/1460044879-59ccfc85c5f6e_articlex" alt=""></p>
<h3 id="单-PeerConnection-方案-VS-多-PeerConnection-方案"><a href="#单-PeerConnection-方案-VS-多-PeerConnection-方案" class="headerlink" title="单 PeerConnection 方案 VS 多 PeerConnection 方案"></a>单 PeerConnection 方案 VS 多 PeerConnection 方案</h3><p><strong>单 PeerConnection 方案</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-27399c759cda4accdd65a6caf79f7e4e_hd.jpg" alt=""></p>
<p><strong>多 PeerConnection 方案</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-c14afdb905746f919c15cc85e4c12589_hd.jpg" alt=""></p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="标准WebRTC连接建立流程"><a href="#标准WebRTC连接建立流程" class="headerlink" title="标准WebRTC连接建立流程"></a>标准WebRTC连接建立流程</h3><p><img src="https://pic3.zhimg.com/80/v2-f2e992dfb3c3252f90d7f8528ce22902_hd.jpg" alt=""></p>
<p><img src="https://pic4.zhimg.com/80/v2-8cf643367610fad90cecc870b2795f4b_hd.jpg" alt=""></p>
<h3 id="端口分配"><a href="#端口分配" class="headerlink" title="端口分配"></a>端口分配</h3><p><img src="https://pic3.zhimg.com/80/v2-1809b8c93983350d3e4484b35b6f6146_hd.jpg" alt=""></p>
<h3 id="Hangouts-方式"><a href="#Hangouts-方式" class="headerlink" title="Hangouts 方式"></a>Hangouts 方式</h3><p><img src="https://pic2.zhimg.com/80/v2-ef3a1ff96b99c10ef675e3f293af001d_hd.jpg" alt=""></p>
<h3 id="视频最多人数"><a href="#视频最多人数" class="headerlink" title="视频最多人数"></a>视频最多人数</h3><ul>
<li>微信最多<a href="http://kf.qq.com/touch/faq/1211147RVfAV150401Ive2IN.html?platform=15" target="_blank" rel="noopener">9人</a></li>
<li>Google Hangouts - 一次会议中最多有25位参与者，过去是最多容纳10个人。当我第一次也是唯一一次使用它进行WebRTC培训时，参会者人数一超过10人就卡死了，导致了我只能选择使用其他视频会议服务。</li>
<li>Hangouts Meet - 在单个会话中将其参与者人数限制在50人以内</li>
<li>Houseparty - 8名参与者</li>
<li>Skype - 25名参与者</li>
<li><a href="http://appear.in" target="_blank" rel="noopener">http://appear.in</a> - 使用专业帐户登录，单个房间内最多支持12个参与者</li>
<li>Amazon Chime - 桌面版16位参与者，iOS上最多8位参与者（尚未支持安卓）</li>
<li>Atlassian Stride and Meet Jitsi - 50位参与者</li>
</ul>
<h2 id="WebRTC-API"><a href="#WebRTC-API" class="headerlink" title="WebRTC API"></a>WebRTC API</h2><p>WebRTC实现了三个API，分别是:</p>
<ul>
<li>MediaStream：通过MediaStream的API能够通过设备的摄像头及话筒获得视频、音频的同步流</li>
<li>RTCPeerConnection：RTCPeerConnection是WebRTC用于构建点对点之间稳定、高效的流传输的组件</li>
<li>RTCDataChannel：RTCDataChannel使得浏览器之间（点对点）建立一个高吞吐量、低延时的信道，用于传输任意数据</li>
</ul>
<h2 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h2><h3 id="即时通讯云"><a href="#即时通讯云" class="headerlink" title="即时通讯云"></a>即时通讯云</h3><p><a href="http://www.easemob.com/pricing/im" target="_blank" rel="noopener">http://www.easemob.com/pricing/im</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://segmentfault.com/a/1190000011403597" target="_blank" rel="noopener">深入理解WebRTC</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37400934" target="_blank" rel="noopener">聊聊WebRTC网关服务器1：如何选择服务端端口方案？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37493371" target="_blank" rel="noopener">聊聊WebRTC网关服务器2：如何选择PeerConnection方案？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37538078" target="_blank" rel="noopener">聊聊WebRTC网关服务器3：如何优化Server的线程方案？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37589412" target="_blank" rel="noopener">聊聊WebRTC网关服务器4：QoS方案分析</a></li>
<li><a href="https://blog.wilddog.com/?p=2196" target="_blank" rel="noopener">WebRTC 是如何进行通信的，WebRCT 的三种网络结构</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/40204873" target="_blank" rel="noopener">WebRTC网关服务器搭建：开源技术 vs 自行研发</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/40429424" target="_blank" rel="noopener">即构自研WebRTC网关服务器架构实践</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34558950" target="_blank" rel="noopener">WebRTC视频通话中最多能容纳多少用户？</a></li>
<li><a href="https://bloggeek.me/how-many-users-webrtc-call/" target="_blank" rel="noopener">How Many Users Can Fit in a WebRTC Call?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/33616446" target="_blank" rel="noopener">WebRTC媒体服务器</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/56428846" target="_blank" rel="noopener">WebRTC 开发实践：为什么你需要 SFU 服务器</a></li>
<li><a href="https://www.jiangyu.org/video-recorder-calculation-tool/" target="_blank" rel="noopener">视频监控录像计算工具</a></li>
<li><a href="https://www.jiangyu.org/fps-data-rate-bit-byte-mb-kbps/" target="_blank" rel="noopener">帧率,分辨率,码流的关系以及硬盘容量计算方法</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> webrtc </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webrtc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决 Windows 远程桌面连接失败]]></title>
      <url>/2019/02/01/windows-remote-desktop/</url>
      <content type="html"><![CDATA[<h3 id="1-修改防火墙"><a href="#1-修改防火墙" class="headerlink" title="1 修改防火墙"></a>1 修改防火墙</h3><ol>
<li>打开 <code>控制面板</code> &gt; <code>安全</code> &gt; <code>防火墙</code></li>
<li>打开 <code>Allow an app or feature through Windows Firewall</code></li>
<li>找到 <code>Remote Desktop</code>，选中 <code>Private</code></li>
</ol>
<h3 id="2-检查远程访问是否被允许"><a href="#2-检查远程访问是否被允许" class="headerlink" title="2 检查远程访问是否被允许"></a>2 检查远程访问是否被允许</h3><ol>
<li>通过搜索，打开 <code>Allow Remote connections to your computer</code></li>
<li>选中 <code>Allow Remote Assistance connections to this computer</code></li>
<li>选中 <code>Allow remote connections to this computer</code></li>
</ol>
<a id="more"></a>
<h3 id="3-Windows-10：检查远程访问是否被允许"><a href="#3-Windows-10：检查远程访问是否被允许" class="headerlink" title="3 Windows 10：检查远程访问是否被允许"></a>3 Windows 10：检查远程访问是否被允许</h3><ol>
<li>依次打开：<code>Settings</code> &gt; <code>System</code> &gt; <code>Remote Desktop</code></li>
<li>启用 <code>Enable Remote Desktop</code></li>
</ol>
<h3 id="4-Windows-10：禁止-IPv6"><a href="#4-Windows-10：禁止-IPv6" class="headerlink" title="4 Windows 10：禁止 IPv6"></a>4 Windows 10：禁止 IPv6</h3><p>依次打开：<code>Settings</code> &gt; <code>Network and Internet</code> &gt; <code>Ethernet</code> &gt; <code>Change Adapter options</code>，取消选中 <code>Internet Protocol Version 6 (TCP/IPv6)</code>，然后<strong>重启机器</strong>。</p>
]]></content>
      
        <categories>
            
            <category> 修理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络工具：ARP]]></title>
      <url>/2019/02/01/network-arp/</url>
      <content type="html"><![CDATA[<h3 id="1-查看-arp-映射列表"><a href="#1-查看-arp-映射列表" class="headerlink" title="1 查看 arp 映射列表"></a>1 查看 arp 映射列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> arp -a</span></span><br></pre></td></tr></table></figure>
<h3 id="2-清除-arp-映射"><a href="#2-清除-arp-映射" class="headerlink" title="2 清除 arp 映射"></a>2 清除 arp 映射</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除一个映射</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> arp -d 192.168.199.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除全部映射</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> arp -ad</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
            <tag> arp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chomium 调试方法]]></title>
      <url>/2019/01/31/chromium-debug/</url>
      <content type="html"><![CDATA[<h2 id="Linux-平台"><a href="#Linux-平台" class="headerlink" title="Linux 平台"></a>Linux 平台</h2><h3 id="基础调试"><a href="#基础调试" class="headerlink" title="基础调试"></a>基础调试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdb -tui -ex=r --args out/Debug/chrome --<span class="built_in">disable</span>-seccomp-sandbox http://google.com</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/linux_debugging.md#Basic-browser-process-debugging" target="_blank" rel="noopener">Tips for debugging on Linux</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> dbg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chomium 崩溃日志]]></title>
      <url>/2019/01/31/chromium-crash-report/</url>
      <content type="html"><![CDATA[<h3 id="生成-Crash-报告"><a href="#生成-Crash-报告" class="headerlink" title="生成 Crash 报告"></a>生成 Crash 报告</h3><p>打开 Chromium，通过访问 <code>http://crash/</code> 来触发生成崩溃报告，保存在：</p>
<ul>
<li>Linux：<code>~/.config/google-chrome/Crash Reports/</code></li>
<li>Windows/Mac：<code>/path/to/profile/Crash Reports</code></li>
</ul>
<p>在 Linux 平台，通过设置环境变量，可以阻止报告发送给服务器：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> env CHROME_HEADLESS=1 ./out/Debug/chrome-wrapper</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="解析-Crash-报告"><a href="#解析-Crash-报告" class="headerlink" title="解析 Crash 报告"></a>解析 Crash 报告</h3><p>可以通过 <code>minidump_stackwalk</code> 工具来解析崩溃报告：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minidump_stackwalk 报告名.dmp</span></span><br></pre></td></tr></table></figure>
<p>能过 Linux 平台生成的报告，在执行上面命令解析前，需要先把文件的头（header）去掉，使用文本编辑器打开 dmp 文件，搜索 <code>MDMP</code> 字符，然后将此字符前的头删除后再解析。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://www.chromium.org/developers/decoding-crash-dumps" target="_blank" rel="noopener">Decoding Crash Dumps</a></li>
<li><a href="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/linux_crash_dumping.md" target="_blank" rel="noopener">Linux Crash Dumping</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> crashpad </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Laradock 创建 Laravel 开发环境]]></title>
      <url>/2019/01/26/laradock-laravel-development/</url>
      <content type="html"><![CDATA[<h2 id="Docker-Desktop"><a href="#Docker-Desktop" class="headerlink" title="Docker Desktop"></a>Docker Desktop</h2><p>从官网下载用于 Mac 机器的 Docker Desktop，如果测试从官方源下载镜像非常慢的话，可以添加国内的阿里加速镜像：</p>
<p><img src="/images/posts/laradock/docker-desktop-1.jpg" alt=""></p>
<h2 id="配置-Laradock"><a href="#配置-Laradock" class="headerlink" title="配置 Laradock"></a>配置 Laradock</h2><h3 id="1-下载-Laradock"><a href="#1-下载-Laradock" class="headerlink" title="1 下载 Laradock"></a>1 下载 Laradock</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/laradock/laradock.git</span></span><br></pre></td></tr></table></figure>
<p>目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ laradock</span><br><span class="line">+ project-1</span><br><span class="line">+ project-2</span><br></pre></td></tr></table></figure>
<h3 id="2-配置虚拟主机"><a href="#2-配置虚拟主机" class="headerlink" title="2 配置虚拟主机"></a>2 配置虚拟主机</h3><p>前往 <code>nginx/sites</code>，复制 <code>laravel.conf.example</code> 为 <code>project-1.test.conf</code></p>
<p><strong>注意：</strong>只有 <code>.conf</code> 结尾的才会被 nginx 读取。</p>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    # 域名</span><br><span class="line">    server_name project-1.test;</span><br><span class="line">    # 项目目录，均以 /var/www/ 开头</span><br><span class="line">    root /var/www/project-1;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">         try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files $uri /index.php =404;</span><br><span class="line">        fastcgi_pass php-upstream;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_buffers 16 16k;</span><br><span class="line">        fastcgi_buffer_size 32k;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.ht &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /.well-known/acme-challenge/ &#123;</span><br><span class="line">        root /var/www/letsencrypt/;</span><br><span class="line">        log_not_found off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_log /var/log/nginx/laravel_error.log;</span><br><span class="line">    access_log /var/log/nginx/laravel_access.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-修改本机-hosts"><a href="#3-修改本机-hosts" class="headerlink" title="3 修改本机 hosts"></a>3 修改本机 hosts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1  project-1.test</span><br><span class="line">127.0.0.1  project-2.test</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="4-配置-laradock-的-env"><a href="#4-配置-laradock-的-env" class="headerlink" title="4 配置 laradock 的 .env"></a>4 配置 laradock 的 <code>.env</code></h3><p>前往 laradock 目录，执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp env-example .env</span></span><br></pre></td></tr></table></figure>
<p>打开 <code>.env</code> 文件，根据个人需要定制 PHP、Nginx、MySQL 版本及参数。</p>
<h3 id="5-启动"><a href="#5-启动" class="headerlink" title="5 启动"></a>5 启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d nginx mysql</span></span><br></pre></td></tr></table></figure>
<h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6 测试"></a>6 测试</h3><p>浏览器打开 <code>http://project-1.test</code>，显示出你的 PHP 网站</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>开发 laravel 通常我们需要一些工具，比如 composer，PHPUnit，nodejs 等，Laradock 环境已经为我们安装好了这些工具，但这些环境是在 docker 内部，我们需要通过命令将工作目录映射到 docker 环境，这是要执行的命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose <span class="built_in">exec</span> workspace bash</span></span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-停止-docker-compose"><a href="#1-停止-docker-compose" class="headerlink" title="1 停止 docker-compose"></a>1 停止 docker-compose</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose stop</span></span><br></pre></td></tr></table></figure>
<h3 id="2-切换组件版本"><a href="#2-切换组件版本" class="headerlink" title="2 切换组件版本"></a>2 切换组件版本</h3><p>比如将 MySQL 版本从 latest 切换成 5.7，然后执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose build --no-cache php-fpm</span></span><br></pre></td></tr></table></figure>
<h3 id="3-重启组件"><a href="#3-重启组件" class="headerlink" title="3 重启组件"></a>3 重启组件</h3><p>重启 Nginx：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose restart nginx</span></span><br></pre></td></tr></table></figure>
<h3 id="4-添加组件"><a href="#4-添加组件" class="headerlink" title="4 添加组件"></a>4 添加组件</h3><p>比如，添加 phpmyadmin：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d nginx mysql phpmyadmin</span></span><br></pre></td></tr></table></figure>
<h3 id="5-MySQL-服务器的-Host"><a href="#5-MySQL-服务器的-Host" class="headerlink" title="5 MySQL 服务器的 Host"></a>5 MySQL 服务器的 Host</h3><p>MySQL 服务器绑定的 Host 可以不填写具体 ip 地址，而是简单地用 mysql 表示.</p>
<h3 id="6-workspace-和-php-fpm-的区别"><a href="#6-workspace-和-php-fpm-的区别" class="headerlink" title="6 workspace 和 php-fpm 的区别"></a>6 workspace 和 php-fpm 的区别</h3><p>环境配置文件 <code>.env</code> 里包含相似的两块配置：workspace 和 php-fpm，它们对应两个不同的容器，一个是 FPM，一个是 CLI。不管是安装插件还是修改配置，都要分开修改。</p>
<h3 id="7-删除-lt-none-gt-镜像"><a href="#7-删除-lt-none-gt-镜像" class="headerlink" title="7 删除 &lt;none&gt; 镜像"></a>7 删除 <code>&lt;none&gt;</code> 镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi $(docker images --filter <span class="string">"dangling=true"</span> -q --no-trunc)</span></span><br></pre></td></tr></table></figure>
<h3 id="8-清除-Container，Image"><a href="#8-清除-Container，Image" class="headerlink" title="8 清除 Container，Image"></a>8 清除 Container，Image</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker system prune</span><br><span class="line"></span><br><span class="line">WARNING! This will remove:</span><br><span class="line">        - all stopped containers</span><br><span class="line">        - all networks not used by at least one container</span><br><span class="line">        - all dangling images</span><br><span class="line">        - all build cache</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> nginx </tag>
            
            <tag> mysql </tag>
            
            <tag> laravel </tag>
            
            <tag> docker </tag>
            
            <tag> laradock </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 浏览器如何配置 PKCS#11 设备]]></title>
      <url>/2019/01/25/linux-browser-config-pkcs11/</url>
      <content type="html"><![CDATA[<p>Linux 常用的浏览器包括 Firefox 和 Chrome，这里演示如何为他们添加 PKCS#11（<a href="https://en.wikipedia.org/wiki/PKCS_11" target="_blank" rel="noopener">什么是 PKCS#11？</a>） 设备。</p>
<p>在 Linux 平台上，不管是 Firefox 还是 Chrome 都是使用的 NSS（<a href="https://en.wikipedia.org/wiki/Network_Security_Services" target="_blank" rel="noopener">什么是 NSS？</a>） 来管理证书和安全设备。所以我们只需要知道如何管理 NSS，就可以实现配置这两个浏览器的安全设备配置。</p>
<a id="more"></a>
<h3 id="NSS-工具"><a href="#NSS-工具" class="headerlink" title="NSS 工具"></a>NSS 工具</h3><ul>
<li>certutil</li>
</ul>
<p>文档参考<a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil" target="_blank" rel="noopener">这里</a></p>
<ul>
<li>modutil</li>
</ul>
<p>文档参考<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Reference/NSS_tools_:_modutil" target="_blank" rel="noopener">这里</a></p>
<h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p>Firefox 自带安全设备的配置界面，所以直接通过界面添加 PKCS#11 设备。</p>
<p><strong>第一步：打开配置</strong></p>
<p><img src="/images/posts/nss/ff1.png" alt=""></p>
<p><strong>第二步：进入安全设备管理</strong></p>
<p><img src="/images/posts/nss/ff2.jpg" alt=""></p>
<p><strong>第三步：载入安全设备</strong></p>
<p><img src="/images/posts/nss/ff3.jpg" alt=""></p>
<p><strong>第四步：载入成功</strong></p>
<p><img src="/images/posts/nss/ff4.jpg" alt=""></p>
<p><strong>第五步：输入 PKCS#11 设备 PIN 码</strong></p>
<p><img src="/images/posts/nss/ff5.png" alt=""></p>
<h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p><strong>添加 PKCS#11 设备</strong></p>
<p>添加或修改 nss 数据库前，先关闭 chrome 浏览器，然后打开终端，运行下面命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> modutil -dbdir sql:/home/user-x/.pki/nssdb/ -add <span class="string">"opensc"</span> -libfile  /home/user-x/Desktop/P11/libTFTknP11.so</span></span><br></pre></td></tr></table></figure>
<p>添加成功</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Performing this operation while the browser is running could cause</span><br><span class="line">corruption of your security databases. If the browser is currently running,</span><br><span class="line">you should exit browser before continuing this operation. Type </span><br><span class="line">'q &lt;enter&gt;' to abort, or &lt;enter&gt; to continue: </span><br><span class="line"></span><br><span class="line">DeviceInfo: 2</span><br><span class="line">DeviceInfo: 2</span><br><span class="line">Module "opensc" added to database.</span><br></pre></td></tr></table></figure>
<p><strong>查看设备列表</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo modutil -dbdir sql:/home/user-x/.pki/nssdb/ -list</span></span><br></pre></td></tr></table></figure>
<p>显示结果，<code>2. opensc</code> 是新添加的设备</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Listing of PKCS #11 Modules</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">  1. NSS Internal PKCS #11 Module</span><br><span class="line">   slots: 2 slots attached</span><br><span class="line">  status: loaded</span><br><span class="line"></span><br><span class="line">   slot: NSS Internal Cryptographic Services</span><br><span class="line">  token: NSS Generic Crypto Services</span><br><span class="line"></span><br><span class="line">   slot: NSS User Private Key and Certificate Services</span><br><span class="line">  token: NSS Certificate DB</span><br><span class="line"></span><br><span class="line">  2. opensc</span><br><span class="line">  library name: /home/user-x/Desktop/P11/libTFTknP11.so</span><br><span class="line">   slots: 1 slot attached</span><br><span class="line">  status: loaded</span><br><span class="line"></span><br><span class="line">   slot: SDKEY Slot 0201</span><br><span class="line">  token: MY_TOKEN</span><br><span class="line">-----------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p><strong>打开 Chrome 查看</strong></p>
<p>通过 Chrome 打开 <code>chrome://settings/certificates</code>，浏览器会读取配置的 PKCS#11 设备，提醒用户输入设备 PIN 码</p>
<p><img src="/images/posts/nss/chrome1.jpg" alt=""></p>
<p><strong>访问双向验证网站</strong></p>
<p>访问需要验证客户端证书的网站时，浏览器也会读取配置的 PKCS#11 设备，提醒用户输入设备 PIN 码</p>
<p><img src="/images/posts/nss/chrome2.jpg" alt=""></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-SEC-ERROR-BAD-DATABASE"><a href="#1-SEC-ERROR-BAD-DATABASE" class="headerlink" title="1 SEC_ERROR_BAD_DATABASE"></a>1 SEC_ERROR_BAD_DATABASE</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Description of problem:</span><br><span class="line">apps get "SEC_ERROR_BAD_DATABASE: security library: bad database." error when they set db type by "sql:$&#123;DIR&#125;" (but work fine when type is set by NSS_DEFAULT_DB_TYPE env var)</span><br></pre></td></tr></table></figure>
<p><strong>解决办法</strong></p>
<p>数据库的路径没有写正确，需要使用<em>绝对路径</em>。</p>
]]></content>
      
        <categories>
            
            <category> browser </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 修理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTC ONE（M8）刷机]]></title>
      <url>/2019/01/13/htc-one-flash-rom/</url>
      <content type="html"><![CDATA[<p>手中的一部 Verison HTC ONE 测试机是 4.0 系统，有些软件已经不能安装，抱着“老树开新花”的态度尝试搜了一下，果然已经有比较新的 6.0 系统了。首先用系统内的更新，由于手机是国外运营商版本，再加上更新源也在国外，系统内直接更新一直提示不成功。通过谷歌上查询，发现了一个 HTC 手机资源很全的网站，包含了 ROM 和 Firmware，以及刷机用的工具，比如第三方 Recovery。这里是网址：</p>
<p><a href="https://forum.xda-developers.com/verizon-htc-one-m8/general/index-download-list-verizon-htc-one-m8-t3338285" target="_blank" rel="noopener">HTC 资源下载列表</a></p>
<a id="more"></a>
<p>那就开始更新吧！</p>
<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><ul>
<li><code>电源</code> + <code>音量减</code>：手机进入 Bootloader</li>
<li><code>电源</code> + <code>音量加</code>：强制重启</li>
</ul>
<h3 id="1-刷-Firmware"><a href="#1-刷-Firmware" class="headerlink" title="1 刷 Firmware"></a>1 刷 Firmware</h3><h4 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h4><p>下载 <a href="https://qc3.androidfilehost.com/dl/p4aUy2hL8wtK0mkaFUxC2g/1547492410/24499762636007684/m8vzw_AllInOne_Firmware_6.21.605.3.zip" target="_blank" rel="noopener">m8vzw_AllInOne_Firmware_6.21.605.3.zip</a></p>
<h4 id="1-2-刷入手机"><a href="#1-2-刷入手机" class="headerlink" title="1.2 刷入手机"></a>1.2 刷入手机</h4><ol>
<li>firmware 下载到 SD 卡</li>
<li>将手机重启到 fastboot 模式。开机同时按下电源+音量减</li>
<li>连接手机和 PC</li>
<li>将手机进入 RUU 模式：<code>fastboot oem rebootRUU</code></li>
<li>开始刷入 zip：<code>fastboot flash zip firmware.zip</code></li>
<li>手机会显示更新未完成，需要再执行一次：<code>fastboot flash zip firmware.zip</code></li>
<li>重启进入bootloader：<code>fastboot reboot-bootloader</code></li>
</ol>
<h3 id="2-刷第三方-Recovery"><a href="#2-刷第三方-Recovery" class="headerlink" title="2 刷第三方 Recovery"></a>2 刷第三方 Recovery</h3><h4 id="2-1-下载镜像-IMG"><a href="#2-1-下载镜像-IMG" class="headerlink" title="2.1 下载镜像 IMG"></a>2.1 下载镜像 IMG</h4><p>下载 <a href="https://dl.twrp.me/m8/twrp-3.2.3-1-m8.img.html" target="_blank" rel="noopener">twrp-3.2.3-1-m8.img</a></p>
<h4 id="2-2-下载-twrp-apk"><a href="#2-2-下载-twrp-apk" class="headerlink" title="2.2 下载 twrp apk"></a>2.2 下载 twrp apk</h4><p>通过 twrpapp 可以非常便捷的实现 root 和刷入镜像：</p>
<p><a href="https://dl.twrp.me/twrpapp/me.twrp.twrpapp-26.apk.html" target="_blank" rel="noopener">twrpapp-26.apk</a></p>
<h3 id="3-刷-ROM"><a href="#3-刷-ROM" class="headerlink" title="3 刷 ROM"></a>3 刷 ROM</h3><h4 id="2-1-下载-6-0-ROM"><a href="#2-1-下载-6-0-ROM" class="headerlink" title="2.1 下载 6.0 ROM"></a>2.1 下载 6.0 ROM</h4><p>参考这个<a href="https://forum.xda-developers.com/verizon-htc-one-m8/development/wip-4-17-605-9-stock-resources-firmware-t3196906" target="_blank" rel="noopener">页面</a>，直接下载 <a href="https://qc3.androidfilehost.com/dl/KyPIX5OAK-OoodvZb1iSPQ/1547492497/673368273298951216/6.21.605.3_M8_WL_M60_SENSE70_VZW_MR_AROMA-FINAL.zip" target="_blank" rel="noopener">6.21.605.3_M8_WL_M60_SENSE70_VZW_MR_AROMA-FINAL.zip</a></p>
<h4 id="2-2-刷入-ROM"><a href="#2-2-刷入-ROM" class="headerlink" title="2.2 刷入 ROM"></a>2.2 刷入 ROM</h4><ol>
<li>将 rom 保存到 SD 卡</li>
<li>将手机重启到 fastboot 模式。开机同时按下电源+音量减</li>
<li>连接手机和 PC</li>
<li>选择进入 Recovery 模式</li>
<li>选择要刷入 zip</li>
<li>根据自己的需求定制软件，完成 rom 安装</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 修理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 修理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ADB 的简单用法]]></title>
      <url>/2019/01/13/adb-usage/</url>
      <content type="html"><![CDATA[<h3 id="下载-ADB-工具"><a href="#下载-ADB-工具" class="headerlink" title="下载 ADB 工具"></a>下载 ADB 工具</h3><p><a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip" target="_blank" rel="noopener">Download the ADB ZIP file for macOS</a></p>
<h3 id="HTC-ONE-开启开发者模式"><a href="#HTC-ONE-开启开发者模式" class="headerlink" title="HTC ONE 开启开发者模式"></a>HTC ONE 开启开发者模式</h3><p>设置 -&gt; 关于 -&gt; 软件信息 -&gt; 软件版本（点击7次）</p>
<h3 id="1-安装-apk"><a href="#1-安装-apk" class="headerlink" title="1 安装 apk"></a>1 安装 apk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install apk/full/path</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-卸载-apk"><a href="#2-卸载-apk" class="headerlink" title="2 卸载 apk"></a>2 卸载 apk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell rm data/app/apk-name.apk</span><br></pre></td></tr></table></figure>
<h3 id="3-查看连接设备-cpu"><a href="#3-查看连接设备-cpu" class="headerlink" title="3 查看连接设备 cpu"></a>3 查看连接设备 cpu</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微服务：跨库联合查询]]></title>
      <url>/2019/01/03/query-cross-databases/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/28137025" target="_blank" rel="noopener">微服务改造中解决跨库问题的思路</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/40852402" target="_blank" rel="noopener">关于【微服务】，你必须了解这些</a></li>
<li><a href="https://juejin.im/entry/5905ac37a22b9d0065e1199c" target="_blank" rel="noopener">深度认识 Sharding-JDBC：做最轻量级的数据库中间层</a></li>
<li><a href="http://mycat.io/" target="_blank" rel="noopener">Mycat数据库分库分表中间件</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习使用 kaitai 结构]]></title>
      <url>/2018/12/23/kaitai-struct/</url>
      <content type="html"><![CDATA[<p>kaitai 是一个开源的用于解析二进制文件的解析器，包含了编译器、IDE 和一系列常用的二进制格式描述脚本，你可以直接利用这些脚本去解析对应的二进制文件。</p>
<h3 id="它支持的语言："><a href="#它支持的语言：" class="headerlink" title="它支持的语言："></a>它支持的语言：</h3><ul>
<li>C++/STL</li>
<li>C#</li>
<li>Go (*)</li>
<li>Java</li>
<li>JavaScript</li>
<li>Lua</li>
<li>Perl</li>
<li>PHP</li>
<li>Python</li>
<li>Ruby</li>
</ul>
<a id="more"></a>
<h3 id="安装编译工具"><a href="#安装编译工具" class="headerlink" title="安装编译工具"></a>安装编译工具</h3><p>通过命令行安装 <a href="https://github.com/kaitai-io/kaitai_struct_compiler" target="_blank" rel="noopener">compiler</a>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew install kaitai-struct-compiler</span></span><br></pre></td></tr></table></figure>
<h3 id="使用举例：解析-gif-文件"><a href="#使用举例：解析-gif-文件" class="headerlink" title="使用举例：解析 .gif 文件"></a>使用举例：解析 <code>.gif</code> 文件</h3><h4 id="1-编写描述脚本"><a href="#1-编写描述脚本" class="headerlink" title="1 编写描述脚本"></a>1 编写描述脚本</h4><p>描述脚本以 <code>.ksy</code> 为扩展名，语法参考<a href="https://doc.kaitai.io/ksy_reference.html" target="_blank" rel="noopener">这里</a>，对于同一个二进制文件，由于关注的数据重点不相同，<strong>描述可以有很多种</strong>，下面是 <code>.gif</code> 的描述：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">meta:</span><br><span class="line">  id: gif</span><br><span class="line">  file-extension: gif</span><br><span class="line">  endian: le</span><br><span class="line">seq:</span><br><span class="line">  - id: header</span><br><span class="line">    type: header</span><br><span class="line">  - id: logical_screen</span><br><span class="line">    type: logical_screen</span><br><span class="line">types:</span><br><span class="line">  header:</span><br><span class="line">    seq:</span><br><span class="line">      - id: magic</span><br><span class="line">        contents: 'GIF'</span><br><span class="line">      - id: version</span><br><span class="line">        size: <span class="number">3</span></span><br><span class="line">  logical_screen:</span><br><span class="line">    seq:</span><br><span class="line">      - id: image_width</span><br><span class="line">        type: u2</span><br><span class="line">      - id: image_height</span><br><span class="line">        type: u2</span><br><span class="line">      - id: flags</span><br><span class="line">        type: u1</span><br><span class="line">      - id: bg_color_index</span><br><span class="line">        type: u1</span><br><span class="line">      - id: pixel_aspect_ratio</span><br><span class="line">        type: u1</span><br></pre></td></tr></table></figure>
<h4 id="2-编译成目标语言"><a href="#2-编译成目标语言" class="headerlink" title="2 编译成目标语言"></a>2 编译成目标语言</h4><p>本示例使用 javascript，</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> ksc -t javascript Gif.ksy</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写调用"><a href="#3-编写调用" class="headerlink" title="3 编写调用"></a>3 编写调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> KaitaiStream = <span class="built_in">require</span>(<span class="string">'kaitai-struct/KaitaiStream'</span>);</span><br><span class="line"><span class="keyword">const</span> Gif = <span class="built_in">require</span>(<span class="string">'./fomulas/Gif.js'</span>);</span><br><span class="line"><span class="keyword">const</span> arrayBuffer = fs.readFileSync(<span class="string">'./a-gif-file.gif'</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> Gif(<span class="keyword">new</span> KaitaiStream(arrayBuffer));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"width = "</span> + g.logicalScreen().imageWidth());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"height = "</span> + g.logicalScreen().imageHeight());</span><br></pre></td></tr></table></figure>
<p>通过命令行执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> nodejs index.js</span></span><br></pre></td></tr></table></figure>
<p>查看终端输出结果，已经从 gif 文件中获取图像的宽和高值。</p>
<h3 id="更多“配方”"><a href="#更多“配方”" class="headerlink" title="更多“配方”"></a>更多“配方”</h3><p>官网提供了众多已经定义好的“配方”供大家参考，请看<a href="http://formats.kaitai.io/" target="_blank" rel="noopener">这里</a></p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WebBrowser 设置代理]]></title>
      <url>/2018/12/18/webbrowser-set-proxy/</url>
      <content type="html"><![CDATA[<h2 id="设置方式一：UrlMkSetSessionOption"><a href="#设置方式一：UrlMkSetSessionOption" class="headerlink" title="设置方式一：UrlMkSetSessionOption"></a>设置方式一：<code>UrlMkSetSessionOption</code></h2><p>该方式只作用于本程序的 WebBrowser 组件，不修改系统代理设置，所以对其它应用程序没有影响。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ws2s</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::wstring&amp; wstr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">using</span> convert_typeX = <span class="built_in">std</span>::codecvt_utf8&lt;<span class="keyword">wchar_t</span>&gt;;</span><br><span class="line">  <span class="built_in">std</span>::wstring_convert&lt;convert_typeX, <span class="keyword">wchar_t</span>&gt; converterX;</span><br><span class="line">  <span class="keyword">return</span> converterX.to_bytes(wstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">INTERNET_PROXY_INFO proxyInfo;</span><br><span class="line">proxyInfo.dwAccessType = INTERNET_OPEN_TYPE_PROXY;</span><br><span class="line">proxyInfo.lpszProxyBypass = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// UrlMkSetSessionOption only appears to work on either ASCII or</span></span><br><span class="line"><span class="comment">// multi-byte strings, not Unicode strings. Since the INTERNET_PROXY_INFO</span></span><br><span class="line"><span class="comment">// struct hard-codes to LPCTSTR, and that translates into LPCWSTR for the</span></span><br><span class="line"><span class="comment">// compiler settings we use, we must use the multi-byte version here.</span></span><br><span class="line"><span class="comment">// Note that for the count of input characters, we can use -1, since</span></span><br><span class="line"><span class="comment">// we've forced the string to be null-terminated.</span></span><br><span class="line">proxyInfo.lpszProxy = <span class="keyword">reinterpret_cast</span>&lt;LPCTSTR&gt;(ws2s(<span class="string">L"127.0.0.1:808"</span>).c_str());</span><br><span class="line"></span><br><span class="line">UrlMkSetSessionOption(INTERNET_OPTION_PROXY, &amp;proxyInfo, <span class="keyword">sizeof</span>(INTERNET_PROXY_INFO), <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="设置方式二：InternetSetOption"><a href="#设置方式二：InternetSetOption" class="headerlink" title="设置方式二：InternetSetOption"></a>设置方式二：<code>InternetSetOption</code></h2><p><strong>自动代理PAC</strong> </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">INTERNET_PER_CONN_OPTION_LIST    List;</span><br><span class="line">INTERNET_PER_CONN_OPTION         Option[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>                    nSize =</span><br><span class="line"><span class="keyword">sizeof</span>(INTERNET_PER_CONN_OPTION_LIST);</span><br><span class="line"></span><br><span class="line">Option[<span class="number">0</span>].dwOption = INTERNET_PER_CONN_AUTOCONFIG_URL;</span><br><span class="line">Option[<span class="number">0</span>].Value.pszValue = <span class="string">"http://myserver/proxy.pacl"</span>;</span><br><span class="line">Option[<span class="number">1</span>].dwOption = INTERNET_PER_CONN_FLAGS;</span><br><span class="line">Option[<span class="number">1</span>].Value.dwValue = PROXY_TYPE_AUTO_PROXY_URL;</span><br><span class="line"></span><br><span class="line">List.dwSize = <span class="keyword">sizeof</span>(INTERNET_PER_CONN_OPTION_LIST);</span><br><span class="line">List.pszConnection = <span class="literal">NULL</span>;</span><br><span class="line">List.dwOptionCount = <span class="number">2</span>;</span><br><span class="line">List.dwOptionError = <span class="number">0</span>;</span><br><span class="line">List.pOptions = Option;</span><br><span class="line"></span><br><span class="line">hMyHandle =  InternetOpen(<span class="string">""</span>, INTERNET_OPEN_TYPE_DIRECT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!InternetSetOption(hMyHandle, INTERNET_OPTION_PER_CONNECTION_OPTION,</span><br><span class="line">&amp;List, nSize))</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"InternetQueryOption failed! (%d)\n"</span>, GetLastError());</span><br></pre></td></tr></table></figure>
<p>除了自动代理方式，还有其它方式，请看 <em>参考 1</em></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://github.com/SeleniumHQ/selenium/blob/master/cpp/iedriver/ProxyManager.cpp" target="_blank" rel="noopener">selenium proxy manager</a></li>
<li><a href="/2017/06/10/mitm-proxy/" title="中间人劫持代理">中间人劫持代理</a>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> browser </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> WebBrowser </tag>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 系统 LaunchAgents]]></title>
      <url>/2018/12/14/mac-launchagents/</url>
      <content type="html"><![CDATA[<p>launchctl是一个统一的服务管理框架，可以启动、停止和管理守护进程、应用程序、进程和脚本等。</p>
<h2 id="LaunchDaemons-启动时执行"><a href="#LaunchDaemons-启动时执行" class="headerlink" title="LaunchDaemons - 启动时执行"></a>LaunchDaemons - 启动时执行</h2><p>添加本类脚本，需要注意以下几点：</p>
<ul>
<li>放置到目录 /Library/LaunchDaemons/</li>
<li>确保文件的用户为 root 并且组为 wheel </li>
<li>拥有权限（permissions） “644”: Owner – read/write, group – read, everyone – read</li>
</ul>
<h2 id="LaunchAgents-登录时执行"><a href="#LaunchAgents-登录时执行" class="headerlink" title="LaunchAgents - 登录时执行"></a>LaunchAgents - 登录时执行</h2><ul>
<li>该类脚本可以放置在以下位置:<ul>
<li>/Library/LaunchAgents/  – (For all users)</li>
<li>~/Library/LaunchAgents/  – (For a specific user)</li>
<li>/System/Library/LaunchAgents/ – (For OS X use only)</li>
</ul>
</li>
<li>文件的用户为 root 并且组为 wheel<br>  注意: 当放置在 ~/Library/LaunchAgents/ 时， 用户应该为当前拥有 home 目录的用户</li>
<li>拥有权限（permissions） “644”: Owner – read/write, group – read, everyone – read</li>
</ul>
<h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加载任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> launchctl load -w /Library/LaunchAgents/com.onthink.plist </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除任务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> launchctl unload -w /Library/LaunchAgents/com.onthink.plist </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看任务列表</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> launchctl list | grep <span class="string">'com.onthink'</span></span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.grivet-tools.com/blog/2014/launchdaemons-vs-launchagents/" target="_blank" rel="noopener">LaunchDaemons vs LaunchAgents</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 和 SpringBoot]]></title>
      <url>/2018/10/28/maven-and-springboot/</url>
      <content type="html"><![CDATA[<h2 id="Maven-常用依赖"><a href="#Maven-常用依赖" class="headerlink" title="Maven 常用依赖"></a>Maven 常用依赖</h2><h3 id="dependencies-vs-dependencyManagement"><a href="#dependencies-vs-dependencyManagement" class="headerlink" title="dependencies vs dependencyManagement"></a>dependencies vs dependencyManagement</h3><ul>
<li><strong>dependencies</strong>：引入依赖。子项目会从父项目中继承该依赖项</li>
<li><strong>dependencyManagement</strong>：声明依赖，并不实现引入。因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且 version，scope 都读取自父pom；另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本</li>
</ul>
<h3 id="spring-boot-starter-parent"><a href="#spring-boot-starter-parent" class="headerlink" title="spring-boot-starter-parent"></a>spring-boot-starter-parent</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring-boot-starter-parent 是一个特殊的 starter，它用来提供相关的Maven默认依赖，使用它之后，常用的包依赖可以省去version标签。可查看 <code>.m2\repository\org\springframework\boot\spring-boot-dependencies\1.5.10.RELEASE\spring-boot-dependencies-1.5.10.RELEASE.pom</code> </p>
<h3 id="maven-surefire-plugin"><a href="#maven-surefire-plugin" class="headerlink" title="maven-surefire-plugin"></a><a href="https://maven.apache.org/surefire/maven-surefire-plugin/" target="_blank" rel="noopener">maven-surefire-plugin</a></h3><blockquote>
<p>The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application. It generates reports in two different file formats Plain text files (.txt) XML files (.xml)</p>
</blockquote>
<h3 id="maven-resources-plugin"><a href="#maven-resources-plugin" class="headerlink" title="maven-resources-plugin"></a>maven-resources-plugin</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://tengj.top/2017/02/26/springboot1/" target="_blank" rel="noopener">Spring Boot干货系列：（一）优雅的入门篇</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动设备特征值]]></title>
      <url>/2018/10/26/mobile-device-fingerprint/</url>
      <content type="html"><![CDATA[<h2 id="iOS-设备"><a href="#iOS-设备" class="headerlink" title="iOS 设备"></a>iOS 设备</h2><h3 id="UDID-iOS-Unique-Device-ID"><a href="#UDID-iOS-Unique-Device-ID" class="headerlink" title="UDID - iOS Unique Device ID"></a>UDID - iOS Unique Device ID</h3><ul>
<li>设备的唯一识别符，移动广告商和游戏网络运营商往往需要通过UDID用来识别玩家用户，并对用户活动进行跟踪。</li>
<li>小于 iOS5.0</li>
<li><strong>不再可用</strong></li>
</ul>
<h3 id="Device-Token"><a href="#Device-Token" class="headerlink" title="Device Token"></a>Device Token</h3><ul>
<li>用于向 iOS 设备推送消息的标识（Apple Push Notification System）。每个 App 有两个标识，一个用于开发推送，一个用于生产推送（ad hoc or app store builds）</li>
<li>iOS7 及以后</li>
<li>64位十六进制序列（hexadecimal characters）</li>
<li>往另一台设备恢复数据或重装系统（抹掉系统数据），会造成 device token 改变，所以不能用它来唯一标识一台设备。参考<a href="https://stackoverflow.com/questions/40169404/does-a-ios-push-notification-device-token-change/40169657" target="_blank" rel="noopener">这里</a></li>
</ul>
<h3 id="UUID-Universally-Unique-Identifier"><a href="#UUID-Universally-Unique-Identifier" class="headerlink" title="UUID - Universally Unique Identifier"></a>UUID - Universally Unique Identifier</h3><ul>
<li>通用唯一识别码，它保证每台机器都是唯一的。每次生成都会不一样，所以第一次启动获取后，存储在钥匙串Keychain中，这样app被删除了，Keychain里的数据依然存在，除非系统重置</li>
<li>32位的十六进制序列</li>
<li>抹掉或重装系统会造成改变</li>
</ul>
<h3 id="IDFA-—-Identifier-For-Advertisers"><a href="#IDFA-—-Identifier-For-Advertisers" class="headerlink" title="IDFA — Identifier For Advertisers"></a>IDFA — Identifier For Advertisers</h3><ul>
<li>广告标示符，苹果专门给各广告提供商用来追踪用户而设的标识</li>
<li>iOS6及之后</li>
<li>iOS10 后，苹果推出了“限制广告追踪”功能，参考<a href="https://mobiledevmemo.com/idfa-zeroing-ios-10-change-mobile-advertising/" target="_blank" rel="noopener">这里</a>，用户可以在iPhone 设置中选择关掉 IDFA 获取权限。</li>
</ul>
<h3 id="IDFV-—-Identifier-For-Vendors"><a href="#IDFV-—-Identifier-For-Vendors" class="headerlink" title="IDFV — Identifier For Vendors"></a>IDFV — Identifier For Vendors</h3><ul>
<li>运营商标示符，来自同一个运营商的应用运行在同一个设备上，此ID的值是相同的，不同的运营商应用在同一个设备上的值不同。</li>
<li>iOS6 及之后</li>
<li>如果同一运营商的 app 全部删除，重新安装后的ID值会改变，参考<a href="https://stackoverflow.com/questions/48153518/does-identifierforvendor-change-on-app-update" target="_blank" rel="noopener">这里</a></li>
</ul>
<h3 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h3><ul>
<li>iOS7 后禁止使用。返回同一值：<code>02:00:00:00:00:00</code></li>
</ul>
<h3 id="IMEI-International-Mobile-Equipment-Identity"><a href="#IMEI-International-Mobile-Equipment-Identity" class="headerlink" title="IMEI - International Mobile Equipment Identity"></a>IMEI - International Mobile Equipment Identity</h3><ul>
<li>苹果不允许获取 IMEI</li>
</ul>
<h2 id="Android-设备"><a href="#Android-设备" class="headerlink" title="Android 设备"></a>Android 设备</h2><h3 id="IMEI-International-Mobile-Equipment-Identity-1"><a href="#IMEI-International-Mobile-Equipment-Identity-1" class="headerlink" title="IMEI - International Mobile Equipment Identity"></a>IMEI - International Mobile Equipment Identity</h3><ul>
<li>国际移动设备身份码的缩写，国际移动装备辨识码，是由15位数字组成的”电子串号”，它与每台手机一一对应，而且该码是全世界唯一的</li>
<li>15位</li>
<li>用户设置权限时禁止，将获取不到</li>
</ul>
<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><ul>
<li>android 6.0 以后，googel官方为了加强权限管理而禁用了getSYstemService，不管任何手机都会返回”02:00:00:00:00:00”这个默认的mac地址</li>
</ul>
<h3 id="ANDROID-ID"><a href="#ANDROID-ID" class="headerlink" title="ANDROID_ID"></a>ANDROID_ID</h3><ul>
<li>在设备首次运行的时候，系统会随机生成一64位的数字，并把这个数值以16进制保存下来，这个16进制的数字就是ANDROID_ID，但是如果手机恢复出厂设置这个值会发生改变。</li>
<li>手机恢复出厂设置以后该值会发生变化</li>
<li>在国内Android定制的大环境下，有些设备是不会返回ANDROID_ID的</li>
</ul>
<h3 id="SN-Serial-Number"><a href="#SN-Serial-Number" class="headerlink" title="SN - Serial Number"></a>SN - Serial Number</h3><ul>
<li>设备序列号</li>
<li>获取序列号不需要权限，但是有一定的局限性，在有些手机上会出现垃圾数据，比如红米手机返回的就是连续的非随机数</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://www.jianshu.com/p/178786f833b6" target="_blank" rel="noopener">如何唯一的标识一台Android设备？</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> mobile </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 系统检测浏览器插件]]></title>
      <url>/2018/10/11/detect-internet-plugins-on-mac/</url>
      <content type="html"><![CDATA[<h3 id="通过插件版本号检测"><a href="#通过插件版本号检测" class="headerlink" title="通过插件版本号检测"></a>通过插件版本号检测</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> /usr/libexec/PlistBuddy -c <span class="string">'Print CFBundleVersion'</span> /Library/Internet\ Plug-Ins/npSecEditCtl.MAC.BOC.plugin/Contents/Info.plist</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出结果</span></span><br><span class="line">03002</span><br></pre></td></tr></table></figure>
<h3 id="通过遍历插件目录检测"><a href="#通过遍历插件目录检测" class="headerlink" title="通过遍历插件目录检测"></a>通过遍历插件目录检测</h3><p>遍历 <code>/Library/Internet Plug-Ins/</code> 目录</p>
<h3 id="通过-javascript-检测"><a href="#通过-javascript-检测" class="headerlink" title="通过 javascript 检测"></a>通过 javascript 检测</h3><p>如果使用 javascript，首选需要借助 safari 的 webbrowser 组件来运行。检测的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pluginCount = navigator.plugins.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pluginCount; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(navigator.plugins[i].name==<span class="string">"Shockwave Flash"</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"Flash version "</span> + navigator.plugins[i].version);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://stackoverflow.com/questions/7603513/mac-os-x-check-if-flash-is-installed" target="_blank" rel="noopener">Mac OS X check if flash is installed</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> npplugin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[集成微信和支付宝支付]]></title>
      <url>/2018/10/09/payments/</url>
      <content type="html"><![CDATA[<h2 id="微信-H5-支付"><a href="#微信-H5-支付" class="headerlink" title="微信 H5 支付"></a>微信 H5 支付</h2><p>微信开发文档看 <a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4" target="_blank" rel="noopener">这里</a></p>
<p><img src="https://pay.weixin.qq.com/wiki/doc/api/img/chapter15_1.png" alt=""></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>关于回调 URL</li>
</ol>
<blockquote>
<p>由于设置redirect_url后, 回跳指定页面的操作可能发生在：<br>1,微信支付中间页调起微信收银台后超过5秒<br>2,用户点击“取消支付“或支付完成后点“完成”按钮。<br>因此无法保证页面回跳时，支付流程已结束，所以商户设置的redirect_url地址不能自动执行查单操作，应让用户去点击按钮触发查单操作。回跳页面展示效果可参考下图</p>
</blockquote>
<p><img src="https://pay.weixin.qq.com/wiki/doc/api/img/chapter15_4_5.jpg" alt=""></p>
<h2 id="支付宝-H5-支付"><a href="#支付宝-H5-支付" class="headerlink" title="支付宝 H5 支付"></a>支付宝 H5 支付</h2><p>支付宝文档看 <a href="https://docs.open.alipay.com/203" target="_blank" rel="noopener">这里</a></p>
<h2 id="Native-H5-混合-APP-调用支付宝"><a href="#Native-H5-混合-APP-调用支付宝" class="headerlink" title="Native-H5 混合 APP 调用支付宝"></a>Native-H5 混合 APP 调用支付宝</h2><p>支付宝文档看 <a href="https://docs.open.alipay.com/203/106493/" target="_blank" rel="noopener">这里</a></p>
<p>使用这种方式注意点</p>
<ul>
<li>App 需要集成支付宝 SDK</li>
<li></li>
</ul>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> payment </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NVM 用法]]></title>
      <url>/2018/09/29/nvm-usage/</url>
      <content type="html"><![CDATA[<h3 id="通过-Homebrew-安装"><a href="#通过-Homebrew-安装" class="headerlink" title="通过 Homebrew 安装"></a>通过 Homebrew 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew install nvm</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="查看已安装软件信息"><a href="#查看已安装软件信息" class="headerlink" title="查看已安装软件信息"></a>查看已安装软件信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew info node                                                               </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出结果：</span></span><br><span class="line">node: stable 9.11.1 (bottled), HEAD</span><br><span class="line">Platform built on V8 to build network applications</span><br><span class="line">https://nodejs.org/</span><br><span class="line">/usr/local/Cellar/node/9.2.1 (5,125 files, 49.5MB)</span><br><span class="line">  Poured from bottle on 2017-12-12 at 16:54:22</span><br><span class="line">/usr/local/Cellar/node/9.4.0 (5,125 files, 49.7MB) *</span><br><span class="line">  Poured from bottle on 2018-01-29 at 17:08:45</span><br><span class="line">From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/node.rb</span><br><span class="line">==&gt; Dependencies</span><br><span class="line">Build: python@2 ✘, pkg-config ✔</span><br><span class="line">Recommended: icu4c ✘</span><br><span class="line">Optional: openssl ✘</span><br><span class="line">==&gt; Options</span><br><span class="line">--with-debug</span><br><span class="line">        Build with debugger hooks</span><br><span class="line">--with-openssl</span><br><span class="line">        Build against Homebrews OpenSSL instead of the bundled OpenSSL</span><br><span class="line">--without-completion</span><br><span class="line">        npm bash completion will not be installed</span><br><span class="line">--without-icu4c</span><br><span class="line">        Build with small-icu (English only) instead of system-icu (all locales)</span><br><span class="line">--without-npm</span><br><span class="line">        npm will not be installed</span><br><span class="line">--HEAD</span><br><span class="line">        Install HEAD version</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Bash completion has been installed to:</span><br><span class="line">  /usr/local/etc/bash_completion.d</span><br></pre></td></tr></table></figure>
<h3 id="安装、卸载、升级"><a href="#安装、卸载、升级" class="headerlink" title="安装、卸载、升级"></a>安装、卸载、升级</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew install node</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> brew uninstall node</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> brew upgrade node</span></span><br></pre></td></tr></table></figure>
<h3 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> nvm install 6.14.4</span></span><br></pre></td></tr></table></figure>
<h3 id="切换-node-版本"><a href="#切换-node-版本" class="headerlink" title="切换 node 版本"></a>切换 node 版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> nvm use 6.14.4</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Homebrew 用法]]></title>
      <url>/2018/09/29/brew-usage/</url>
      <content type="html"><![CDATA[<h3 id="列出已安装软件"><a href="#列出已安装软件" class="headerlink" title="列出已安装软件"></a>列出已安装软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew list </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出结果</span></span><br><span class="line">autoconf        flyway          libgpg-error    libyaml         mysql           php71           pkg-config      ruby-build</span><br><span class="line">automake        freetype        libksba         makedepend      nginx           php71-mcrypt    proxychains-ng  sphinx-doc</span><br><span class="line">boost           gettext         libmemcached    maven           node            php71-xdebug    putty           telnet</span><br><span class="line">cmake           icu4c           libpng          mcrypt          openssl         php@7.1         readline        unixodbc</span><br><span class="line">composer        jpeg            libtool         memcached       openssl@1.1     phpmyadmin      rename          xz</span><br><span class="line">coreutils       libevent        libxml2         mhash           pcre            phpunit         ruby            zlib</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="查看已安装软件信息"><a href="#查看已安装软件信息" class="headerlink" title="查看已安装软件信息"></a>查看已安装软件信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew info node                                                               </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出结果：</span></span><br><span class="line">node: stable 9.11.1 (bottled), HEAD</span><br><span class="line">Platform built on V8 to build network applications</span><br><span class="line">https://nodejs.org/</span><br><span class="line">/usr/local/Cellar/node/9.2.1 (5,125 files, 49.5MB)</span><br><span class="line">  Poured from bottle on 2017-12-12 at 16:54:22</span><br><span class="line">/usr/local/Cellar/node/9.4.0 (5,125 files, 49.7MB) *</span><br><span class="line">  Poured from bottle on 2018-01-29 at 17:08:45</span><br><span class="line">From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/node.rb</span><br><span class="line">==&gt; Dependencies</span><br><span class="line">Build: python@2 ✘, pkg-config ✔</span><br><span class="line">Recommended: icu4c ✘</span><br><span class="line">Optional: openssl ✘</span><br><span class="line">==&gt; Options</span><br><span class="line">--with-debug</span><br><span class="line">        Build with debugger hooks</span><br><span class="line">--with-openssl</span><br><span class="line">        Build against Homebrews OpenSSL instead of the bundled OpenSSL</span><br><span class="line">--without-completion</span><br><span class="line">        npm bash completion will not be installed</span><br><span class="line">--without-icu4c</span><br><span class="line">        Build with small-icu (English only) instead of system-icu (all locales)</span><br><span class="line">--without-npm</span><br><span class="line">        npm will not be installed</span><br><span class="line">--HEAD</span><br><span class="line">        Install HEAD version</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Bash completion has been installed to:</span><br><span class="line">  /usr/local/etc/bash_completion.d</span><br></pre></td></tr></table></figure>
<h3 id="安装、卸载、升级"><a href="#安装、卸载、升级" class="headerlink" title="安装、卸载、升级"></a>安装、卸载、升级</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew install node</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> brew uninstall node</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> brew upgrade node</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> homebrew </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysqldump 用法]]></title>
      <url>/2018/09/26/mysqldump/</url>
      <content type="html"><![CDATA[<h3 id="只导出表结构"><a href="#只导出表结构" class="headerlink" title="只导出表结构"></a>只导出表结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 只导出表结构</span></span><br><span class="line">mysqldump --no-create-info -h localhost -u root -p jizhunmall_test &gt; ~/zhp_20180925_data.sql</span><br></pre></td></tr></table></figure>
<h3 id="只导出数据"><a href="#只导出数据" class="headerlink" title="只导出数据"></a>只导出数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 只导出数据</span></span><br><span class="line">mysqldump -d -h localhost -u root -p jizhunmall_test &gt; ~/zhp_20180925_tables.sql</span><br></pre></td></tr></table></figure>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> database </category>
            
        </categories>
        
        
        <tags>
            
            <tag> database </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[H2 数据库]]></title>
      <url>/2018/09/26/h2-database/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>从<a href="http://www.h2database.com/html/main.html" target="_blank" rel="noopener">官网</a>下载压缩包</li>
<li>解压到任意目录</li>
<li>进入 <code>h2/bin</code> 目录，运行 <code>java -jar h2*.jar</code> </li>
</ol>
<p>h2 数据库启动后，会自动使用默认浏览器打开管理页面 <a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a></p>
<a id="more"></a>
<h3 id="使用-H2-控制台"><a href="#使用-H2-控制台" class="headerlink" title="使用 H2 控制台"></a>使用 H2 控制台</h3><p><strong>登录界面</strong></p>
<p><img src="/images/posts/h2database/login.png" alt=""></p>
<ul>
<li>选择 “Generic H2 (Embedded)” 配置</li>
<li>JDBC URL 输入 <code>jdbc:h2:~/db_name;</code>，其它 <code>~/db_name</code> 对应用户目录下的 db_name 文件</li>
<li>用户名默认为 sa</li>
<li>密码可以为空</li>
</ul>
<p>点击连接后，进入到管理界面</p>
<p><strong>管理界面</strong></p>
<p><img src="/images/posts/h2database/console.png" alt=""></p>
<p>管理页面按钮不多，每个按钮的作用，可以将鼠标悬浮到上面，查看 tooltip</p>
<h3 id="导入导出数据库"><a href="#导入导出数据库" class="headerlink" title="导入导出数据库"></a>导入导出数据库</h3><h4 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h4><p><strong>通过命令行</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -cp h2*.jar org.h2.tools.Script -url jdbc:h2:~/zhp1 -user sa -script zahuopu.sql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用压缩文件</span></span><br><span class="line">java -cp h2*.jar org.h2.tools.Script -url jdbc:h2:~/config -user sa -script test.zip -options compression zip</span><br></pre></td></tr></table></figure>
<p><strong>通过控制台</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUNSCRIPT FROM 'test.sql'</span><br></pre></td></tr></table></figure>
<h4 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h4><p><strong>通过命令行</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -cp h2*.jar org.h2.tools.Script -url jdbc:h2:~/config -user sa -script zahuopu.sql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出压缩文件</span></span><br><span class="line">java -cp h2*.jar org.h2.tools.Script -url jdbc:h2:~/config -user sa -script test.zip -options compression zip</span><br></pre></td></tr></table></figure>
<p><strong>通过控制台</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCRIPT 'test.sql'</span><br></pre></td></tr></table></figure>
<h3 id="springboot-单元测试中使用"><a href="#springboot-单元测试中使用" class="headerlink" title="springboot 单元测试中使用"></a>springboot 单元测试中使用</h3><h4 id="1-放置文件"><a href="#1-放置文件" class="headerlink" title="1 放置文件"></a>1 放置文件</h4><p>将 schema.sql 和 data.sql 放置在 <code>src/test/resources/db/</code> 目录</p>
<h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2 修改配置"></a>2 修改配置</h4><p>打开 application-test.yml，添加 h2 数据库配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">   datasource:</span><br><span class="line">     driver-class-name: org.h2.Driver</span><br><span class="line">     url: jdbc:h2:mem:zhp_test;mode=mysql;</span><br><span class="line">     username: root</span><br><span class="line">     schema: classpath:db/schema.sql</span><br><span class="line">     data: classpath:db/data.sql</span><br></pre></td></tr></table></figure>
<h3 id="H2-的一些配置"><a href="#H2-的一些配置" class="headerlink" title="H2 的一些配置"></a>H2 的一些配置</h3><h4 id="mode-mysql"><a href="#mode-mysql" class="headerlink" title="mode=mysql"></a>mode=mysql</h4><p>以 mysql 方式运行，对于从 mysql 导出的脚本，会提供很好的兼容性。使用方式有两种：</p>
<ul>
<li>加到 url 中：<code>url: jdbc:h2:mem:zhp_test;mode=mysql;</code></li>
<li>加到 sql 脚本开头：<code>SET MODE MYSQL;</code></li>
</ul>
<h4 id="REFERENTIAL-INTEGRITY"><a href="#REFERENTIAL-INTEGRITY" class="headerlink" title="REFERENTIAL_INTEGRITY"></a>REFERENTIAL_INTEGRITY</h4><p>关闭 REFERENTIAL_INTEGRITY，可以让脚本忽略外键约束，比如插入数据时。加在脚本中的做法是<code>SET REFERENTIAL_INTEGRITY FALSE;</code></p>
<h3 id="MySQL-脚本转换-H2-脚本"><a href="#MySQL-脚本转换-H2-脚本" class="headerlink" title="MySQL 脚本转换 H2 脚本"></a>MySQL 脚本转换 H2 脚本</h3><p>直接导出的 MySQL 脚本，并不能直接用于 H2 数据库，存在语法兼容问题。比如<a href="http://matthewcasperson.blogspot.com/2013/07/exporting-from-mysql-to-h2.html" target="_blank" rel="noopener">这里</a>所列。</p>
<p>常用导出方法</p>
<p><strong>mysqldump</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 只导出表结构</span></span><br><span class="line">mysqldump --no-create-info -h localhost -u root -p jizhunmall_test &gt; ~/zhp_20180925_data.sql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只导出数据</span></span><br><span class="line">mysqldump -d -h localhost -u root -p jizhunmall_test &gt; ~/zhp_20180925_tables.sql</span><br></pre></td></tr></table></figure>
<p><strong>phpmyadmin</strong></p>
<p>phpmyadmin 有非常好用的 UI，可以通过配置规则导出，比如：</p>
<ul>
<li>不包含符号 `</li>
<li>不包含注释</li>
</ul>
<p>导出后，比较简单的做法是用正则表达式替换，下面列出了一些：</p>
<h4 id="1-替换注释"><a href="#1-替换注释" class="headerlink" title="1 替换注释"></a>1 替换注释</h4><ul>
<li><code>COMMENT &#39;[^&#39;]+?&#39;</code> 替换为空</li>
<li><code>COMMENT=&#39;[^&#39;]+?&#39;</code> 替换为空</li>
</ul>
<h4 id="2-替换-charset"><a href="#2-替换-charset" class="headerlink" title="2 替换 charset"></a>2 替换 charset</h4><ul>
<li><code>CHARACTER SET utf8 COLLATE utf8_bin</code> 替换为空</li>
<li><code>COLLATE utf8_unicode_ci</code> 替换为空</li>
<li><code>COLLATE=utf8_unicode_ci</code> 替换为空</li>
</ul>
<h4 id="3-替换数据类型"><a href="#3-替换数据类型" class="headerlink" title="3 替换数据类型"></a>3 替换数据类型</h4><ul>
<li><code>float(</code> 替换为 <code>decimal(</code></li>
<li><code>double(</code> 替换为 <code>decimal(</code></li>
</ul>
<h4 id="4-一次性修改表变为多条"><a href="#4-一次性修改表变为多条" class="headerlink" title="4 一次性修改表变为多条"></a>4 一次性修改表变为多条</h4><p><strong>2层</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(ALTER TABLE .+)\n(  ADD .+),\n(  ADD .+;)</span><br><span class="line">$1\n$2;\n$1\n$3</span><br></pre></td></tr></table></figure>
<p><strong>3层</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(ALTER TABLE .+)\n(  ADD .+),\n(  ADD .+),\n(  ADD .+;)</span><br><span class="line">$1\n$2;\n$1\n$3;\n$1\n$4</span><br></pre></td></tr></table></figure>
<p><strong>4层</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(ALTER TABLE .+)\n(  ADD .+),\n(  ADD .+),\n(  ADD .+),\n(  ADD .+;)</span><br><span class="line">$1\n$2;\n$1\n$3;\n$1\n$4;\n$1\n$5</span><br></pre></td></tr></table></figure>
<p><strong>5层</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(ALTER TABLE .+)\n(  ADD .+),\n(  ADD .+),\n(  ADD .+),\n(  ADD .+),\n(  ADD .+;)</span><br><span class="line">$1\n$2;\n$1\n$3;\n$1\n$4;\n$1\n$5;\n$1\n$6</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Image 格式]]></title>
      <url>/2018/09/21/image-formats/</url>
      <content type="html"><![CDATA[<h3 id="文件标识"><a href="#文件标识" class="headerlink" title="文件标识"></a>文件标识</h3><table>
<thead>
<tr>
<th style="text-align:left">格式</th>
<th style="text-align:left">开头HEX</th>
<th style="text-align:left">开头字节</th>
<th style="text-align:left">结束HEX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">jpg</td>
<td style="text-align:left">FF D8 FF DB</td>
<td style="text-align:left">ÿØÿÛ</td>
<td style="text-align:left">FF D9</td>
</tr>
<tr>
<td style="text-align:left">jpg</td>
<td style="text-align:left">FF D8 FF E0 00 10 4A 46 49 46 00 01</td>
<td style="text-align:left">ÿØÿà..JFIF..</td>
<td style="text-align:left">FF D9</td>
</tr>
<tr>
<td style="text-align:left">jpg</td>
<td style="text-align:left">FF D8 FF E1 ?? ?? 45 78 69 66 00 00</td>
<td style="text-align:left">ÿØÿá..Exif..</td>
<td style="text-align:left">FF D9</td>
</tr>
<tr>
<td style="text-align:left">png</td>
<td style="text-align:left">89 50 4E 47 0D 0A 1A 0A</td>
<td style="text-align:left">.PNG….</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">gif</td>
<td style="text-align:left">47 49 46 38 37 61</td>
<td style="text-align:left">GIF87a</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">gif</td>
<td style="text-align:left">47 49 46 38 39 61</td>
<td style="text-align:left">GIF89a</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">bmp</td>
<td style="text-align:left">42 4D</td>
<td style="text-align:left">BM</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">tiff</td>
<td style="text-align:left">49 49 2A 00</td>
<td style="text-align:left">II*.</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">tiff</td>
<td style="text-align:left">4D 4D 00 2A</td>
<td style="text-align:left">MM.*</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">webp</td>
<td style="text-align:left">52 49 46 46 ?? ?? ?? ?? 57 45 42 50</td>
<td style="text-align:left">RIFF….WEBP</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">ico</td>
<td style="text-align:left">00 00 01 00</td>
<td style="text-align:left">….</td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
<p>更多请参考 <a href="https://en.wikipedia.org/wiki/List_of_file_signatures" target="_blank" rel="noopener"><br>List of file signatures</a></p>
]]></content>
      
        <categories>
            
            <category> server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> server </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx 配置]]></title>
      <url>/2018/08/31/nginx-usage/</url>
      <content type="html"><![CDATA[<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>查看 <a href="http://nginx.org/en/docs/varindex.html" target="_blank" rel="noopener">官方文档-变量</a></p>
<a id="more"></a>
<h3 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法:  try_files file ... uri;</span><br><span class="line">      try_files file ... =code;</span><br><span class="line">默认值:  无</span><br><span class="line">上下文:  server, location</span><br></pre></td></tr></table></figure>
<p>try_files 的作用是按照从左向右顺序尝试每个资源，直到有可用资源处理，作用域是在当前上下文。尝试的资源相对于 <code>root</code> 和 <code>alias</code> 目录。</p>
<p><strong>示例1：按顺序尝试，直到返回 404</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/index.html $uri.html =404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：使用代理</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    try_files /system/maintenance.html</span><br><span class="line">              $uri $uri/index.html $uri.html</span><br><span class="line">              @mongrel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location @mongrel &#123;</span><br><span class="line">    proxy_pass http://mongrel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法: rewrite regex replacement [flag];</span><br><span class="line">默认值:  —</span><br><span class="line">上下评论:  server, location, if</span><br></pre></td></tr></table></figure>
<p>如果正则匹配 URI，则使用后面的 replacement 完成替换。flag 能决定是否进一步处理。</p>
<h4 id="flag-取值"><a href="#flag-取值" class="headerlink" title="flag 取值"></a>flag 取值</h4><ul>
<li>last<br>  停止处理当前的 <code>ngx_http_rewrite_module</code> 规则集，并对更新的 URI 启动新一轮 location 搜索；</li>
<li>break<br>  停止处理当前的 <code>ngx_http_rewrite_module</code> 规则集，如同 break 规则；</li>
<li>redirect<br>  返回一个 302 临时重定向。如果替换字符串以 <code>http://</code>，<code>https://</code> 开头或者是 <code>$scheme</code> 时使用；</li>
<li>permanent<br>  返回一个 301 永久重定向。</li>
</ul>
<p>如果正则表达式包含 “}” 或 “;” 则整个表达式应该用单引号或双引号包裹。</p>
<p>如果替换字符串中包含新的请求参数，默认之前的请求参数会自动扩充到后面。如果不希望如此，则需要在替换字符串后加一个问号，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^/users/(.*)$ /show?user=$1? last;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> server </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据表的主键选择]]></title>
      <url>/2018/08/12/table-primary-field/</url>
      <content type="html"><![CDATA[<p>关于数据表主键的设计，团队内部产生过这样的争论：</p>
<p><strong>举例</strong>：订单表业务相关的字段有</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">amount</td>
<td style="text-align:left">流水号</td>
</tr>
<tr>
<td style="text-align:left">sn</td>
<td style="text-align:left">流水号</td>
</tr>
<tr>
<td style="text-align:left">pay_sn</td>
<td style="text-align:left">支付流水号</td>
</tr>
<tr>
<td style="text-align:left">buyer</td>
<td style="text-align:left">购买人</td>
</tr>
<tr>
<td style="text-align:left">ship</td>
<td style="text-align:left">物流相关数据</td>
</tr>
<tr>
<td style="text-align:left">create_at</td>
<td style="text-align:left">订单生成时间</td>
</tr>
</tbody>
</table>
<p>可以确定的是，sn 是唯一的，所以 A 的观点是 <em>“用 sn 做为表的主键”</em>，与其不同的观点是 <em>“添加业务无关的 id 自增字段用作主键”</em>。这两种设计哪个更合理呢？</p>
<p>简而言之，就是选择业务主键还是代理主键的问题。</p>
<a id="more"></a>
<ul>
<li>业务主键：在数据库表中把具有业务逻辑含义的字段作为主键;</li>
<li>代理主键：在数据库表中使用业务逻辑无关的字段作为主键;</li>
</ul>
<h3 id="代理主键优点有什么？"><a href="#代理主键优点有什么？" class="headerlink" title="代理主键优点有什么？"></a>代理主键优点有什么？</h3><h4 id="1-不受业务变更影响"><a href="#1-不受业务变更影响" class="headerlink" title="1. 不受业务变更影响"></a>1. 不受业务变更影响</h4><blockquote>
<p>任何有业务含义的列都有改变的可能性。关系数据库学的最重要的一个理论就是：不要给关键字赋予任何业务意义。假如关键字具有了业务意义，当用户决定改变业务含义，也许他们想要为关键字增加几位数字或把数字改为字母，那么就必须修改相关的关键字。一个表中的主关键字有可能被其他表作为外键。就算是一个简单的改变，譬如在客户号码上增加一位数字，也可能会造成极大的维护上的开销。</p>
</blockquote>
<p>如果以订单流水号为主键，其数据类型是字符型，数据生成规则是“日期+时间+4位随机数”。以后的某次迭代，觉得这样的流水保密性差，会让人嗅探到日订单数，所以数据类型改为整型，生成规则改为内部、不公开的数字规则。这样的改动，其它与订单表关联的表的外键都需要全部改一遍。</p>
<h4 id="2-存储占用空间小"><a href="#2-存储占用空间小" class="headerlink" title="2. 存储占用空间小"></a>2. 存储占用空间小</h4><p>int 是4字节，bigint 是8字节，如果有其它关联表，这些表也可节省空间</p>
<h4 id="3-联表查询效率高"><a href="#3-联表查询效率高" class="headerlink" title="3. 联表查询效率高"></a>3. 联表查询效率高</h4><p>数据库处理整型字段的连接查询，效率是最高的。</p>
<h4 id="4-索引和排序效率高"><a href="#4-索引和排序效率高" class="headerlink" title="4. 索引和排序效率高"></a>4. 索引和排序效率高</h4><p>主键是按顺序自增的，确保数据的顺序插入，对于检索非常有利</p>
<h4 id="5-防止录入错误"><a href="#5-防止录入错误" class="headerlink" title="5. 防止录入错误"></a>5. 防止录入错误</h4><p>比如某表以唯一的手机号作为主键，后端管理人员将手机号录入错误，当其它表已经关联了该表后，再修改主键，需要同时更新关联表</p>
<h4 id="6-防止删除后重现"><a href="#6-防止删除后重现" class="headerlink" title="6. 防止删除后重现"></a>6. 防止删除后重现</h4><p>由于代理主键是无意义自增字段，所以能保证不会再出现同一个主键值，业务相关的主键则无法避免。比如某表以手机号为主键，然后用户甲用手机号 A 注册，一段时间后注销了账号，同时也在电信部门注销了手机号 A。当用户乙获得手机号 A 并用来注册用户时，系统会面临已关联过手机号 A 的用户甲数据如何妥善处理的问题。</p>
<h3 id="业务主键优点有什么？"><a href="#业务主键优点有什么？" class="headerlink" title="业务主键优点有什么？"></a>业务主键优点有什么？</h3><h4 id="1-减少一个业务无关字段"><a href="#1-减少一个业务无关字段" class="headerlink" title="1. 减少一个业务无关字段"></a>1. 减少一个业务无关字段</h4><h4 id="2-避免表关联关系丢失"><a href="#2-避免表关联关系丢失" class="headerlink" title="2. 避免表关联关系丢失"></a>2. 避免表关联关系丢失</h4><p>假如银行系统用 id 做主键，一旦发生故障，id 字段被错误修改了，其它表与其关联关系会丢失。所以通常银行系统都要求使用业务主键，身份证号、存折号、卡号等，这个需求并不是出于性能的考虑而是出于安全性的考虑。</p>
<p>其实吧，上面的说法是指没有为表建立关系约束的情景，如果添加了外键约束，主键的 update 和 delete 操作是不会造成表关系丢失的。  </p>
<h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p>目前比较推荐的做法有两种</p>
<h4 id="1-使用业务无关字段做主键"><a href="#1-使用业务无关字段做主键" class="headerlink" title="1. 使用业务无关字段做主键"></a>1. 使用业务无关字段做主键</h4><p>直接使用与业务无关的自增 id 作为主键</p>
<h4 id="2-使用业务无关字段做主键，同时添加逻辑主键"><a href="#2-使用业务无关字段做主键，同时添加逻辑主键" class="headerlink" title="2. 使用业务无关字段做主键，同时添加逻辑主键"></a>2. 使用业务无关字段做主键，同时添加逻辑主键</h4><p>使用自增 id 作为主键应对效率问题；同时采用 uuid 做逻辑主键可以用来应对之后的水平分表。</p>
<p>对于我们相对小型的数据库设计，<strong>选择第1种做法</strong>。</p>
<h3 id="参考与讨论："><a href="#参考与讨论：" class="headerlink" title="参考与讨论："></a>参考与讨论：</h3><ol>
<li><a href="http://blog.51cto.com/yaocoder/1567715" target="_blank" rel="noopener">数据库的唯一标示符（ID）的选择</a></li>
<li><a href="https://www.cnblogs.com/lsx1993/p/4663147.html" target="_blank" rel="noopener">MySQL数据库主键设计原则</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 分支模型]]></title>
      <url>/2018/08/01/git-mode-best-practices/</url>
      <content type="html"><![CDATA[<p>关于 Git 分支的模型有不少种，目前我读到的、以及实践中获取的最佳模型，是下面这篇文章所讲：</p>
<ul>
<li><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">原文：A successful Git branching model</a></li>
<li><a href="https://juejin.im/entry/570cca4271cfe4006735d3bd" target="_blank" rel="noopener">翻译</a></li>
</ul>
<p>下面，我以自己的理解，对文章里的重点做一些提取。</p>
<a id="more"></a>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>如下图</p>
<ul>
<li>origin 并不是中心，只表示原始仓库，git 是分布式的（无中心）</li>
<li>可以从任意结点同步，包括 origin 和其它开发者</li>
</ul>
<p><img src="/images/posts/git_branch_mode/distribute_mode.jpg" alt=""></p>
<h3 id="分支类型"><a href="#分支类型" class="headerlink" title="分支类型"></a>分支类型</h3><h4 id="代码分支"><a href="#代码分支" class="headerlink" title="代码分支"></a>代码分支</h4><table>
<thead>
<tr>
<th style="text-align:left">分支</th>
<th style="text-align:center">共享</th>
<th style="text-align:center">生命期</th>
<th style="text-align:center">来源</th>
<th style="text-align:center">合并到</th>
<th style="text-align:center">命名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">主分支（master）</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">永久</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">开发分支（develop）</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">永久</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">功能分支（feature）</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">合并后删除</td>
<td style="text-align:center">develop</td>
<td style="text-align:center">develop</td>
<td style="text-align:center">feature-*</td>
</tr>
<tr>
<td style="text-align:left">发行分支（release）</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">合并后删除</td>
<td style="text-align:center">develop</td>
<td style="text-align:center">develop<br>master</td>
<td style="text-align:center">release-&lt;版本号&gt;</td>
</tr>
<tr>
<td style="text-align:left">热补丁分支（hotfix）</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">合并后删除</td>
<td style="text-align:center">release</td>
<td style="text-align:center">develop<br>master</td>
<td style="text-align:center">hotfix-&lt;新版本号&gt;</td>
</tr>
</tbody>
</table>
<p><strong>master 分支</strong></p>
<ul>
<li>HEAD 永远指向最新的发布点</li>
</ul>
<p><strong>develop 分支</strong></p>
<ul>
<li>HEAD 永远指向最新的功能需求，nightly building 的来源</li>
</ul>
<p><strong>release 分支</strong></p>
<ul>
<li>不允许添加新功能</li>
</ul>
<p><strong>hotfix 分支</strong></p>
<ul>
<li>为了并行开发，修复 bug 同时，不影响 develop 分支开发新功能</li>
<li>当有一个 Release 分支存在时，Hotfix 分支应该合并到该 Release 分支，而不是 develop 分支</li>
</ul>
<h4 id="持续集成分支"><a href="#持续集成分支" class="headerlink" title="持续集成分支"></a>持续集成分支</h4><p>由于使用了持续集成部署，它会监测某个分支的提交来触发完成新版本部署，所以我们定义了两个新分支和复用上面一个分支，专门用于持续集成。</p>
<table>
<thead>
<tr>
<th style="text-align:center">分支</th>
<th style="text-align:center">来源</th>
<th style="text-align:center">代码</th>
<th style="text-align:center">数据库</th>
<th style="text-align:left">目的</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">dev</td>
<td style="text-align:center">feature <br>hotfix <br> develop</td>
<td style="text-align:center">覆盖</td>
<td style="text-align:center">覆盖</td>
<td style="text-align:left">内部开发测试</td>
</tr>
<tr>
<td style="text-align:center">beta</td>
<td style="text-align:center">release</td>
<td style="text-align:center">覆盖</td>
<td style="text-align:center">覆盖</td>
<td style="text-align:left">客户协同测试</td>
</tr>
<tr>
<td style="text-align:center">master</td>
<td style="text-align:center">master</td>
<td style="text-align:center">覆盖</td>
<td style="text-align:center">覆盖</td>
<td style="text-align:left">上线部署</td>
</tr>
</tbody>
</table>
<h4 id="分支协作图"><a href="#分支协作图" class="headerlink" title="分支协作图"></a>分支协作图</h4><p><img src="/images/posts/git_branch_mode/gitflow-model.src.001.jpeg" alt=""></p>
<h3 id="实践与讨论"><a href="#实践与讨论" class="headerlink" title="实践与讨论"></a>实践与讨论</h3><h4 id="1-持续集成的冲突"><a href="#1-持续集成的冲突" class="headerlink" title="1. 持续集成的冲突"></a>1. 持续集成的冲突</h4><p><strong>时间点1</strong></p>
<ul>
<li>开发甲：从 develop 分支创建 feature-A</li>
<li>开发乙：从 develop 分支创建 feature-B </li>
</ul>
<p><strong>时间点2</strong></p>
<ul>
<li>开发甲：初步完成 feature-A，合并到 dev 分支，触发自动部署到开发服务器并修改了数据库结构</li>
</ul>
<p><strong>时间点3</strong></p>
<ul>
<li>开发乙：初步完成 feature-B，待测试，需要合并到 dev 分支触发自动部署，但是与新数据结构不匹配</li>
</ul>
<p>这时，乙该如何做？</p>
<ul>
<li>方案1：保留 feature-A，合并 feature-B，但数据库不能兼容</li>
<li>方案2：覆盖甲提交的 feature-A，同时还原数据库，但是 feature-A 不能再继续测试了</li>
</ul>
<h4 id="2-一个功能，提交多次-vs-提交一次？no-ff-vs-fast-forward？"><a href="#2-一个功能，提交多次-vs-提交一次？no-ff-vs-fast-forward？" class="headerlink" title="2. 一个功能，提交多次 vs 提交一次？no-ff vs fast forward？"></a>2. 一个功能，提交多次 vs 提交一次？no-ff vs fast forward？</h4><p>举例，后端开发功能：用户登录验证接口，需要提供传统用户名登录和短信验证码登录两类接口</p>
<p>按照开发过程，我们一般会经历：修改数据库 -&gt; 用户名密码登录接口 -&gt; 短信验证码登录接口 三个阶段</p>
<p>当开发完成时，我们是提交3次（修改数据库 -&gt; 用户名密码登录接口 -&gt; 短信验证码登录接口）还是合并成一次提交呢？</p>
<p>显然，3次提交更清晰，可维护性更好，当出现问题时，直接找到对应提交并处理，要比处理一个合并后的提交更高效、可靠。</p>
<p>当将这个功能合并到开发分支时，使用 no-ff 参数，可以保留提交的“批次”，也就是这个功能所包含了一批提交。这样做的好处是，当整个功能都需要回滚时，能更清晰分辨哪些提交要一起回滚。如下图所示：</p>
<p><img src="/images/posts/git_branch_mode/merge-without-ff@2x.png" alt=""></p>
<p>所以，这个问题的结论是：使用<strong>多次提交</strong>，当合并的功能包含多次提交时，<strong>加上 <code>no-ff</code> 参数</strong>。</p>
<h3 id="参考与讨论："><a href="#参考与讨论：" class="headerlink" title="参考与讨论："></a>参考与讨论：</h3><ol>
<li><a href="https://gist.github.com/digitaljhelms/4287848" target="_blank" rel="noopener">另一变种：Branching</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Service 和 Utility 区分]]></title>
      <url>/2018/07/27/service-vs-utility/</url>
      <content type="html"><![CDATA[<p>开发者有时会纠结一部分复用的逻辑是实现在 Service 中，还是 Utility 或 Helper 中，下面讨论一下他们的区别。</p>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><ul>
<li>包含业务逻辑</li>
<li>应用上下文内使用</li>
</ul>
<p><strong>举例</strong></p>
<p>TicketService 购票服务</p>
<ul>
<li>buyTicket 买票</li>
<li>refundTicket 退票</li>
</ul>
<p>业务逻辑可能涉及应用内的用户、订单、短信、邮件、日志等</p>
<a id="more"></a>
<h3 id="Helper-或-Utility"><a href="#Helper-或-Utility" class="headerlink" title="Helper 或 Utility"></a>Helper 或 Utility</h3><ul>
<li>可复用的组件</li>
<li>通用，不限制在应用内</li>
</ul>
<p><strong>举例</strong></p>
<p>MoneyUtil/MoneyHelper  账务助手</p>
<ul>
<li>exchange(from, to) 汇率兑换</li>
<li>calcultateTax 计算税金</li>
</ul>
<p>不和应用上下文相关，甚至可以在其它应用使用。</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ol>
<li><a href="https://softwareengineering.stackexchange.com/questions/132067/difference-between-a-service-class-and-a-helper-class" target="_blank" rel="noopener">Difference between a service class and a Helper class</a></li>
<li><a href="https://stackoverflow.com/questions/871434/java-utility-class-vs-service" target="_blank" rel="noopener">Java Utility Class vs. Service</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据模型 - 阿里规约（1）]]></title>
      <url>/2018/07/22/alibaba-models/</url>
      <content type="html"><![CDATA[<p>在阿里巴巴编码规约中列举了下面几个领域模型规约: </p>
<ul>
<li><strong>DO（Data Object）</strong>：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。也常叫做 Entity。 </li>
<li><strong>DTO（Data Transfer Object）</strong>：数据传输对象，Service 或 Manager 向外传输的对象。 </li>
<li><strong>BO（Business Object）</strong>：业务对象。由 Service 层输出的封装业务逻辑的对象。 </li>
<li><strong>AO（Application Object）</strong>：应用对象。在 Web 层与 Service 层之间抽象的复用对象模型，极为贴近展示层，复用度不高。 </li>
<li><strong>VO（View Object）</strong>：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。注意与另一类 VO（Value Object）不一样<sup>[1]</sup>，后者常被用作枚举。</li>
<li><strong>Query</strong>：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用 Map 类来传输。</li>
</ul>
<h3 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h3><p>根据项目复杂度的不同，我们不一定实现所有层的模型对象，根据必要性从大到小，我认为应该是这个顺序：DO &gt; DTO &gt; VO &gt; Query &gt; AO、BO</p>
<a id="more"></a>
<h4 id="单独使用-DO"><a href="#单独使用-DO" class="headerlink" title="单独使用 DO"></a>单独使用 DO</h4><p>DO 映射了数据表结构，必须要定义。当系统极简单时，可以只用 DO 一层模型，返回到 view 层或接口层，但是缺点也很直观：</p>
<ul>
<li>对敏感数据的封装处理复杂，比如 user.password</li>
<li>对接口多样化需要处理复杂，比如接口 A 需要返回 10 个字段，接口 B 需要返回同一模型的 5 个字段，一般还需要将结果再次处理，转换成其它数据结构（例如 Map）再返回</li>
</ul>
<h4 id="DO、DTO-组合"><a href="#DO、DTO-组合" class="headerlink" title="DO、DTO 组合"></a>DO、DTO 组合</h4><p>当系统稍微复杂时，就需要在 Controller 和 Service，以及 Service 层之间传递模型对象，尤其是跨 JVM，跨网络传输时，比如 UserService 和 MessageService 不部署在同一主机上，这时就要加入 DTO 模型，它的特点是：</p>
<ul>
<li>DTO 一般继承 <code>java.io.Serializable</code>，为了跨 JVM，跨网络传输</li>
</ul>
<h4 id="DO、DTO、VO-组合"><a href="#DO、DTO、VO-组合" class="headerlink" title="DO、DTO、VO 组合"></a>DO、DTO、VO 组合</h4><p>当系统继续扩展，我们会遇到同一底层数据（DO、DTO）需要不同的呈现结果。比如搜索商品，对于返回的 Product 模型，页面模板 A 需要 20 个属性；页面模板 B 需要 10 个属性，但这 10 个属性并不完全包含在 A 需要的 20 个属性内；接口 C 是动态下拉列表，只需要 id, name 两个属性。对于这样的需求，一种模型是不能满足的，每个业务都去通过 Map 转换虽然可能满足需求，但重复的转换代码和 Map 属性的不可控性，都为后期的维护造成困难。</p>
<p>更好的解决方案是定义 VO 层模型，对应视图层不同的需求，它的优点是：</p>
<ul>
<li>相对于 Map，保证属性完整</li>
<li>模型能统一转换，后期可维护性提高（参见 ModelMapper<sup>[2]</sup>）</li>
<li>可以根据视图要求，扩展复杂的属性</li>
</ul>
<p><strong>扩展属性</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Class UserVO &#123;</span><br><span class="line">  String firstName &#123; get; set; &#125;</span><br><span class="line">  String lastName &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 扩展属性：依靠其它属性或一些复杂计算</span></span><br><span class="line">  String fullName;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getFullName</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ModelMapper 转换</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Class UserDTO &#123;</span><br><span class="line">  Integer id &#123; get; set; &#125;</span><br><span class="line">  String firstName &#123; get; set; &#125;</span><br><span class="line">  String lastName &#123; get; set; &#125;</span><br><span class="line">  String email &#123; get; set; &#125;</span><br><span class="line">  String password &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class UserVO &#123;</span><br><span class="line">  String firstName &#123; get; set; &#125;</span><br><span class="line">  String lastName &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> UserDTO();</span><br><span class="line">user.setId(<span class="number">1L</span>);</span><br><span class="line">user.setFirstName(<span class="string">"三"</span>);</span><br><span class="line">user.setLastName(<span class="string">"张"</span>);</span><br><span class="line">user.setEmail(<span class="string">"101@qq.com"</span>);</span><br><span class="line">user.setPassword(<span class="string">"a1b2c3"</span>);</span><br><span class="line"><span class="comment">// 转换：DTO -&gt; VO</span></span><br><span class="line">ModelMapper modelMapper = <span class="keyword">new</span> ModelMapper();</span><br><span class="line">UserVO userVO = modelMapper.map(user, UserVO.class);</span><br><span class="line"><span class="comment">// 显示结果</span></span><br><span class="line">System.out.println(userVO);</span><br></pre></td></tr></table></figure>
<h3 id="项目存在的问题"><a href="#项目存在的问题" class="headerlink" title="项目存在的问题"></a>项目存在的问题</h3><p>实际上，目前的项目中混用了 DO 和 DTO，既映射数据表对象，又在子系统中传递。另外，我们应该增加 VO 模型来替代之前返回 Map 的情况。</p>
<p><strong>遗留问题</strong>：多个 VO 命名规则，以及对系统带来的复杂性？</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ol>
<li><a href="https://stackoverflow.com/questions/1612334/difference-between-dto-vo-pojo-javabeans" target="_blank" rel="noopener">Difference between DTO, VO, POJO, JavaBeans?</a></li>
<li><a href="https://github.com/modelmapper/modelmapper" target="_blank" rel="noopener">ModelMapper</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Homestead 开发 Laravel]]></title>
      <url>/2018/06/22/using-homestead-for-laravel/</url>
      <content type="html"><![CDATA[<p>Homestead 是基于 vagrant 的用于开发 php 程序的配置文件，包含了常用的开发软件和服务。 vagrant 是一套虚拟机管理软件，它通过虚拟机的接口管理虚拟机镜像。</p>
<p><strong>Vagrant VS 直接使用虚拟机</strong></p>
<ul>
<li>Vagrant 可以下载制作好的镜像文件，包含了特定的系统和软件组合</li>
<li>Vagrant 可以通过接口直接管理镜像的启动、停止、共享目录等</li>
</ul>
<p><strong>Vagrant VS Docker</strong></p>
<ul>
<li>Docker 本身是一种不同于虚拟机的虚拟化技术，它比虚拟机更轻量，常用于虚拟软件，而虚拟机则虚拟完整系统</li>
<li>Vagrant 是管理虚拟机的工具，可用来管理 VMware，VirtualBox 等</li>
</ul>
<a id="more"></a>
<p>下面以 virtualbox + vagrant + homestrad 为例，记录一下流程：</p>
<h4 id="1-安装-virtualbox"><a href="#1-安装-virtualbox" class="headerlink" title="1 安装 virtualbox"></a>1 安装 virtualbox</h4><h4 id="2-安装-vagrant"><a href="#2-安装-vagrant" class="headerlink" title="2 安装 vagrant"></a>2 安装 vagrant</h4><p>下载 <a href="http://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">vagrant</a></p>
<h4 id="3-安装-Homestead-Vagrant-Box"><a href="#3-安装-Homestead-Vagrant-Box" class="headerlink" title="3 安装 Homestead Vagrant Box"></a>3 安装 Homestead Vagrant Box</h4><p>打开命令行，直接执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure>
<h4 id="4-安装-Homestead"><a href="#4-安装-Homestead" class="headerlink" title="4 安装 Homestead"></a>4 安装 Homestead</h4><p>这里直接将 homestead 安装到项目中，首先 cd 到项目目录，执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require laravel/homestead --dev</span><br></pre></td></tr></table></figure>
<p>生成 homestead 配置文件，</p>
<p><strong>Mac / Linux:</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php vendor/bin/homestead make</span><br></pre></td></tr></table></figure>
<p><strong>Windows:</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vendor\bin\homestead make</span><br></pre></td></tr></table></figure>
<p>执行成功后，会在项目根目录生成 <code>Homestead.yaml</code></p>
<h4 id="5-配置-Homestead"><a href="#5-配置-Homestead" class="headerlink" title="5 配置 Homestead"></a>5 配置 Homestead</h4><p>打开 <code>Homestead.yaml</code></p>
<h5 id="5-1-修改-provider"><a href="#5-1-修改-provider" class="headerlink" title="5.1 修改 provider"></a>5.1 修改 provider</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">provider: virtualbox</span><br></pre></td></tr></table></figure>
<h5 id="5-2-修改共享目录"><a href="#5-2-修改共享目录" class="headerlink" title="5.2 修改共享目录"></a>5.2 修改共享目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">folders:</span><br><span class="line">    - map: &apos;c:\dev\code&apos;   &lt;- 对应主机的目录</span><br><span class="line">      to: /home/vagrant/Code  &lt;- 对应虚拟机的目录</span><br></pre></td></tr></table></figure>
<h5 id="5-3-配置-Ningx"><a href="#5-3-配置-Ningx" class="headerlink" title="5.3 配置 Ningx"></a>5.3 配置 Ningx</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: homestead.app   &lt;- 域名</span><br><span class="line">      to: /home/vagrant/Code/Laravel/public</span><br></pre></td></tr></table></figure>
<p>当开发定义了域名后，需要修改系统的 hosts 文件，Mac and Linux 文件在 <code>/etc/hosts</code>，  Windows 文件位置为 <code>C:\Windows\System32\drivers\etc\hosts</code>，打开文件后，加入下面这行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.10  homestead.app</span><br></pre></td></tr></table></figure>
<h4 id="6-启动-Homestead"><a href="#6-启动-Homestead" class="headerlink" title="6 启动 Homestead"></a>6 启动 Homestead</h4><p>一旦配置好，通过命令 <code>vagrant up</code> 启动。其它命令：</p>
<ul>
<li><code>vagrant destroy --force</code> 删除虚拟机</li>
<li><code>vagrant halt</code> 停止</li>
<li><code>vagrant reload</code> 重新加载虚拟机</li>
</ul>
<h4 id="7-Laravel-项目初始化"><a href="#7-Laravel-项目初始化" class="headerlink" title="7 Laravel 项目初始化"></a>7 Laravel 项目初始化</h4><p><strong>7.1 安装 php 依赖</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure>
<p><strong>7.2 安装 npm 依赖</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p><strong>7.3 编译前端资源</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run dev  </span><br><span class="line">或 npm run build  &lt;- 压缩、混淆处理  </span><br><span class="line">或 npm run watch  &lt;- 动态编译</span><br></pre></td></tr></table></figure>
<h4 id="8-测试页面"><a href="#8-测试页面" class="headerlink" title="8 测试页面"></a>8 测试页面</h4><p>用浏览器打开 <code>homestead.app</code>，正常情况能够看到 laravel 项目首页</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://laravel.com/docs/5.1/homestead" target="_blank" rel="noopener">Laravel Homestead (5.1)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 编程规范]]></title>
      <url>/2018/03/26/java-code-style/</url>
      <content type="html"><![CDATA[<p><strong>最常用的两套 java 编程规范</strong></p>
<ul>
<li><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener">Alibaba Java Coding Guidelines</a></li>
<li><a href="https://github.com/google/google-java-format" target="_blank" rel="noopener">google-java-format</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate 用法]]></title>
      <url>/2018/03/26/hibernate-usage/</url>
      <content type="html"><![CDATA[<h3 id="操作-m-n-关联表"><a href="#操作-m-n-关联表" class="headerlink" title="操作 m-n 关联表"></a>操作 m-n 关联表</h3><ul>
<li><a href="https://stackoverflow.com/questions/5127129/mapping-many-to-many-association-table-with-extra-columns" target="_blank" rel="noopener">定义关联表实体</a></li>
<li><a href="https://www.mkyong.com/hibernate/hibernate-many-to-many-example-join-table-extra-column-annotation/" target="_blank" rel="noopener">Hibernate – Many-to-Many example – join table + extra column (Annotation)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> hibernate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Boost Logger 使用]]></title>
      <url>/2017/12/08/boost-logger/</url>
      <content type="html"><![CDATA[<p>未完成</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vc++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 deployer 自动化部署 laravel]]></title>
      <url>/2017/12/07/deploer-for-laravel-usage/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="phar-包方式"><a href="#phar-包方式" class="headerlink" title="phar 包方式"></a>phar 包方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -LO https://deployer.org/deployer.phar</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv deployer.phar /usr/<span class="built_in">local</span>/bin/dep</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/dep</span></span><br></pre></td></tr></table></figure>
<h3 id="composer-方式"><a href="#composer-方式" class="headerlink" title="composer 方式"></a>composer 方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> composer require deployer/deployer --dev</span></span><br></pre></td></tr></table></figure>
<p>当以 composer 方式安装时，需要这样运行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> php vendor/bin/dep</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h2><h3 id="1-初始化配置"><a href="#1-初始化配置" class="headerlink" title="1. 初始化配置"></a>1. 初始化配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dep init</span></span><br></pre></td></tr></table></figure>
<h3 id="2-本地执行任务"><a href="#2-本地执行任务" class="headerlink" title="2. 本地执行任务"></a>2. 本地执行任务</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;)-&gt;local();</span><br></pre></td></tr></table></figure>
<h3 id="3-任务中调用其它任务"><a href="#3-任务中调用其它任务" class="headerlink" title="3. 任务中调用其它任务"></a>3. 任务中调用其它任务</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  set(<span class="string">'deploy_path'</span>, <span class="keyword">__DIR__</span> . <span class="string">'/.build'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:prepare'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:release'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:update_code'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:vendors'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:symlink'</span>);</span><br><span class="line">&#125;)-&gt;local();</span><br></pre></td></tr></table></figure>
<h2 id="部署-Laravel-项目"><a href="#部署-Laravel-项目" class="headerlink" title="部署 Laravel 项目"></a>部署 Laravel 项目</h2><h3 id="纯服务器方案"><a href="#纯服务器方案" class="headerlink" title="纯服务器方案"></a>纯服务器方案</h3><p>执行 <code>dep init</code> 后，根据提示，选择 laravel 项目，会生成下面的配置文件：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Deployer</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被引用文件保存在 deployer/deployer 项目中</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'recipe/laravel.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目名</span></span><br><span class="line">set(<span class="string">'application'</span>, <span class="string">'om'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目仓库</span></span><br><span class="line">set(<span class="string">'repository'</span>, <span class="string">'git@code.git'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选：Allocate tty for git clone. Default value is false.</span></span><br><span class="line">set(<span class="string">'git_tty'</span>, <span class="keyword">true</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 多次部署之间共享的文件或目录</span></span><br><span class="line">add(<span class="string">'shared_files'</span>, []);</span><br><span class="line">add(<span class="string">'shared_dirs'</span>, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器上需要写权限的目录</span></span><br><span class="line">add(<span class="string">'writable_dirs'</span>, []);</span><br><span class="line">set(<span class="string">'allow_anonymous_stats'</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署的域名</span></span><br><span class="line">host(<span class="string">'mystie.com'</span>)-&gt;set(<span class="string">'deploy_path'</span>, <span class="string">'~/&#123;&#123;application&#125;&#125;'</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义任务</span></span><br><span class="line">task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    run(<span class="string">'cd &#123;&#123;release_path&#125;&#125; &amp;&amp; build'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选：部署失败，自动解锁文件</span></span><br><span class="line">after(<span class="string">'deploy:failed'</span>, <span class="string">'deploy:unlock'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在创建软链接前，执行迁移数据库脚本</span></span><br><span class="line">before(<span class="string">'deploy:symlink'</span>, <span class="string">'artisan:migrate'</span>);</span><br></pre></td></tr></table></figure>
<p>执行 <code>dep deploy</code>，使用该配置部署。</p>
<p>部署任务对应的步骤定义在 <code>deployer/deployer</code> 项目的 <code>recipe/laravel.php</code> 中：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main task</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">desc(<span class="string">'Deploy your project'</span>);</span><br><span class="line">task(<span class="string">'deploy'</span>, [</span><br><span class="line">    <span class="string">'deploy:info'</span>,</span><br><span class="line">    <span class="string">'deploy:prepare'</span>,</span><br><span class="line">    <span class="string">'deploy:lock'</span>,</span><br><span class="line">    <span class="string">'deploy:release'</span>,</span><br><span class="line">    <span class="string">'deploy:update_code'</span>,</span><br><span class="line">    <span class="string">'deploy:shared'</span>,</span><br><span class="line">    <span class="string">'deploy:vendors'</span>,</span><br><span class="line">    <span class="string">'deploy:writable'</span>,</span><br><span class="line">    <span class="string">'artisan:storage:link'</span>,</span><br><span class="line">    <span class="string">'artisan:view:clear'</span>,</span><br><span class="line">    <span class="string">'artisan:cache:clear'</span>,</span><br><span class="line">    <span class="string">'artisan:config:cache'</span>,</span><br><span class="line">    <span class="string">'artisan:optimize'</span>,</span><br><span class="line">    <span class="string">'deploy:symlink'</span>,</span><br><span class="line">    <span class="string">'deploy:unlock'</span>,</span><br><span class="line">    <span class="string">'cleanup'</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">after(<span class="string">'deploy'</span>, <span class="string">'success'</span>);</span><br></pre></td></tr></table></figure>
<p>这些任务都是在登录到远端服务器后执行。</p>
<h3 id="本地-服务器方案"><a href="#本地-服务器方案" class="headerlink" title="本地+服务器方案"></a>本地+服务器方案</h3><p><strong>流程</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+-------------+       +-------------+        +--------------+</span><br><span class="line">|  .dep       |       | compute ver |        |              |</span><br><span class="line">|  releases   +-----&gt; + release     +------&gt; +  git clone   |</span><br><span class="line">|  shared     |       |             |        |              |</span><br><span class="line">+-------------+       +-------------+        +--------------+</span><br><span class="line">                                                     |</span><br><span class="line">                                                     |</span><br><span class="line">                                                     v</span><br><span class="line">+-------------+       +-------------+        +--------------+</span><br><span class="line">|             |       | npm install |        |   composer   |</span><br><span class="line">|   upload    |&lt;------+ npm build   | &lt;------+    vendor    |</span><br><span class="line">|             |       |             |        |              |</span><br><span class="line">+-------------+       +-------------+        +--------------+</span><br></pre></td></tr></table></figure>
<p><strong>部署脚本</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Deployer</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'recipe/laravel.php'</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">'recipe/npm.php'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 定义部署参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Project name</span></span><br><span class="line">set(<span class="string">'application'</span>, <span class="string">'om'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Project repository</span></span><br><span class="line">set(<span class="string">'repository'</span>, <span class="string">'git@code.cn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [Optional] Allocate tty for git clone. Default value is false.</span></span><br><span class="line">set(<span class="string">'git_tty'</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">set(<span class="string">'allow_anonymous_stats'</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">set(<span class="string">'current_script_path'</span>, <span class="keyword">__DIR__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shared files/dirs between deploys </span></span><br><span class="line">add(<span class="string">'shared_files'</span>, []);</span><br><span class="line"><span class="comment">// 上传资源目录和下载资源目录，更好的方案是统一使用 public/storage</span></span><br><span class="line"><span class="comment">// 详见：https://laravel.com/docs/5.5/filesystem</span></span><br><span class="line">add(<span class="string">'shared_dirs'</span>, [</span><br><span class="line">  <span class="string">'public/download'</span>,</span><br><span class="line">  <span class="string">'public/upload'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Writable dirs by web server </span></span><br><span class="line">add(<span class="string">'writable_dirs'</span>, [</span><br><span class="line">  <span class="string">'public/download'</span>,</span><br><span class="line">  <span class="string">'public/upload'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hosts</span></span><br><span class="line">host(<span class="string">'mysite.com'</span>)-&gt;set(<span class="string">'deploy_path'</span>, <span class="string">'~/&#123;&#123;application&#125;&#125;'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [Optional] if deploy fails automatically unlock.</span></span><br><span class="line">after(<span class="string">'deploy:failed'</span>, <span class="string">'deploy:unlock'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Migrate database before symlink new release.</span></span><br><span class="line">before(<span class="string">'deploy:symlink'</span>, <span class="string">'artisan:migrate'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 任务</span></span><br><span class="line"></span><br><span class="line">task(<span class="string">'local:phpunit'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  run(<span class="string">"cd &#123;&#123;local_release_path&#125;&#125; &amp;&amp; phpunit"</span>);</span><br><span class="line">&#125;)-&gt;local();</span><br><span class="line"></span><br><span class="line"><span class="comment">// build npm</span></span><br><span class="line">task(<span class="string">'npm:build'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  run(<span class="string">"cd &#123;&#123;release_path&#125;&#125; &amp;&amp; &#123;&#123;bin/npm&#125;&#125; run production"</span>);</span><br><span class="line">&#125;)-&gt;local();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">task(<span class="string">'npm:copy_install'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  set(<span class="string">'bin/npm'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> run(<span class="string">'which npm'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (test(<span class="string">'[ -d &#123;&#123;current_script_path&#125;&#125;/node_modules ]'</span>)) &#123;</span><br><span class="line">    run(<span class="string">'cp -R &#123;&#123;current_script_path&#125;&#125;/node_modules &#123;&#123;release_path&#125;&#125;'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run(<span class="string">"cd &#123;&#123;release_path&#125;&#125; &amp;&amp; &#123;&#123;bin/npm&#125;&#125; install"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">task(<span class="string">'copy_deploy:vendors'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (test(<span class="string">'[ -d &#123;&#123;current_script_path&#125;&#125;/vendor ]'</span>)) &#123;</span><br><span class="line">    run(<span class="string">'cp -R &#123;&#123;current_script_path&#125;&#125;/vendor &#123;&#123;release_path&#125;&#125;'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run(<span class="string">'cd &#123;&#123;release_path&#125;&#125; &amp;&amp; &#123;&#123;bin/composer&#125;&#125; &#123;&#123;composer_options&#125;&#125;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地编译</span></span><br><span class="line">task(<span class="string">'build:local'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  set(<span class="string">'deploy_path'</span>, <span class="keyword">__DIR__</span> . <span class="string">'/.build'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:prepare'</span>);     <span class="comment">// create releases and shared dirs locally</span></span><br><span class="line">  invoke(<span class="string">'deploy:release'</span>);     <span class="comment">// release number locally</span></span><br><span class="line">  invoke(<span class="string">'deploy:update_code'</span>); <span class="comment">// git clone locally</span></span><br><span class="line">  invoke(<span class="string">'copy_deploy:vendors'</span>);<span class="comment">// composer install locally</span></span><br><span class="line">  invoke(<span class="string">'npm:copy_install'</span>);   <span class="comment">// npm install locally</span></span><br><span class="line">  invoke(<span class="string">'npm:build'</span>);          <span class="comment">// npm install locally</span></span><br><span class="line">  invoke(<span class="string">'local:phpunit'</span>);      <span class="comment">// phpunit tests locally</span></span><br><span class="line">  invoke(<span class="string">'deploy:symlink'</span>);     <span class="comment">// symlink /current locally</span></span><br><span class="line">&#125;)-&gt;local();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// local -&gt; server</span></span><br><span class="line">task(<span class="string">'upload'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  upload(<span class="keyword">__DIR__</span> . <span class="string">"/.build/current/"</span>, <span class="string">'&#123;&#123;release_path&#125;&#125;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署流程</span></span><br><span class="line">task(<span class="string">'deploy'</span>, [</span><br><span class="line">  <span class="string">'deploy:info'</span>,</span><br><span class="line">  <span class="string">'build:local'</span>,</span><br><span class="line">  <span class="string">'deploy:prepare'</span>,</span><br><span class="line">  <span class="string">'deploy:lock'</span>,</span><br><span class="line">  <span class="string">'deploy:release'</span>,</span><br><span class="line">  <span class="string">'upload'</span>,</span><br><span class="line">  <span class="string">'deploy:shared'</span>,          <span class="comment">// shared and .env linking on server</span></span><br><span class="line">  <span class="string">'deploy:writable'</span>,        <span class="comment">// ensure shared paths are writable on server</span></span><br><span class="line">  <span class="string">'artisan:storage:link'</span>,   <span class="comment">// execute artisan storage:link</span></span><br><span class="line">  <span class="string">'artisan:view:clear'</span>,</span><br><span class="line">  <span class="string">'artisan:cache:clear'</span>,</span><br><span class="line">  <span class="string">'artisan:config:cache'</span>,</span><br><span class="line">  <span class="string">'artisan:optimize'</span>,</span><br><span class="line">  <span class="string">'deploy:symlink'</span>,</span><br><span class="line">  <span class="string">'deploy:unlock'</span>,</span><br><span class="line">  <span class="string">'cleanup'</span>,</span><br><span class="line">  <span class="string">'success'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h2 id="更多“配方”"><a href="#更多“配方”" class="headerlink" title="更多“配方”"></a>更多“配方”</h2><p>上面光定义了 laravel 一种部署方案，更多部署方案请参考：</p>
<ul>
<li><a href="https://deployer.org/recipes" target="_blank" rel="noopener">deployer 官方</a></li>
<li><a href="https://github.com/deployphp/recipes" target="_blank" rel="noopener">deployer github</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> deployer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 钩子]]></title>
      <url>/2017/12/07/windows-hooks/</url>
      <content type="html"><![CDATA[<p>未完成</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vc++ </tag>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[玩转 WebBrowser]]></title>
      <url>/2017/12/06/play-with-webbrowser/</url>
      <content type="html"><![CDATA[<p>未完成</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h2 id="通过注册表设置特性"><a href="#通过注册表设置特性" class="headerlink" title="通过注册表设置特性"></a>通过注册表设置特性</h2>]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> WebBrowser </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Flyway]]></title>
      <url>/2017/12/05/setup-flyway/</url>
      <content type="html"><![CDATA[<p><a href="https://flywaydb.org/" target="_blank" rel="noopener">Flyway</a> 是一款简单好用的数据库迁移工具。优点是简洁、易上手，功能满足常规开发、维护，并提供了命令行工具。</p>
<h3 id="安装命令行工具"><a href="#安装命令行工具" class="headerlink" title="安装命令行工具"></a>安装命令行工具</h3><p>通过 <code>homebrew</code> 安装非常方便：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install flyway</span></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://flywaydb.org/assets/balsamiq/CommandLineDirectoryStructure.png" alt=""></p>
<p>默认安装的配置文件保存在：<code>/usr/local/Cellar/flyway/4.2.0/libexec/conf/flyway.conf</code>，其中包含非常详细的注释。</p>
<p>由于需要在多个项目中使用 flyway，每个项目的配置又不完全相同，所以修改默认配置不是我需要的方案。于是，我在每个项目中分别保存一份配置文件，执行时加载各自的配置。</p>
<p><strong>项目配置文件</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: flyway.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接</span></span><br><span class="line">flyway.url=jdbc:mysql://localhost:3306/database</span><br><span class="line">flyway.user=user</span><br><span class="line">flyway.password=password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迁移脚本的路径，对应：项目根目录/sql</span></span><br><span class="line">flyway.locations=filesystem:sql</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="迁移脚本"><a href="#迁移脚本" class="headerlink" title="迁移脚本"></a>迁移脚本</h3><p>关于脚本的几个重要点：</p>
<ul>
<li>脚本可以用 java 或 sql 写</li>
<li>每个文件以版本号开头: <code>V1__</code></li>
<li>迁移时按照版本号顺序执行</li>
</ul>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="1-迁移"><a href="#1-迁移" class="headerlink" title="1. 迁移"></a>1. 迁移</h4><p><img src="https://flywaydb.org/assets/balsamiq/command-migrate.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flyway -configFiles=./flyway.conf migrate</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[家庭电路常识]]></title>
      <url>/2017/12/01/circuit/</url>
      <content type="html"><![CDATA[<h2 id="常见名词"><a href="#常见名词" class="headerlink" title="常见名词"></a>常见名词</h2><p><strong>Neutral Wire</strong></p>
<p>中性线，也叫零线，一般为蓝色或黄色。用字母 <code>N</code> 表示。</p>
<p><strong>Live Wire</strong></p>
<p>相线，也叫火线，是不是更应该翻译成“活”线，一般为红色或黄色或绿色，一种颜色代表三相电中的一相。用字母 <code>L</code> 表示。</p>
<p><strong>Earch Wire</strong></p>
<p>地线，一般为黄绿色或黑色。 用字母 <code>E</code> 表示。</p>
<p><strong>System Earthing</strong></p>
<p>工作接地。</p>
<p><strong>Protective Earthing</strong></p>
<p>保护接地。用字母 <code>PE</code> 表示。</p>
<p><strong>空气开关</strong></p>
<p>简称空开，是当电路中电流大于额定值就跳闸，从而保护电路不被烧毁的开关装置，功能类似过去老房子用的保险丝。</p>
<p>空开按极数（P）分1P 2P 3P 4P四种，家庭常用就是单极1P和二极2P，适用于额定电压220V，1P空开只有一个接线头，接一根火线，跳闸只断这根火线；2P空开有两个接线头，接一根火线和一根零线，跳闸后火线和零线一起断。</p>
<p><img src="https://pic3.zhimg.com/v2-1921b7b12e0918dcd696225b2a5b7b32_r.jpg" alt=""></p>
<a id="more"></a>
<p><strong>漏电保护器</strong></p>
<p>漏电保护器简称漏保，和空开一样是断路器，但是比空开多了一个有漏电保护功能的模块，不仅电流过大会跳闸，漏电也会跳闸。</p>
<p><img src="https://pic4.zhimg.com/50/v2-244d2c987b715e31be36d0f205987cb7_hd.jpg" alt=""></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>连接方式</strong></p>
<p>正规接线方式是：左零右火上地</p>
<h2 id="张教授专栏"><a href="#张教授专栏" class="headerlink" title="张教授专栏"></a>张教授专栏</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/23124736" target="_blank" rel="noopener">浅谈接地1——有关工作接地和保护接地</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23135979" target="_blank" rel="noopener">浅谈接地2——线制与TN接地系统</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23142501" target="_blank" rel="noopener">浅谈接地3——TN系统下单相接地故障范例</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23147201" target="_blank" rel="noopener">浅谈接地4——TT和IT接地系统</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23159113" target="_blank" rel="noopener">浅谈接地5——居家配电的接地问题</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23179524" target="_blank" rel="noopener">浅谈接地6——线制问题</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23212631" target="_blank" rel="noopener">浅谈接地7——与接地系统有关的故障分析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23298018" target="_blank" rel="noopener">浅谈接地8——避雷与接地之1</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23298202" target="_blank" rel="noopener">浅谈接地9——避雷与接地之2</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23381353" target="_blank" rel="noopener">浅谈接地10——电子设备的接地与电控设备的接地异同点</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23498492" target="_blank" rel="noopener">浅谈接地11——对于单相接地故障，断路器如何测量和保护？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23481447" target="_blank" rel="noopener">浅谈接地12——什么叫做等电位联结？</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/30812914" target="_blank" rel="noopener">装修用的空气开关、漏电保护器和配电箱，你都知道怎么买吗？</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC 静态资源缓存]]></title>
      <url>/2017/10/13/spring-mvc-static-resource/</url>
      <content type="html"><![CDATA[<h2 id="ResourceHttpRequestHandler"><a href="#ResourceHttpRequestHandler" class="headerlink" title="ResourceHttpRequestHandler"></a>ResourceHttpRequestHandler</h2><p><code>ResourceHttpRequestHandler</code> 可以使用 <code>ResourceResolvers</code> 和 <code>ResourceTransformers</code> 来优化处理静态资源。处理过程如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Request for Resource</span><br><span class="line">     |</span><br><span class="line">     | HTTP request</span><br><span class="line">     v</span><br><span class="line"> Resolvers chain: FirstResolver, SecondResolver, ThirdResolver</span><br><span class="line"> (each resolver can return the resource or delegate to the next one)</span><br><span class="line">     |</span><br><span class="line">     | Resolved Resource</span><br><span class="line">     v</span><br><span class="line"> Transformers chain: FirstTransformer, SecondTransformer</span><br><span class="line"> (each transformer can transform the resource or just pass it along without modification)</span><br><span class="line">     |</span><br><span class="line">     | Transformed Resource</span><br><span class="line">     v</span><br><span class="line"> HTTP Response with Resource content</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="ResourceHttpRequestHandler-的配置"><a href="#ResourceHttpRequestHandler-的配置" class="headerlink" title="ResourceHttpRequestHandler 的配置"></a><code>ResourceHttpRequestHandler</code> 的配置</h3><p>配置方法一：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">"/resources/**"</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">"/public-resources/"</span>)</span><br><span class="line">            .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS).cachePublic());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置方法二：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/public-resources/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:cache-control</span> <span class="attr">max-age</span>=<span class="string">"3600"</span> <span class="attr">cache-public</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ResourceResolvers"><a href="#ResourceResolvers" class="headerlink" title="ResourceResolvers"></a>ResourceResolvers</h2><p>用于解析资源，将外面请求的 public 路径解析为内部的资源路径。</p>
<h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Resource link in a template source file</span><br><span class="line">|</span><br><span class="line">| Resource path (like “/css/main.css”)</span><br><span class="line">v</span><br><span class="line">Resolvers chain: FirstResolver, SecondResolver, ThirdResolver</span><br><span class="line">(each resolver can modify the resource path or delegate to the next one)</span><br><span class="line">|</span><br><span class="line">| Updated resource path (like “/css/main-0e37f12.css”)</span><br><span class="line">v</span><br><span class="line">Resource link in a rendered template</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/public/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:resource-chain</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resource-cache</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:content-version-strategy</span> <span class="attr">patterns</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:resource-chain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><table>
<thead>
<tr>
<th style="text-align:center">实现类</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">PathResourceResolver</td>
<td style="text-align:left">finds resources under configured locations (classpath, file system…) matching to the request path</td>
</tr>
<tr>
<td style="text-align:center">CachingResourceResolver</td>
<td style="text-align:left">resolves resources from a Cache instance or delegates to the next Resolver in the chain</td>
</tr>
<tr>
<td style="text-align:center">GzipResourceResolver</td>
<td style="text-align:left">finds variations of a resource with a “.gz” extension when HTTP clients support gzip compression</td>
</tr>
<tr>
<td style="text-align:center">VersionResourceResolver</td>
<td style="text-align:left">resolves request paths containing a version string, i.e. version information about the resource being requested. This resolver can be useful to set up HTTP caching strategies by changing resources’ URLs as they are updated.</td>
</tr>
</tbody>
</table>
<h2 id="ResourceTransformers"><a href="#ResourceTransformers" class="headerlink" title="ResourceTransformers"></a>ResourceTransformers</h2><p>用于修改资源内容。</p>
<h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><table>
<thead>
<tr>
<th style="text-align:center">实现类</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CssLinkResourceTransformer</td>
<td style="text-align:left">modifies links in a CSS file to match the public URL paths that should be exposed to clients</td>
</tr>
<tr>
<td style="text-align:center">CachingResourceTransformer</td>
<td style="text-align:left">caches the result of transformations in a Cache or delegates to the next Transformer in the chain</td>
</tr>
<tr>
<td style="text-align:center">AppCacheManifestTransfomer</td>
<td style="text-align:left">helps handling resources within HTML5 AppCache manifests for HTML5 offline applications</td>
</tr>
</tbody>
</table>
<h2 id="静态资源添加-Hash"><a href="#静态资源添加-Hash" class="headerlink" title="静态资源添加 Hash"></a>静态资源添加 Hash</h2><h3 id="1-添加-filter"><a href="#1-添加-filter" class="headerlink" title="1 添加 filter"></a>1 添加 <code>filter</code></h3><p>修改 <code>web.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 静态资源 URL 添加 Hash --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>resourceUrlEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.servlet.resource.ResourceUrlEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ensure that you map it to the DispatcherServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>resourceUrlEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>webServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-添加-resolver"><a href="#2-添加-resolver" class="headerlink" title="2 添加 resolver"></a>2 添加 <code>resolver</code></h3><p>修改 SpringMVC 的配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span> <span class="attr">cache-period</span>=<span class="string">"31536000"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:resource-chain</span> <span class="attr">resource-cache</span>=<span class="string">"true"</span> <span class="attr">auto-registration</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:content-version-strategy</span> <span class="attr">patterns</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mvc:fixed-version-strategy version="1.1.1" patterns="/**"/&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:resource-chain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-修改-view"><a href="#3-修改-view" class="headerlink" title="3 修改 view"></a>3 修改 <code>view</code></h3><p>修改相应的 <code>JSP</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">static</span>/<span class="attr">vendors</span>/<span class="attr">bootstrap</span>/<span class="attr">css</span>/<span class="attr">bootstrap.min.css</span>"/&gt;</span>"&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- javascript --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">static</span>/<span class="attr">vendors</span>/<span class="attr">bootstrap</span>/<span class="attr">js</span>/<span class="attr">bootstrap.min.js</span>"/&gt;</span><span class="undefined">"&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources" target="_blank" rel="noopener">handling static web resources</a></li>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">Spring Web MVC</a></li>
<li><a href="http://www.baeldung.com/cachable-static-assets-with-spring-mvc" target="_blank" rel="noopener">Cachable Static Assets with Spring MVC</a></li>
<li><a href="http://sunitkatkar.blogspot.com/2016/04/preventing-caching-of-static-resources.html" target="_blank" rel="noopener">Preventing caching of static resources in Spring MVC legacy projects using XML config</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新接触 Webpack]]></title>
      <url>/2017/09/25/webpack/</url>
      <content type="html"><![CDATA[<h4 id="Error-Couldn’t-find-preset-“es2015”-relative-to-directory-“-Users-username”"><a href="#Error-Couldn’t-find-preset-“es2015”-relative-to-directory-“-Users-username”" class="headerlink" title="Error: Couldn’t find preset “es2015” relative to directory “/Users/username”"></a>Error: Couldn’t find preset “es2015” relative to directory “/Users/username”</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-cli babel-preset-es2015</span><br></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[指定 IntelliJ 使用的 server.xml]]></title>
      <url>/2017/08/17/intellij-config-server-xml/</url>
      <content type="html"><![CDATA[<h3 id="打开-IntelliJ-的配置"><a href="#打开-IntelliJ-的配置" class="headerlink" title="打开 IntelliJ 的配置"></a>打开 IntelliJ 的配置</h3><p>进入 <code>Startup/Connection</code> 标签页</p>
<p><img src="/images/posts/intellij_config/config-1.png" alt=""></p>
<h3 id="编辑-Startup-Script"><a href="#编辑-Startup-Script" class="headerlink" title="编辑 Startup Script"></a>编辑 <code>Startup Script</code></h3><p>取消选择 <code>Use Default</code>，点击编辑按钮，进入参数编辑窗口</p>
<p><img src="/images/posts/intellij_config/config-2.png" alt=""></p>
<h3 id="添加-Program-Arguments"><a href="#添加-Program-Arguments" class="headerlink" title="添加 Program Arguments"></a>添加 <code>Program Arguments</code></h3><p>在 <code>run</code> 后添加配置文件的地址：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run -config /usr/local/apache-tomcat-8.0.26/conf/server.xml</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="添加-VM-Options"><a href="#添加-VM-Options" class="headerlink" title="添加 VM Options"></a>添加 <code>VM Options</code></h3><p>在 <code>VM Options</code> 后添加配置文件的地址：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-Dcom.sun.management.jmxremote.port=1099</span><br><span class="line">-Dcom.sun.management.jmxremote=</span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=false</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false</span><br><span class="line">-Djava.rmi.server.hostname=127.0.0.1</span><br></pre></td></tr></table></figure>
<p><img src="/images/posts/intellij_config/config-3.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译 NW.js]]></title>
      <url>/2017/06/22/build-nwjs/</url>
      <content type="html"><![CDATA[<p>本文讨论的是 NW.js 13.x 在 Windows 操作系统的编译过程。使用这一版，主要因为其支持 <code>xp</code> 和 <code>npapi</code>。</p>
<p>NW.js 13.x 的文档在 <a href="http://docs.nwjs.io/en/v0.13.0-beta7/For%20Developers/Building%20NW.js/" target="_blank" rel="noopener">v0.13.0-beta7</a>，在<a href="https://github.com/nwjs/nw.js/tree/nw13/docs" target="_blank" rel="noopener">这里</a>下载</p>
<p>NW.js 本身是一个浏览器的应用（Packaged App），它的实现思路是在每一个 <code>Chromium</code> 稳定发布版的基础上，打上补丁，以支持 <code>Node.js</code> 等功能。下面是 NW.js 打补丁的几个仓库：</p>
<table>
<thead>
<tr>
<th style="text-align:left">path</th>
<th style="text-align:left">repo</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">src/content/nw</td>
<td style="text-align:left"><a href="https://github.com/nwjs/nw.js" target="_blank" rel="noopener">https://github.com/nwjs/nw.js</a></td>
</tr>
<tr>
<td style="text-align:left">src/third_party/node-nw</td>
<td style="text-align:left"><a href="https://github.com/nwjs/node" target="_blank" rel="noopener">https://github.com/nwjs/node</a></td>
</tr>
<tr>
<td style="text-align:left">src/v8</td>
<td style="text-align:left"><a href="https://github.com/nwjs/v8" target="_blank" rel="noopener">https://github.com/nwjs/v8</a></td>
</tr>
</tbody>
</table>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>安装 <code>depot_tools</code></li>
<li>安装 <code>DirectX SDK</code></li>
</ul>
<h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><h4 id="1-创建配置文件"><a href="#1-创建配置文件" class="headerlink" title="1. 创建配置文件"></a>1. 创建配置文件</h4><p>创建一个目录，然后执行下面语句，生成配置文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gclient config --name=src https://github.com/nwjs/chromium.src.git@origin/nw13</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>执行完毕后，会在目录里生成 <code>.gclient</code> 文件，编辑该文件，在 <code>custom_deps</code> 部分添加 <strong>不下载</strong> 的库，这是一些测试代码，体积还是挺大的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"custom_deps"</span> : &#123;</span><br><span class="line">    <span class="string">"src/third_party/WebKit/LayoutTests"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome_frame/tools/test/reference_build/chrome"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome_frame/tools/test/reference_build/chrome_win"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome/tools/test/reference_build/chrome"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome/tools/test/reference_build/chrome_linux"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome/tools/test/reference_build/chrome_mac"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome/tools/test/reference_build/chrome_win"</span>: None,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-下载代码"><a href="#2-下载代码" class="headerlink" title="2. 下载代码"></a>2. 下载代码</h4><p>在命令行窗口中执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gclient sync --with_branch_heads</span><br></pre></td></tr></table></figure>
<p><code>with_branch_heads</code> 表示下载全部分支记录，默认只下载最新的分支记录，由于我们想切换到特定版本 <code>nw13</code>， 所以需要下载分支记录。</p>
<h4 id="3-复制依赖库"><a href="#3-复制依赖库" class="headerlink" title="3. 复制依赖库"></a>3. 复制依赖库</h4><p>本版本需要手动复制 <code>DirectX SDK</code>，执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/nwjs/src/third_party/directxsdk/files</span><br><span class="line">cp -r /c/Program\ Files\ \(x86\)/Microsoft\ DirectX\ SDK\ \(June\ 2010\)/* \</span><br><span class="line"><span class="meta">$</span><span class="bash">HOME/nwjs/src/third_party/directxsdk/files/</span></span><br></pre></td></tr></table></figure>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>其实，在执行 <code>gclient sync</code> 的最后，会自动执行 <code>runhooks</code>，生成编译配置文件，保存在 <code>out</code> 目录。</p>
<p>为了配置参数方便，可以将生成项目的命令写成批处理，像下面这样：</p>
<h4 id="生成-release-配置"><a href="#生成-release-配置" class="headerlink" title="生成 release 配置"></a>生成 release 配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">set DEPOT_TOOLS_WIN_TOOLCHAIN=0</span><br><span class="line">set GYP_DEFINES=clang=0 nwjs_sdk=1 disable_nacl=0 buildtype=Official component=static_library</span><br><span class="line">set GYP_MSVS_VERSION=2015</span><br><span class="line">set GYP_GENERATORS=msvs-ninja,ninja</span><br><span class="line"></span><br><span class="line">gclient runhooks --force</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<h4 id="生成-debug-配置"><a href="#生成-debug-配置" class="headerlink" title="生成 debug 配置"></a>生成 debug 配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">set DEPOT_TOOLS_WIN_TOOLCHAIN=0</span><br><span class="line">set GYP_DEFINES=clang=0 nwjs_sdk=true enable_nacl=true component=shared_library</span><br><span class="line">set GYP_MSVS_VERSION=2015</span><br><span class="line">set GYP_GENERATORS=msvs-ninja,ninja</span><br><span class="line"></span><br><span class="line">gclient runhooks --force</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<h4 id="GYP-DEFINES-参数"><a href="#GYP-DEFINES-参数" class="headerlink" title="GYP_DEFINES 参数"></a>GYP_DEFINES 参数</h4><table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">clang</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">nwjs_sdk</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">enable_nacl</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">disable_nacl</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">target_arch</td>
<td style="text-align:left">x64</td>
</tr>
<tr>
<td style="text-align:center">disable_nacl</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">component</td>
<td style="text-align:left">shared_library，static_library</td>
</tr>
</tbody>
</table>
<h4 id="编译-release-版本"><a href="#编译-release-版本" class="headerlink" title="编译 release 版本"></a>编译 release 版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">ninja -C src\out\Release nwjs</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<h4 id="编译-debug-版本"><a href="#编译-debug-版本" class="headerlink" title="编译 debug 版本"></a>编译 debug 版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">ninja -C src\out\Debug nwjs</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-KickNextTick-未找到"><a href="#1-KickNextTick-未找到" class="headerlink" title="1 KickNextTick 未找到"></a>1 <code>KickNextTick</code> 未找到</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src\third_party\node\src\node.cc(4637): error2039: 'KickNextTick': is not </span><br><span class="line">a member of 'node:Environment'</span><br></pre></td></tr></table></figure>
<p><strong>解决办法</strong></p>
<ol>
<li>查看当前的 node 分支情况：<code>git log</code></li>
<li>分支上有关于该 bug 的 commit，更新到该 commit：git reset –hard <sha1></sha1></li>
</ol>
]]></content>
      
        <categories>
            
            <category> nwjs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nwjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置 Fiddler 和 WireShark 解密 HTTPS 流量]]></title>
      <url>/2017/06/11/decrypt-https-tools/</url>
      <content type="html"><![CDATA[<p>首先，推荐一篇非常好的文章：<a href="https://imququ.com/post/how-to-decrypt-https.html" target="_blank" rel="noopener">三种解密 HTTPS 流量的方法介绍</a>。下面记录一下这次使用和配置的步骤：</p>
<h2 id="配置-Fiddler"><a href="#配置-Fiddler" class="headerlink" title="配置 Fiddler"></a>配置 Fiddler</h2><h4 id="1-打开-HTTPS-设置"><a href="#1-打开-HTTPS-设置" class="headerlink" title="1. 打开 HTTPS 设置"></a>1. 打开 HTTPS 设置</h4><p>打开菜单： <code>Tools</code> - <code>Telerik Fiddler Options...</code> - <code>Https</code></p>
<p><img src="/images/posts/decrypt_https/fiddler_https.png" alt=""></p>
<h4 id="2-导入根证书"><a href="#2-导入根证书" class="headerlink" title="2. 导入根证书"></a>2. 导入根证书</h4><p>在 <code>Https</code> 设置标签页，打开右上角菜单 <code>Actions</code> - <code>Trust Root Certificate</code></p>
<p><img src="/images/posts/decrypt_https/fiddler_ca.png" alt=""></p>
<h4 id="3-同意系统警告"><a href="#3-同意系统警告" class="headerlink" title="3. 同意系统警告"></a>3. 同意系统警告</h4><p><img src="/images/posts/decrypt_https/fiddler_ca2.png" alt=""></p>
<a id="more"></a>
<h2 id="配置-WireShark-一：配合程序日志"><a href="#配置-WireShark-一：配合程序日志" class="headerlink" title="配置 WireShark 一：配合程序日志"></a>配置 WireShark 一：配合程序日志</h2><h4 id="1-设置环境变量"><a href="#1-设置环境变量" class="headerlink" title="1. 设置环境变量"></a>1. 设置环境变量</h4><p>添加系统环境变量 <code>SSLKEYLOGFILE</code></p>
<p><img src="/images/posts/decrypt_https/wireshark_log.jpg" alt=""></p>
<h4 id="2-配置-WireShark"><a href="#2-配置-WireShark" class="headerlink" title="2. 配置 WireShark"></a>2. 配置 WireShark</h4><p>打开菜单 <code>Edit</code> - <code>Preference...</code> - <code>Protocols</code> - <code>SSL</code></p>
<p><img src="/images/posts/decrypt_https/wireshark_ssl.jpg" alt=""></p>
<p>在 <code>(Pre)-Master-Secret log filename</code> 一栏，配置上一步产生的日志文件</p>
<h2 id="配置-WireShark-二：配合网站私钥"><a href="#配置-WireShark-二：配合网站私钥" class="headerlink" title="配置 WireShark 二：配合网站私钥"></a>配置 WireShark 二：配合网站私钥</h2><p>私钥的方式需要配合使用网站的证书私钥，这对通常是做不到的，所以仅能用于监测自己搭建的 TLS 网站。</p>
<h4 id="1-配置-WireShark"><a href="#1-配置-WireShark" class="headerlink" title="1. 配置 WireShark"></a>1. 配置 WireShark</h4><p>打开菜单 <code>Edit</code> - <code>Preference...</code> - <code>Protocols</code> - <code>SSL</code></p>
<p><img src="/images/posts/decrypt_https/wireshark_ssl.jpg" alt=""></p>
<h4 id="2-配置域名和私钥"><a href="#2-配置域名和私钥" class="headerlink" title="2. 配置域名和私钥"></a>2. 配置域名和私钥</h4><p>打开 <code>RSA keys list</code> 配置窗口</p>
<blockquote>
<p>为什么是 <code>RSA keys</code> 配置呢？<br>私钥方式只能用于解析采用 <code>RSA</code> 的 TLS 连接。</p>
</blockquote>
<p><img src="/images/posts/decrypt_https/wireshark_key.jpg" alt=""></p>
<ul>
<li>IP Address： 连接的域名或 IP 地址</li>
<li>Port： 连接的端口号</li>
<li>Protocol： 连接的协议，TLS 要写成 http</li>
<li>Key File： 服务器证书的私钥，要求 PEM 格式</li>
<li>Password： 私钥密码</li>
</ul>
]]></content>
      
        <categories>
            
            <category> OpenSSL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TLS 协议]]></title>
      <url>/2017/06/10/tls-1.2/</url>
      <content type="html"><![CDATA[<p>首先，这是 IETF 协会文档 <a href="https://tools.ietf.org/html/rfc5246" target="_blank" rel="noopener">Request for Comments (RFC) 5246</a></p>
<h3 id="Alert-Messages"><a href="#Alert-Messages" class="headerlink" title="Alert Messages"></a><a href="https://tools.ietf.org/html/rfc5246#appendix-A.3" target="_blank" rel="noopener">Alert Messages</a></h3><p>在 TLS 协商握手阶段，遇到服务器返回的 Alert 消息时，能通过下表查找出对应的原因。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Alert Code</th>
<th style="text-align:center">Alert Message</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">close_notify</td>
<td style="text-align:left">Notifies the recipient that the sender will not send any more messages on this connection.</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">unexpected_message</td>
<td style="text-align:left">Received an inappropriate message This alert should never be observed in communication between proper implementations. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">bad_record_mac</td>
<td style="text-align:left">Received a record with an incorrect MAC. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">decryption_failed</td>
<td style="text-align:left">Decryption of a TLSCiphertext record is decrypted in an invalid way: either it was not an even multiple of the block length or its padding values, when checked, were not correct. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">record_overflow</td>
<td style="text-align:left">Received a TLSCiphertext record which had a length more than 2^14+2048 bytes, or a record decrypted to a TLSCompressed record with more than 2^14+1024 bytes. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td style="text-align:center">decompression_failure</td>
<td style="text-align:left">Received improper input, such as data that would expand to excessive length, from the decompression function. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">40</td>
<td style="text-align:center">handshake_failure</td>
<td style="text-align:left">Indicates that the sender was unable to negotiate an acceptable set of security parameters given the options available. This is a fatal error.</td>
</tr>
<tr>
<td style="text-align:center">42</td>
<td style="text-align:center">bad_certificate</td>
<td style="text-align:left">There is a problem with the certificate, for example, a certificate is corrupt, or a certificate contains signatures that cannot be verified.</td>
</tr>
<tr>
<td style="text-align:center">43</td>
<td style="text-align:center">unsupported_certificate</td>
<td style="text-align:left">Received an unsupported certificate type.</td>
</tr>
<tr>
<td style="text-align:center">44</td>
<td style="text-align:center">certificate_revoked</td>
<td style="text-align:left">Received a certificate that was revoked by its signer.</td>
</tr>
<tr>
<td style="text-align:center">45</td>
<td style="text-align:center">certificate_expired</td>
<td style="text-align:left">Received a certificate has expired or is not currently valid.</td>
</tr>
<tr>
<td style="text-align:center">46</td>
<td style="text-align:center">certificate_unknown</td>
<td style="text-align:left">An unspecified issue took place while processing the certificate that made it unacceptable.</td>
</tr>
<tr>
<td style="text-align:center">47</td>
<td style="text-align:center">illegal_parameter</td>
<td style="text-align:left">Violated security parameters, such as a field in the handshake was out of range or inconsistent with other fields. This is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">48</td>
<td style="text-align:center">unknown_ca</td>
<td style="text-align:left">Received a valid certificate chain or partial chain, but the certificate was not accepted because the CA certificate could not be located or could not be matched with a known, trusted CA. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">49</td>
<td style="text-align:center">access_denied</td>
<td style="text-align:left">Received a valid certificate, but when access control was applied, the sender did not proceed with negotiation. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">50</td>
<td style="text-align:center">decode_error</td>
<td style="text-align:left">A message could not be decoded because some field was out of the specified range or the length of the message was incorrect. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">51</td>
<td style="text-align:center">decrypt_error</td>
<td style="text-align:left">Failed handshake cryptographic operation, including being unable to correctly verify a signature, decrypt a key exchange, or validate a finished message.</td>
</tr>
<tr>
<td style="text-align:center">60</td>
<td style="text-align:center">export_restriction</td>
<td style="text-align:left">Detected a negotiation that was not in compliance with export restrictions; for example, attempting to transfer a 1024 bit ephemeral RSA key for the RSA_EXPORT handshake method. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">70</td>
<td style="text-align:center">protocol_version</td>
<td style="text-align:left">The protocol version the client attempted to negotiate is recognized, but not supported. For example, old protocol versions might be avoided for security reasons. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">71</td>
<td style="text-align:center">insufficient_security</td>
<td style="text-align:left">Failed negotiation specifically because the server requires ciphers more secure than those supported by the client. Returned instead of handshake_failure. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">80</td>
<td style="text-align:center">internal_error</td>
<td style="text-align:left">An internal error unrelated to the peer or the correctness of the protocol makes it impossible to continue, such as a memory allocation failure. The error is not related to protocol. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">90</td>
<td style="text-align:center">user_cancelled</td>
<td style="text-align:left">Cancelled handshake for a reason that is unrelated to a protocol failure. If the user cancels an operation after the handshake is complete, just closing the connection by sending a close_notify is more appropriate. This alert should be followed by a close_notify. This message is generally a warning.</td>
</tr>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:center">no_renegotiation</td>
<td style="text-align:left">Sent by the client in response to a hello request or sent by the server in response to a client hello after initial handshaking. Either of these would normally lead to renegotiation; when that is not appropriate, the recipient should respond with this alert; at that point, the original requester can decide whether to proceed with the connection. One case where this would be appropriate would be where a server has spawned a process to satisfy a request; the process might receive security parameters (key length, authentication, and so on) at start-up and it might be difficult to communicate changes to these parameters after that point. This message is always a warning.</td>
</tr>
<tr>
<td style="text-align:center">255</td>
<td style="text-align:center">unsupported_extension</td>
</tr>
</tbody>
</table>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> OpenSSL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中间人劫持代理]]></title>
      <url>/2017/06/10/mitm-proxy/</url>
      <content type="html"><![CDATA[<h2 id="中间人劫持代理"><a href="#中间人劫持代理" class="headerlink" title="中间人劫持代理"></a>中间人劫持代理</h2><p><img src="/images/posts/mitm_proxy/how-mitmproxy-works-explicit-https.png" alt=""></p>
<p>注：图片来源于 mitmproxy</p>
<h4 id="本代理基于-TCP，是一个不关心协议的代理？"><a href="#本代理基于-TCP，是一个不关心协议的代理？" class="headerlink" title="本代理基于 TCP，是一个不关心协议的代理？"></a>本代理基于 TCP，是一个不关心协议的代理？</h4><p>是的</p>
<h4 id="HTTP-代理-VS-Socks-代理"><a href="#HTTP-代理-VS-Socks-代理" class="headerlink" title="HTTP 代理 VS Socks 代理"></a>HTTP 代理 VS Socks 代理</h4><h2 id="问题与挑战"><a href="#问题与挑战" class="headerlink" title="问题与挑战"></a>问题与挑战</h2><h3 id="获取远端主机名（Host）"><a href="#获取远端主机名（Host）" class="headerlink" title="获取远端主机名（Host）"></a>获取远端主机名（Host）</h3><p>当应用设置了代理后，在 TLS 协商前，应用首先会发一条 CONNECT 请求，期待通过代理和远端服务器建立 TLS 隧道（tunnel）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONNECT 10.1.1.1:443 HTTP/1.1</span><br></pre></td></tr></table></figure>
<p>作为中间人代理，并不帮助建立隧道，而是需要解析 CONNECT 请求，并从中获得远端服务器主机名。同时返回给被代理程序隧道建立成功的回复：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 根据请求指定版本号</span><br><span class="line">HTTP/1.0 200 Connection established\r\n\r\n</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Subject-Alternative-Name"><a href="#Subject-Alternative-Name" class="headerlink" title="Subject Alternative Name"></a>Subject Alternative Name</h3><p>这是服务器证书包含的一个字段，用于标识证书签发的域名。</p>
<p>通常服务器的域名保存在 <code>Common name</code> 字段，只保存一个域名，而 <code>Subject Alternative Name</code> 可保存多个域名，并支持通配符。也就是，有的时候访问的服务器主机并不和 <code>Common name</code> 匹配，但匹配 <code>SAN</code>，这样的证书也是合法的。</p>
<h3 id="服务器名称指示（SNI）"><a href="#服务器名称指示（SNI）" class="headerlink" title="服务器名称指示（SNI）"></a>服务器名称指示（SNI）</h3><p>这是识别同一 IP 部署的多个带证书虚拟主机（Virtual Host）的技术。</p>
<p>基于名称的虚拟主机允许多个域名由同一IP地址上的单个服务器（通常为Web服务器）托管。使用 HTTP 时，其必须包含的协议头 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5%E5%88%97%E8%A1%A8" target="_blank" rel="noopener"><code>Host</code></a> 字段标识了欲访问的域名，据此分辨出虚拟主机。但是，由于 HTTPS 握手发生在服务器看到任何 HTTP 头之前，这时并不知道要访问哪个虚拟主机，也就不能把对应的服务器证书发给客户端，以完成 TLS 协商。</p>
<p>SNI 通过让客户端发送虚拟域名的名称作为TLS协商的一部分来解决此问题。</p>
<p>OpenSSL 客户端实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set host name before initiating the SSL connection</span></span><br><span class="line">SSL_set_tlsext_host_name(ssl, hostName)</span><br></pre></td></tr></table></figure>
<p><a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8D%E7%A7%B0%E6%8C%87%E7%A4%BA" target="_blank" rel="noopener">扩展阅读</a></p>
<h3 id="Certificate-Pinning"><a href="#Certificate-Pinning" class="headerlink" title="Certificate Pinning"></a>Certificate Pinning</h3><p>简单地说，就是某些程序（比如浏览器）只相信某些根证书签发的服务器证书。</p>
<p>通常证书通过证书链验证合法性，<code>MyCert</code> 由 <code>IntermediateCert</code> 签发，它又由 <code>RootCert</code> 签发，<code>RootCert</code> 已经内置在操作系统的可信任根证书中。 这样，<code>MyCert</code> 是合法的。常见内置的根证书有：Verisign, Digicert, Thawte等。</p>
<p>但是，Certificate pinning 的作用是，即使通过了上面的验证，如果不是某个指定 RootCert 签发的证书，也认为其不合法。这在一定程序上避免中间人攻击，但没有真的解决。</p>
<p>下面是一些使用 Certificate pinning 的应用：</p>
<ul>
<li>微软的自动更新</li>
<li>苹果 App Store</li>
<li>Twitter app</li>
</ul>
<p><a href="https://security.stackexchange.com/questions/29988/what-is-certificate-pinning/" target="_blank" rel="noopener">扩展阅读</a></p>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><h3 id="通过-netsh-winhttp-命令"><a href="#通过-netsh-winhttp-命令" class="headerlink" title="通过 netsh winhttp 命令"></a>通过 <code>netsh winhttp</code> 命令</h3><p><a href="https://technet.microsoft.com/pt-br/library/cc731131(v=ws.10).aspx#BKMK_5" target="_blank" rel="noopener">文档</a></p>
<p>设置代理：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set proxy 127.0.0.1:8080 "&lt;local&gt;"</span><br></pre></td></tr></table></figure>
<h3 id="通过-WinHTTP-接口设置"><a href="#通过-WinHTTP-接口设置" class="headerlink" title="通过 WinHTTP 接口设置"></a>通过 <code>WinHTTP</code> 接口设置</h3><p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa384069(v=vs.85).aspx" target="_blank" rel="noopener">文档</a></p>
<h3 id="WinHTTP-vs-WinINet"><a href="#WinHTTP-vs-WinINet" class="headerlink" title="WinHTTP vs. WinINet"></a>WinHTTP vs. WinINet</h3><p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/hh227297(v=vs.85).aspx" target="_blank" rel="noopener">文档</a></p>
<p>选择 WinINet 的原因：</p>
<ul>
<li>支持 cookies</li>
<li>Credential Cache (和SSL证书相关？)</li>
<li>Credential Prompting (和SSL证书相关？)</li>
</ul>
<h3 id="INTERNET-PER-CONN-OPTION"><a href="#INTERNET-PER-CONN-OPTION" class="headerlink" title="INTERNET_PER_CONN_OPTION"></a>INTERNET_PER_CONN_OPTION</h3><p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa385145(v=vs.85).aspx" target="_blank" rel="noopener">INTERNET_PER_CONN_OPTION</a></p>
<h3 id="INTERNET-PROXY-INFO"><a href="#INTERNET-PROXY-INFO" class="headerlink" title="INTERNET_PROXY_INFO"></a>INTERNET_PROXY_INFO</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INTERNET_PROXY_INFO proxy;</span><br><span class="line">proxy.dwAccessType = INTERNET_OPEN_TYPE_PROXY;</span><br><span class="line"><span class="comment">// 根据协议来设置代理，比如 FTP, HTTPS 等，使用下面的字符串</span></span><br><span class="line"><span class="comment">// ftp=http://&lt;ProxyServerName&gt;:80; https=https://&lt;ProxyServerName&gt;:80)</span></span><br><span class="line">proxy.lpszProxy = (LPCTSTR)<span class="string">"127.0.0.1:8080"</span>;  <span class="comment">// unicode building, must cast to LPCTSTR</span></span><br><span class="line">proxy.lpszProxyBypass = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<h3 id="设置自动代理"><a href="#设置自动代理" class="headerlink" title="设置自动代理"></a>设置自动代理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wchar_t</span> wzsPath[MAX_PATH];</span><br><span class="line"><span class="keyword">wchar_t</span> wszProxyUrl[INTERNET_MAX_URL_LENGTH];</span><br><span class="line">SHGetFolderPath ( <span class="literal">NULL</span>, CSIDL_APPDATA | CSIDL_FLAG_CREATE, <span class="literal">NULL</span>, <span class="number">0</span>, wszPath );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct Pac file path. – %appdata%\MyAppFolder\redirect.pac</span></span><br><span class="line">StringCbPrintf (wszProxyUrl, <span class="keyword">sizeof</span>(wszProxyUrl), </span><br><span class="line">        <span class="string">L"file://%s\\MyAppFolder\\redirect.pac"</span>, wszPath );</span><br><span class="line"></span><br><span class="line">INTERNET_PER_CONN_OPTION_LIST *optionList = <span class="number">0</span>;</span><br><span class="line">optionList-&gt;pOptions[INDEX].Value.pszValue = wszPath;</span><br><span class="line"></span><br><span class="line">InternetSetOption ( <span class="literal">NULL</span>, INTERNET_OPTION_PER_CONNECTION_OPTION,</span><br><span class="line">        optionList, <span class="keyword">sizeof</span>(INTERNET_PER_CONN_OPTION_LIST) );</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">INTERNET_PER_CONN_OPTION_LIST    List;</span><br><span class="line">INTERNET_PER_CONN_OPTION         Option[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>                    nSize =</span><br><span class="line"><span class="keyword">sizeof</span>(INTERNET_PER_CONN_OPTION_LIST);</span><br><span class="line"></span><br><span class="line">Option[<span class="number">0</span>].dwOption = INTERNET_PER_CONN_AUTOCONFIG_URL;</span><br><span class="line">Option[<span class="number">0</span>].Value.pszValue = <span class="string">"http://myserver/proxy.pacl"</span>;</span><br><span class="line">Option[<span class="number">1</span>].dwOption = INTERNET_PER_CONN_FLAGS;</span><br><span class="line">Option[<span class="number">1</span>].Value.dwValue = PROXY_TYPE_AUTO_PROXY_URL;</span><br><span class="line"></span><br><span class="line">List.dwSize = <span class="keyword">sizeof</span>(INTERNET_PER_CONN_OPTION_LIST);</span><br><span class="line">List.pszConnection = <span class="literal">NULL</span>;</span><br><span class="line">List.dwOptionCount = <span class="number">2</span>;</span><br><span class="line">List.dwOptionError = <span class="number">0</span>;</span><br><span class="line">List.pOptions = Option;</span><br><span class="line"></span><br><span class="line">hMyHandle =  InternetOpen(<span class="string">""</span>, INTERNET_OPEN_TYPE_DIRECT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!InternetSetOption(hMyHandle, INTERNET_OPTION_PER_CONNECTION_OPTION,</span><br><span class="line">&amp;List, nSize))</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"InternetQueryOption failed! (%d)\n"</span>, GetLastError());</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://docs.mitmproxy.org/en/stable/howmitmproxy.html" target="_blank" rel="noopener">mitmproxy</a></li>
<li><a href="http://www.5icpp.com/?p=139" target="_blank" rel="noopener">如何给CHtmlView添加代理——MFC</a></li>
<li><a href="http://www.lai18.com/content/2206252.html" target="_blank" rel="noopener">为网络程序添加代理设置</a>：带 VC6 示例程序</li>
<li><a href="http://www.cnblogs.com/duanshuiliu/archive/2013/03/18/2965405.html" target="_blank" rel="noopener">查询代理和设置代理</a></li>
<li><a href="http://blog.csdn.net/ba_jie/article/details/43564385" target="_blank" rel="noopener">写C++程序绕过IE的限制：“某些设置由系统管理员进行管理”</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> OpenSSL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
            <tag> proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenSSL 常用方法收集]]></title>
      <url>/2017/06/08/openssl-commands/</url>
      <content type="html"><![CDATA[<p><a href="http://onthink.com/post/openssl-resources.html">下载 OpenSSL</a></p>
<p>进入 OpenSSL 命令行模式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL</span><br></pre></td></tr></table></figure>
<p>;) windows 系统中会提示：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING: can\'t open config file: /usr/local/ssl/openssl.cnf</span><br><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure>
<p>退出OpenSSL程序</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> <span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure>
<h3 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> genrsa -out rsa_private_key.pem   1024</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> rsa -<span class="keyword">in</span> rsa_private_key.pem -pubout -out rsa_public_key.pem</span></span><br></pre></td></tr></table></figure>
<h3 id="将公私钥写入同一文件"><a href="#将公私钥写入同一文件" class="headerlink" title="将公私钥写入同一文件"></a>将公私钥写入同一文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat cert.key cert.crt &gt; cert.pem</span><br></pre></td></tr></table></figure>
<h3 id="转换成-PKCS8-格式"><a href="#转换成-PKCS8-格式" class="headerlink" title="转换成 PKCS8 格式"></a>转换成 PKCS8 格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> rsa_private_key.pem -outform PEM -nocrypt -out rsa_private_key_pkcs8.pem</span></span><br></pre></td></tr></table></figure>
<p>其它一些格式转换，参考<a href="http://onthink.com/post/about-cert-type.html">这里</a></p>
<h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><ol>
<li><a href="https://www.cnblogs.com/yelao/p/9486882.html" target="_blank" rel="noopener">Nginx https 双向认证</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> OpenSSL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 常用方法收集]]></title>
      <url>/2017/06/06/cpp-library/</url>
      <content type="html"><![CDATA[<h2 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h2><h3 id="wstring-和-string-互转"><a href="#wstring-和-string-互转" class="headerlink" title="wstring 和 string 互转"></a>wstring 和 string 互转</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function">wstring <span class="title">s2ws</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> convert_typeX = <span class="built_in">std</span>::codecvt_utf8&lt;<span class="keyword">wchar_t</span>&gt;;</span><br><span class="line">    <span class="built_in">std</span>::wstring_convert&lt;convert_typeX, <span class="keyword">wchar_t</span>&gt; converterX;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> converterX.from_bytes(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ws2s</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::wstring&amp; wstr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> convert_typeX = <span class="built_in">std</span>::codecvt_utf8&lt;<span class="keyword">wchar_t</span>&gt;;</span><br><span class="line">    <span class="built_in">std</span>::wstring_convert&lt;convert_typeX, <span class="keyword">wchar_t</span>&gt; converterX;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> converterX.to_bytes(wstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/4804298/how-to-convert-wstring-into-string" target="_blank" rel="noopener">进一步阅读</a></p>
<a id="more"></a>
<h2 id="Windows-相关"><a href="#Windows-相关" class="headerlink" title="Windows 相关"></a>Windows 相关</h2><h3 id="获取当前进程目录"><a href="#获取当前进程目录" class="headerlink" title="获取当前进程目录"></a>获取当前进程目录</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function">wstring <span class="title">getExePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">wchar_t</span> buffer[MAX_PATH];</span><br><span class="line">    GetModuleFileName(<span class="literal">NULL</span>, buffer, MAX_PATH);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::size_type pos = <span class="built_in">std</span>::wstring(buffer).find_last_of(<span class="string">L"\\/"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::wstring(buffer).substr(<span class="number">0</span>, pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenSSL 学习资源]]></title>
      <url>/2017/06/05/openssl-resources/</url>
      <content type="html"><![CDATA[<h3 id="OpenSSL-可执行文件下载"><a href="#OpenSSL-可执行文件下载" class="headerlink" title="OpenSSL 可执行文件下载"></a>OpenSSL 可执行文件下载</h3><ul>
<li><a href="https://indy.fulgan.com/SSL/" target="_blank" rel="noopener">OpenSSL 下载</a></li>
</ul>
<h3 id="最好的学习文章"><a href="#最好的学习文章" class="headerlink" title="最好的学习文章"></a>最好的学习文章</h3><ul>
<li><p><a href="http://www.cnblogs.com/LittleHann/p/3741907.html" target="_blank" rel="noopener">OPENSSL编程入门学习</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/LittleHann/p/3738141.html" target="_blank" rel="noopener">openSSL命令、PKI、CA、SSL证书原理</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/LittleHann/p/3735602.html" target="_blank" rel="noopener">中间人攻击(MITM)姿势总结</a></p>
</li>
</ul>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows 常用命令]]></title>
      <url>/2017/06/02/windows-commands/</url>
      <content type="html"><![CDATA[<h2 id="一、网络"><a href="#一、网络" class="headerlink" title="一、网络"></a>一、网络</h2><h3 id="查看谁在侦听端口"><a href="#查看谁在侦听端口" class="headerlink" title="查看谁在侦听端口"></a>查看谁在侦听端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -np &lt;protocol&gt; | find "port #"</span><br><span class="line"></span><br><span class="line">netstat -np TCP | find "80"</span><br></pre></td></tr></table></figure>
<h3 id="打开-Internet-网络设置"><a href="#打开-Internet-网络设置" class="headerlink" title="打开 Internet 网络设置"></a>打开 Internet 网络设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inetcpl.cpl</span><br></pre></td></tr></table></figure>
<p>其它的控制命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">appwiz.cpl</span><br><span class="line">bthprops.cpl</span><br><span class="line">desk.cpl</span><br><span class="line">Firewall.cpl</span><br><span class="line">hdwwiz.cpl</span><br><span class="line">igfxCPL.cpl</span><br><span class="line">inetcpl.cpl</span><br><span class="line">intl.cpl</span><br><span class="line">irprops.cpl</span><br><span class="line">joy.cpl</span><br><span class="line">main.cpl</span><br><span class="line">mmsys.cpl</span><br><span class="line">ncpa.cpl</span><br><span class="line">powercfg.cpl</span><br><span class="line">sysdm.cpl</span><br><span class="line">TabletPC.cpl</span><br><span class="line">telephon.cpl</span><br><span class="line">timedate.cpl</span><br><span class="line">wscui.cpl</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、文件系统"><a href="#二、文件系统" class="headerlink" title="二、文件系统"></a>二、文件系统</h2><h3 id="以-Ascii-树列出文件和目录"><a href="#以-Ascii-树列出文件和目录" class="headerlink" title="以 Ascii 树列出文件和目录"></a>以 Ascii 树列出文件和目录</h3><p>打开 <code>PowerShell</code>，执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree &lt;文件目录&gt; /F /A</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio 提高效率方法和工具]]></title>
      <url>/2017/05/25/visual-studio-tips/</url>
      <content type="html"><![CDATA[<h3 id="为多行注释开头添加空格"><a href="#为多行注释开头添加空格" class="headerlink" title="为多行注释开头添加空格"></a>为多行注释开头添加空格</h3><p>一般情况下可以通过快捷键 <code>CTRL+K+C</code> 来添加注释：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A</span></span><br><span class="line"><span class="comment">//B</span></span><br><span class="line"><span class="comment">//C</span></span><br></pre></td></tr></table></figure>
<p>但是，我更习惯在每行内容的开头添加一个空格：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A</span></span><br><span class="line"><span class="comment">// B</span></span><br><span class="line"><span class="comment">// C</span></span><br></pre></td></tr></table></figure>
<p>这是一个实现的方法：<a href="https://stackoverflow.com/questions/14027598/how-to-comment-multiple-lines-with-space-or-indent" target="_blank" rel="noopener">How to comment multiple lines with space or indent</a></p>
]]></content>
      
        <categories>
            
            <category> vs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> vs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译 CEF]]></title>
      <url>/2017/04/26/cef-tips/</url>
      <content type="html"><![CDATA[<h2 id="项目与分支"><a href="#项目与分支" class="headerlink" title="项目与分支"></a>项目与分支</h2><p><strong>内容来自官方文档<a href="https://bitbucket.org/chromiumembedded/cef/wiki/BranchesAndBuilding.md" target="_blank" rel="noopener">BranchesAndBuilding</a></strong></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>CEF 是 Chromium 项目的一个扩展，跟踪其分支。可通过自动工具或手动编译。</p>
<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>CEF 的 master 分支跟踪 Chromium 的 master 分支，不建议用其产品化。</p>
<p>下载开发版 CEF</p>
<p>CEF3 - <a href="https://bitbucket.org/chromiumembedded/cef/src?at=master" target="_blank" rel="noopener">https://bitbucket.org/chromiumembedded/cef/src?at=master</a></p>
<p>CEF1 已不再支持。</p>
<h3 id="发布（Release）分支"><a href="#发布（Release）分支" class="headerlink" title="发布（Release）分支"></a>发布（Release）分支</h3><p>CEF 的发布分支跟踪 Chromium 的 release 里程碑（milesone）MXX 分支，推荐使用其产品化：</p>
<ul>
<li>基于 Chromium release </li>
<li>更好的测试</li>
<li>CEF API 维护不变，仅做 bug 和安全修复</li>
<li>CEF 必要时可包含 Blink 补丁</li>
<li>不受 CEF master 分支推进影响</li>
</ul>
<p>CEF 版本 <strong> X.YYYY.A.gHHHHHHH</strong>：</p>
<ul>
<li>X：主版本号（当前为 3）</li>
<li>YYYY：Chromium 分支</li>
<li>A：自增值，反映当前分支的版本值。可表示基于同一分支，各版本的顺序，用于修复 bug 等的版本提升</li>
<li>gHHHHHHH：7位字符反映 git 提交哈希，便于定位 git 历史</li>
</ul>
<p>版本的详细信息保存在 <code>include/cef_version.h</code> 头文件中，也可以通过生成的应用访问 <code>about:version</code> 查看。</p>
<p>CEF release 分支下载规则，YYYY 对应4位 Chromium release 分支号：</p>
<ul>
<li><a href="https://bitbucket.org/chromiumembedded/cef/src/YYYY?at=YYYY" target="_blank" rel="noopener">https://bitbucket.org/chromiumembedded/cef/src/YYYY?at=YYYY</a></li>
</ul>
<p>比如： <a href="https://bitbucket.org/chromiumembedded/cef/src/2623?at=2623" target="_blank" rel="noopener">https://bitbucket.org/chromiumembedded/cef/src/2623?at=2623</a></p>
<h2 id="编译-CEF"><a href="#编译-CEF" class="headerlink" title="编译 CEF"></a>编译 CEF</h2><h3 id="下载文档"><a href="#下载文档" class="headerlink" title="下载文档"></a>下载文档</h3><p>首先要下载文档仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://bitbucket.org/chromiumembedded/cef.git/wiki</span><br></pre></td></tr></table></figure>
<p>然后将文档检出到需要编译的版本，比如 2623</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 0625af2618b7f15660146acd769142144e5a48c9</span><br></pre></td></tr></table></figure>
<h3 id="生成项目文件"><a href="#生成项目文件" class="headerlink" title="生成项目文件"></a>生成项目文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src\cef </span><br><span class="line">create.bat</span><br></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src </span><br><span class="line">ninja -C out\Release</span><br></pre></td></tr></table></figure>
<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>编译成功之后，运行 <code>out\Release\cefclient.exe</code></p>
<h3 id="打包导出"><a href="#打包导出" class="headerlink" title="打包导出"></a>打包导出</h3><p>执行打包脚本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src\cef\tools</span><br><span class="line">make_distrib.bat --ninja-build</span><br></pre></td></tr></table></figure>
<p>打包成功后，在 <code>src/cef/binary_distrib</code> 目录会生成二进制的包</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="NPAPI-启用情况"><a href="#NPAPI-启用情况" class="headerlink" title="NPAPI 启用情况"></a>NPAPI 启用情况</h3><p>查看当前版本 NPAPI 是否已经启用，可以打开 <code>Dev Tools</code> -&gt; <code>Console</code> 执行：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.plugins</span><br></pre></td></tr></table></figure>
<p>检查每个插件的情况，一般 NPAPI 插件会以 np 开头。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul>
<li><a href="https://bitbucket.org/chromiumembedded/cef/downloads/?tab=branches" target="_blank" rel="noopener">CEF branches</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> cef </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> cef </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome 扩展之： Content Script]]></title>
      <url>/2017/04/25/extension-content-script/</url>
      <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><h2 id="1-1-使用场景"><a href="#1-1-使用场景" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h2><p><code>Content Script</code> 是一个很神奇的东西。它可以读取和修改页面内容。比如一些应用场景</p>
<ul>
<li>过滤广告：将页面中的广告区块过滤掉，只显示主要内容</li>
<li>翻译页面中的外语</li>
<li>分享页面内容到社交平台</li>
</ul>
<h3 id="1-2-限制"><a href="#1-2-限制" class="headerlink" title="1.2 限制"></a>1.2 限制</h3><ul>
<li>Use chrome.* APIs, with the exception of:<ul>
<li>extension ( getURL , inIncognitoContext , lastError , onRequest , sendRequest )</li>
<li>i18n</li>
<li>runtime ( connect , getManifest , getURL , id , onConnect , onMessage , sendMessage )</li>
<li>storage</li>
</ul>
</li>
<li>不能使用扩展页面中的变量和方法</li>
<li>不能使用定义在其它扩展的 Content Script 中的变量和方法</li>
</ul>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><h3 id="2-1-Manifest"><a href="#2-1-Manifest" class="headerlink" title="2.1 Manifest"></a>2.1 Manifest</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"My extension"</span>,</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"content_scripts"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"matches"</span>: [<span class="string">"http://www.google.com/*"</span>],</span><br><span class="line">      <span class="string">"css"</span>: [<span class="string">"mystyles.css"</span>],</span><br><span class="line">      <span class="string">"js"</span>: [<span class="string">"jquery.js"</span>, <span class="string">"myscript.js"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"tabs"</span>, <span class="string">"http://www.google.com/*"</span></span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-注入"><a href="#2-2-注入" class="headerlink" title="2.2 注入"></a>2.2 注入</h3><h4 id="2-2-1-与-browserAction-配合"><a href="#2-2-1-与-browserAction-配合" class="headerlink" title="2.2.1 与 browserAction 配合"></a>2.2.1 与 <code>browserAction</code> 配合</h4><p>注入并执行一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome.browserAction.onClicked.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">tab</span>) </span>&#123;</span><br><span class="line">  chrome.tabs.executeScript(&#123;</span><br><span class="line">    code: <span class="string">'document.body.style.backgroundColor="red"'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>执行上面的代码先获取权限：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"permissions"</span>: [</span><br><span class="line">  <span class="string">"activeTab"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>或直接执行一个文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.tabs.executeScript(<span class="literal">null</span>, &#123;<span class="attr">file</span>: <span class="string">"content_script.js"</span>&#125;);</span><br></pre></td></tr></table></figure>
<p><code>blocking</code> 会将回调函数设置为同步处理，请求会等待回调完成。使用该参数需要在 <code>permission</code> 中添加 <code>webRequestBlocking</code> 权限。</p>
<h3 id="2-2-2-获取资源文件-URL"><a href="#2-2-2-获取资源文件-URL" class="headerlink" title="2.2.2 获取资源文件 URL"></a>2.2.2 获取资源文件 URL</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Code <span class="keyword">for</span> displaying &lt;extensionDir&gt;<span class="regexp">/images/myim</span>age.png:</span><br><span class="line"><span class="keyword">var</span> imgURL = chrome.extension.getURL(<span class="string">"images/myimage.png"</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"someImage"</span>).src = imgURL;</span><br></pre></td></tr></table></figure>
<h2 id="3-要点"><a href="#3-要点" class="headerlink" title="3 要点"></a>3 要点</h2><h3 id="3-1-ContentScript-在独立环境运行"><a href="#3-1-ContentScript-在独立环境运行" class="headerlink" title="3.1 ContentScript 在独立环境运行"></a>3.1 ContentScript 在独立环境运行</h3><h3 id="3-2-注入的方式"><a href="#3-2-注入的方式" class="headerlink" title="3.2 注入的方式"></a>3.2 注入的方式</h3><h4 id="3-2-1-整个文件"><a href="#3-2-1-整个文件" class="headerlink" title="3.2.1 整个文件"></a>3.2.1 整个文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> add "script.js" to web_accessible_resources in manifest.json</span></span><br><span class="line">s.src = chrome.extension.getURL(<span class="string">'script.js'</span>);</span><br><span class="line">s.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.remove(); <span class="comment">// 执行完后清理注入标签</span></span><br><span class="line">&#125;;</span><br><span class="line">(<span class="built_in">document</span>.head || <span class="built_in">document</span>.documentElement).appendChild(s);</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 将 <code>script.js</code> 加入到 <a href="https://developer.chrome.com/extensions/manifest/web_accessible_resources" target="_blank" rel="noopener">“web_accessible_resources”</a></p>
<h4 id="3-2-2-代码片段"><a href="#3-2-2-代码片段" class="headerlink" title="3.2.2 代码片段"></a>3.2.2 代码片段</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actualCode = <span class="string">`// Code here.</span></span><br><span class="line"><span class="string">// If you want to use a variable, use $ and curly braces.</span></span><br><span class="line"><span class="string">// For example, to use a fixed random number:</span></span><br><span class="line"><span class="string">var someFixedRandomValue = <span class="subst">$&#123; <span class="built_in">Math</span>.random() &#125;</span>;</span></span><br><span class="line"><span class="string">// NOTE: Do not insert unsafe variables in this way, see below</span></span><br><span class="line"><span class="string">// at "Dynamic values in the injected code"</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.textContent = actualCode;</span><br><span class="line">(<span class="built_in">document</span>.head||<span class="built_in">document</span>.documentElement).appendChild(script);</span><br><span class="line">script.remove();</span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-更多方式"><a href="#3-2-3-更多方式" class="headerlink" title="3.2.3 更多方式"></a>3.2.3 更多方式</h4><p>参见： <a href="http://stackoverflow.com/questions/9515704/insert-code-into-the-page-context-using-a-content-script/9517879#9517879" target="_blank" rel="noopener">Insert code into the page context using a content script</a></p>
<h3 id="3-3-注入的时机"><a href="#3-3-注入的时机" class="headerlink" title="3.3 注入的时机"></a>3.3 注入的时机</h3><h4 id="3-3-1-document-start"><a href="#3-3-1-document-start" class="headerlink" title="3.3.1 document_start"></a>3.3.1 document_start</h4><ul>
<li>在 <code>document.readyState</code> 事件前被触发。</li>
<li><p>document.head 和 document.body 还不可用，只有 documentElement</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement (<span class="string">"script"</span>);</span><br><span class="line">s.src = <span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"</span>;</span><br><span class="line">s.async = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">document</span>.documentElement.appendChild (s);</span><br></pre></td></tr></table></figure>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement (<span class="string">"script"</span>);</span><br><span class="line">s.src = chrome.extension.getURL (<span class="string">"MyPwnCode.js"</span>);</span><br><span class="line">s.async = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">document</span>.documentElement.appendChild (s);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要操作其它 DOM，可以等待 <code>DOMContentLoaded</code> 事件</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, fireContentLoadedEvent, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fireContentLoadedEvent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log (<span class="string">"DOMContentLoaded"</span>);</span><br><span class="line">    <span class="comment">// PUT YOUR CODE HERE.</span></span><br><span class="line">    <span class="comment">//document.body.textContent = "Changed this!";</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-3-2-document-end"><a href="#3-3-2-document-end" class="headerlink" title="3.3.2 document_end"></a>3.3.2 document_end</h4><ul>
<li>DOM 已解析完成</li>
<li>资源如 image 和 frame 还没有加载（onload）</li>
</ul>
<h4 id="3-3-3-document-idle"><a href="#3-3-3-document-idle" class="headerlink" title="3.3.3 document_idle"></a>3.3.3 document_idle</h4><ul>
<li>晚于 document_end，</li>
<li>也晚于 window.onload</li>
<li>DOM 已解析完成</li>
</ul>
]]></content>
      
        <categories>
            
            <category> chrome </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
            <tag> extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome 扩展之： 使用 webRequest 替换页面资源]]></title>
      <url>/2017/04/19/extension-replace-js/</url>
      <content type="html"><![CDATA[<h2 id="请求事件"><a href="#请求事件" class="headerlink" title="请求事件"></a>请求事件</h2><p>首先，一个请求的生命周期是这样的：</p>
<p><img src="/images/posts/chrome_extension/webrequestapi.png" alt=""></p>
<p>利用 <a href="https://developer.chrome.com/extensions/webRequest" target="_blank" rel="noopener">webRequest</a> 接口，可以监听图中的事件，插入自己的处理。</p>
<h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h3 id="1-webRequest-需要在-background-中使用"><a href="#1-webRequest-需要在-background-中使用" class="headerlink" title="1. webRequest 需要在 background 中使用"></a>1. webRequest 需要在 background 中使用</h3><h3 id="2-调用方式"><a href="#2-调用方式" class="headerlink" title="2. 调用方式"></a>2. 调用方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;...&#125;;</span><br><span class="line"><span class="keyword">var</span> filter = &#123;...&#125;;</span><br><span class="line"><span class="keyword">var</span> opt_extraInfoSpec = [...];</span><br><span class="line"></span><br><span class="line">chrome.webRequest.onBeforeRequest.addListener(</span><br><span class="line">    callback, filter, opt_extraInfoSpec);</span><br></pre></td></tr></table></figure>
<h3 id="3-blocking-参数"><a href="#3-blocking-参数" class="headerlink" title="3. blocking 参数"></a>3. <code>blocking</code> 参数</h3><p><code>blocking</code> 会将回调函数设置为同步处理，请求会等待回调完成。使用该参数需要在 <code>permission</code> 中添加 <code>webRequestBlocking</code> 权限。</p>
<h2 id="举例：-替换网站的-JS-文件"><a href="#举例：-替换网站的-JS-文件" class="headerlink" title="举例： 替换网站的 JS 文件"></a>举例： 替换网站的 JS 文件</h2><h3 id="1-声明权限"><a href="#1-声明权限" class="headerlink" title="1. 声明权限"></a>1. 声明权限</h3><p>编辑 <code>manifest.json</code>，添加 <code>permission</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"permissions": [</span><br><span class="line">  "webRequest",</span><br><span class="line">  "webRequestBlocking",</span><br><span class="line">  "http://*/*",</span><br><span class="line">  <span class="string">"https://*/*"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="2-添加后端-文件"><a href="#2-添加后端-文件" class="headerlink" title="2. 添加后端 文件"></a>2. 添加后端 文件</h3><p>首先在 <code>manifest.json</code> 中添加 background 文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"background": &#123;</span><br><span class="line">  "scripts": ["dist/js/background.js"],</span><br><span class="line">  "persistent": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-webRequest-脚本"><a href="#3-webRequest-脚本" class="headerlink" title="3. webRequest 脚本"></a>3. webRequest 脚本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chrome.webRequest.onBeforeRequest.addListener(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( details.url.endsWith(<span class="string">'origin.js'</span>) )&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">redirectUrl</span>: chrome.extension.getURL (<span class="string">"dist/bake/fake.js"</span>)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;<span class="attr">urls</span>: [<span class="string">"*://*/*.js"</span>]&#125;,</span><br><span class="line">  [<span class="string">"blocking"</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>解释一下上面的后端代码：</p>
<ul>
<li>监听 <strong>符合规定请求</strong> 的 <code>onBeforeRequest</code> 事件</li>
<li>这2个参数是回调函数，通过参数 <code>details</code> 来判断每一个请求 <code>url</code>，如果以 <code>origin.js</code> 结尾，将用扩展中准备好的 <code>fake.js</code> 替换。换句话说，将原始网站的 JS 替换为假的 JS</li>
<li>对于用户来讲，通过查看源码，看到的仍然是 <code>&lt;script src=&quot;origin.js&quot;&gt;&lt;/script&gt;</code></li>
<li>通过 DevTools 的 network 查看，会发现 <code>url</code> 已经变为 <code>fake.js</code></li>
<li>第3个参数过滤被监听的请求，支持通配符 <code>*</code></li>
<li>第4个参数为扩展参数，<code>blocking</code> 说明这是 <strong>同步</strong> 处理，请求会等待回调函数完成</li>
</ul>
]]></content>
      
        <categories>
            
            <category> chrome </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
            <tag> extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设置 WebBrowser Document Mode]]></title>
      <url>/2017/03/27/webbrowser-document-mode/</url>
      <content type="html"><![CDATA[<h3 id="编辑注册表"><a href="#编辑注册表" class="headerlink" title="编辑注册表"></a>编辑注册表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION</span><br></pre></td></tr></table></figure>
<h3 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h3><table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">10001 (0x2711)</td>
<td style="text-align:left">Internet Explorer 10。网页以IE 10的标准模式展现，页面!DOCTYPE无效</td>
</tr>
<tr>
<td style="text-align:left">10000 (0x02710)</td>
<td style="text-align:left">Internet Explorer 10。在IE 10标准模式中按照网页上!DOCTYPE指令来显示网页。Internet Explorer 10 默认值。</td>
</tr>
<tr>
<td style="text-align:left">9999 (0x270F)</td>
<td style="text-align:left">Windows Internet Explorer 9. 强制IE9显示，忽略!DOCTYPE指令</td>
</tr>
<tr>
<td style="text-align:left">9000 (0x2328)</td>
<td style="text-align:left">Internet Explorer 9. Internet Explorer 9默认值，在IE9标准模式中按照网页上!DOCTYPE指令来显示网页。</td>
</tr>
<tr>
<td style="text-align:left">8888 (0x22B8)</td>
<td style="text-align:left">Internet Explorer 8，强制IE8标准模式显示，忽略!DOCTYPE指令</td>
</tr>
<tr>
<td style="text-align:left">8000 (0x1F40)</td>
<td style="text-align:left">Internet Explorer 8默认设置，在IE8标准模式中按照网页上!DOCTYPE指令展示网页</td>
</tr>
<tr>
<td style="text-align:left">7000 (0x1B58)</td>
<td style="text-align:left">使用WebBrowser Control控件的应用程序所使用的默认值，在IE7标准模式中按照网页上!DOCTYPE指令来展示网页。</td>
</tr>
</tbody>
</table>
<h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p><img src="/images/posts/ie/set-reg.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ie </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> c++ </tag>
            
            <tag> ie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DuiLib 的使用]]></title>
      <url>/2017/03/17/duilib-tutorial/</url>
      <content type="html"><![CDATA[<h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><p>本文下载的是 <a href="https://github.com/redrains/DuiLib_Redrain" target="_blank" rel="noopener">Redrain 维护的版本</a>，原始的 DuiLib 版本从<a href="https://github.com/duilib/duilib" target="_blank" rel="noopener">这里</a>下载。</p>
<h2 id="以库方式使用"><a href="#以库方式使用" class="headerlink" title="以库方式使用"></a>以库方式使用</h2><h3 id="打开并升级工程文件"><a href="#打开并升级工程文件" class="headerlink" title="打开并升级工程文件"></a>打开并升级工程文件</h3><p>打开 <code>DuiLib_vs2010.sln</code>，我安装的 IDE 是 <code>VS2015</code>，会提示升级，按提示完成。</p>
<h3 id="编译全部动态库"><a href="#编译全部动态库" class="headerlink" title="编译全部动态库"></a>编译全部动态库</h3><p>打开菜单 Build &gt; Batch Build…</p>
<p>选择编译所有配置：</p>
<p><img src="/images/posts/duilib/build-batch.jpg" alt=""></p>
<p>保存编译的结果：</p>
<ul>
<li>DuiLib.dll</li>
<li>DuiLib.lib</li>
<li>DuiLib_d.dll</li>
<li>DuiLib_d.lib</li>
</ul>
<p>以及 DuiLib 库的定义目录： <code>DuiLib</code></p>
<p>当创建新工程时，把 lib 文件添加到 link 依赖里，把 DuiLib 目录添加到 inluce 路径中，最后把 dll 库放到导出目录中，便配置好了一个 DuiLib 工程。</p>
<h2 id="以源码方式使用"><a href="#以源码方式使用" class="headerlink" title="以源码方式使用"></a>以源码方式使用</h2><h3 id="1-创建一个空工程"><a href="#1-创建一个空工程" class="headerlink" title="1. 创建一个空工程"></a>1. 创建一个空工程</h3><h3 id="2-将源码中的-DuiLib-目录添加到工程根目录中"><a href="#2-将源码中的-DuiLib-目录添加到工程根目录中" class="headerlink" title="2. 将源码中的 DuiLib 目录添加到工程根目录中"></a>2. 将源码中的 DuiLib 目录添加到工程根目录中</h3><h3 id="3-导入-DuiLib-项目"><a href="#3-导入-DuiLib-项目" class="headerlink" title="3. 导入 DuiLib 项目"></a>3. 导入 DuiLib 项目</h3><p>在工程上右键，选择：Add &gt; Existing Project…，找到 DuiLib 项目文件导入</p>
<h3 id="4-设置依赖-DuiLib"><a href="#4-设置依赖-DuiLib" class="headerlink" title="4. 设置依赖 DuiLib"></a>4. 设置依赖 DuiLib</h3><p>在主项目上右键，选择：Build Dependencies &gt; Project Dependencies…，设置依赖 DuiLib 项目。</p>
<p>这样，在编译主项目时会先编译依赖的 DuiLib 项目。</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> c++ </tag>
            
            <tag> duilib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CEF 的使用]]></title>
      <url>/2017/03/17/cef-tutorial/</url>
      <content type="html"><![CDATA[<h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><p><a href="http://opensource.spotify.com/cefbuilds/index.html" target="_blank" rel="noopener">http://opensource.spotify.com/cefbuilds/index.html</a></p>
<h2 id="CEF"><a href="#CEF" class="headerlink" title="CEF"></a>CEF</h2><h3 id="cefsimple-示例"><a href="#cefsimple-示例" class="headerlink" title="cefsimple 示例"></a>cefsimple 示例</h3><ol>
<li>编译 <code>libcef_dll_wrapper</code> 静态库</li>
<li>创建新的项目</li>
<li>设置 include 目录到 cef 头文件目录</li>
<li>设置链接库  comctl32.lib, shlwapi.lib, rcprt4.lib, libcef_dll_wrapper.lib, libcef.lib, cef_sandbox.lib</li>
<li>添加 resource.rc</li>
<li>添加 cefsimple.exe.manifest 和 compatibility.manifest</li>
<li>绑定编译事件 post build: 将 cef debug 或 release 目录，Resources 目录复制到输出目录</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="CefSettings"><a href="#CefSettings" class="headerlink" title="CefSettings"></a>CefSettings</h4><p>当嵌入到 windows 消息循环和 DuiLib 消息循环时，要设置 <code>multi_threaded_message_loop</code></p>
<h4 id="CefBrowser-和-CefFrame"><a href="#CefBrowser-和-CefFrame" class="headerlink" title="CefBrowser 和 CefFrame"></a>CefBrowser 和 CefFrame</h4><p>CefBrowser 可以包含多个 CefFrame</p>
<h4 id="CefApp"><a href="#CefApp" class="headerlink" title="CefApp"></a>CefApp</h4><p>待补充</p>
<h4 id="CefClient"><a href="#CefClient" class="headerlink" title="CefClient"></a>CefClient</h4><p><strong>是否支持 crx</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 加载测试扩展，如果是 windows 或 linux，可以加上 --use-views 获得更好效果</span><br><span class="line">cefclient --load-extension=set_page_color --use-views</span><br><span class="line"></span><br><span class="line">// 通过路径加载任意扩展</span><br><span class="line">cefclient --load-extension=c:\path\to\my\extension</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> c++ </tag>
            
            <tag> cef </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Proxychains4 问题]]></title>
      <url>/2017/03/10/proxychains-problem/</url>
      <content type="html"><![CDATA[<h3 id="Timeout-问题"><a href="#Timeout-问题" class="headerlink" title="Timeout 问题"></a>Timeout 问题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl https://www.twitter.com/</span><br><span class="line">[proxychains] config file found: /usr/local/Cellar/proxychains-ng/4.10/etc/proxychains.conf</span><br><span class="line">[proxychains] preloading /usr/local/Cellar/proxychains-ng/4.10/lib/libproxychains4.dylib</span><br><span class="line">curl: (7) Failed to connect to www.twitter.com port 443: Operation timed out</span><br></pre></td></tr></table></figure>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="1-重启系统进入维护模式（Recovery-Mode）"><a href="#1-重启系统进入维护模式（Recovery-Mode）" class="headerlink" title="1. 重启系统进入维护模式（Recovery Mode）"></a>1. 重启系统进入维护模式（Recovery Mode）</h4><p>按住 ‘Command’ 和 ‘R’ 启动系统</p>
<h4 id="2-打开终端（Terminal）"><a href="#2-打开终端（Terminal）" class="headerlink" title="2. 打开终端（Terminal）"></a>2. 打开终端（Terminal）</h4><h4 id="3-禁用-csrutil"><a href="#3-禁用-csrutil" class="headerlink" title="3. 禁用 csrutil"></a>3. 禁用 csrutil</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil disable</span><br></pre></td></tr></table></figure>
<h4 id="4-重启系统"><a href="#4-重启系统" class="headerlink" title="4. 重启系统"></a>4. 重启系统</h4>]]></content>
      
        <categories>
            
            <category> mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NSIS 用法小结]]></title>
      <url>/2017/02/22/nsis-usage/</url>
      <content type="html"><![CDATA[<h3 id="编译-Unicode-版本"><a href="#编译-Unicode-版本" class="headerlink" title="编译 Unicode 版本"></a>编译 Unicode 版本</h3><p>在 nsi 文件开头加上宏配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unicode true</span><br></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>unicode 版本的 nsi 和 nsh 文件，需要将编码设置成 <strong>utf8 with BOM</strong>。不然编译器会仍然以 ACP 方式读取文件。</p>
<p><a href="http://nsis.sourceforge.net/Docs/Contents.html" target="_blank" rel="noopener">NSIS Users Manual</a></p>
]]></content>
      
        <categories>
            
            <category> installer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nsis </tag>
            
            <tag> installer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[socket 常用数据结构]]></title>
      <url>/2017/02/16/socket-data-struct/</url>
      <content type="html"><![CDATA[<h3 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h3><h4 id="1-sockaddr"><a href="#1-sockaddr" class="headerlink" title="1. sockaddr"></a>1. sockaddr</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr &#123;</span><br><span class="line">    unsigned short    sa_family;    // address family, AF_xxx</span><br><span class="line">    char              sa_data[14];  // 14 bytes of protocol address</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="2-inet-相关"><a href="#2-inet-相关" class="headerlink" title="2. inet 相关"></a>2. inet 相关</h4><p>sockaddr_in 继承 sockaddr 并添加了一些 INET 的数据属性。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// IPv4 AF_INET sockets:</span><br><span class="line">struct in_addr &#123;</span><br><span class="line">    unsigned long s_addr;          // load with inet_pton()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in &#123;</span><br><span class="line">    short            sin_family;   // e.g. AF_INET, AF_INET6</span><br><span class="line">    unsigned short   sin_port;     // e.g. htons(3490)</span><br><span class="line">    struct in_addr   sin_addr;     // see struct in_addr, below</span><br><span class="line">    char             sin_zero[8];  // zero this if you want to</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// IPv6 AF_INET6 sockets:</span><br><span class="line">struct in6_addr &#123;</span><br><span class="line">    unsigned char   s6_addr[16];   // load with inet_pton()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in6 &#123;</span><br><span class="line">    u_int16_t       sin6_family;   // address family, AF_INET6</span><br><span class="line">    u_int16_t       sin6_port;     // port number, Network Byte Order</span><br><span class="line">    u_int32_t       sin6_flowinfo; // IPv6 flow information</span><br><span class="line">    struct in6_addr sin6_addr;     // IPv6 address</span><br><span class="line">    u_int32_t       sin6_scope_id; // Scope ID</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>sockaddr 转换为 sockaddr_in：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sockaddr from;</span><br><span class="line">sockaddr_in to = (sockaddr_in)from;</span><br></pre></td></tr></table></figure>
<h4 id="3-sockaddr-storage"><a href="#3-sockaddr-storage" class="headerlink" title="3. sockaddr_storage"></a>3. sockaddr_storage</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// General socket address holding structure, big enough to hold either</span><br><span class="line">// struct sockaddr_in or struct sockaddr_in6 data:</span><br><span class="line"></span><br><span class="line">struct sockaddr_storage &#123;</span><br><span class="line">    sa_family_t  ss_family;     // address family</span><br><span class="line"></span><br><span class="line">    // all this is padding, implementation specific, ignore it:</span><br><span class="line">    char      __ss_pad1[_SS_PAD1SIZE];</span><br><span class="line">    int64_t   __ss_align;</span><br><span class="line">    char      __ss_pad2[_SS_PAD2SIZE];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="4-addrinfo"><a href="#4-addrinfo" class="headerlink" title="4. addrinfo"></a>4. addrinfo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">struct addrinfo &#123;</span><br><span class="line">  int     ai_flags;          // AI_PASSIVE, AI_CANONNAME, ...</span><br><span class="line">  int     ai_family;         // AF_xxx</span><br><span class="line">  int     ai_socktype;       // SOCK_xxx</span><br><span class="line">  int     ai_protocol;       // 0 (auto) or IPPROTO_TCP, IPPROTO_UDP </span><br><span class="line"></span><br><span class="line">  socklen_t  ai_addrlen;     // length of ai_addr</span><br><span class="line">  char   *ai_canonname;      // canonical name for nodename</span><br><span class="line">  struct sockaddr  *ai_addr; // binary address</span><br><span class="line">  struct addrinfo  *ai_next; // next structure in linked list</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a href="http://beej.us/guide/bgnet/output/html/multipage/sockaddr_inman.html" target="_blank" rel="noopener">struct sockaddr and pals</a></p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 VS2015 编译 cpp-netlib]]></title>
      <url>/2017/02/15/build-cpp-netlib-with-vs2015/</url>
      <content type="html"><![CDATA[<p><a href="http://cpp-netlib.org/0.11.0/getting_started.html#building-on-windows" target="_blank" rel="noopener">cpp-netlib 官方文档</a></p>
<p>cpp-netlib 旨在用最新的 C++ 标准，提供易用的网络接口库。</p>
<ul>
<li><a href="http://cpp-netlib.org/" target="_blank" rel="noopener">官方网站</a>：官网提供最新的代码和库下载</li>
<li><a href="https://github.com/cpp-netlib/cpp-netlib" target="_blank" rel="noopener">GitHub</a>：提供较早版本的下载</li>
</ul>
<h2 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h2><h4 id="1-编译-boost"><a href="#1-编译-boost" class="headerlink" title="1. 编译 boost"></a>1. 编译 boost</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.bat</span><br><span class="line">.\b2 install --prefix=C:\Users\jon\Desktop\builds\boost --toolset=msvc --without-python link=static runtime-link=shared debug release</span><br></pre></td></tr></table></figure>
<ul>
<li><code>runtime-link=shared</code> 是使用动态库方式编译，对应 VS 设置值 <code>runtime = MD</code></li>
<li><code>runtime-link=static</code> 是使用静态库方式编译，对应 VS 设置值 <code>runtime = MT</code></li>
</ul>
<h4 id="2-生成-cpp-netlib-配置文件"><a href="#2-生成-cpp-netlib-配置文件" class="headerlink" title="2. 生成 cpp-netlib 配置文件"></a>2. 生成 cpp-netlib 配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir cpp-netlib-build</span><br><span class="line"></span><br><span class="line">cd cpp-netlib-build</span><br><span class="line"></span><br><span class="line">cmake -G "Visual Studio 14" -DCMAKE_BUILD_TYPE=Debug -DBOOST_ROOT=C:/Users/jon/Desktop/builds/boost ..\cpp-netlib-0.12.0-final</span><br></pre></td></tr></table></figure>
<p>其它的设置选项还有：</p>
<ul>
<li>-DCMAKE_BUILD_TYPE=Debug </li>
<li>-DCMAKE_C_COMPILER=clang</li>
<li>-DCMAKE_CXX_COMPILER=clang++ </li>
</ul>
<h4 id="3-打开-cpp-netlib-build-CPP-NETLIB-sln-编译"><a href="#3-打开-cpp-netlib-build-CPP-NETLIB-sln-编译" class="headerlink" title="3. 打开 cpp-netlib-build/CPP-NETLIB.sln 编译"></a>3. 打开 <code>cpp-netlib-build/CPP-NETLIB.sln</code> 编译</h4><p>可以全部编译，也可以根据需要单独编译某个模块。比如，单独编译 <code>cppnetlib-uri</code> 项目。编译好的文件输出在 <code>cpp-netlib-build/libs/network/src/Release</code></p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-Invalid-escape-sequence-U"><a href="#1-Invalid-escape-sequence-U" class="headerlink" title="1. Invalid escape sequence \U"></a>1. Invalid escape sequence \U</h3><p>检查 <code>-DBOOST_ROOT=</code> 后面的路径分隔符是不是反斜扛。</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> boost </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 VS2015 编译 boost]]></title>
      <url>/2017/02/14/build-boost-with-vs2015/</url>
      <content type="html"><![CDATA[<p><a href="http://www.boost.org/doc/libs/1_63_0/more/getting_started/windows.html" target="_blank" rel="noopener">boost 官方文档</a></p>
<h3 id="最简单的编译方法"><a href="#最简单的编译方法" class="headerlink" title="最简单的编译方法"></a>最简单的编译方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.bat</span><br><span class="line">.\b2.exe</span><br></pre></td></tr></table></figure>
<p>当编译成功，会得到提示</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The Boost C++ Libraries were successfully built!</span><br><span class="line"></span><br><span class="line">The following directory should be added to compiler include paths:</span><br><span class="line"></span><br><span class="line">    C:\Users\jon\Desktop\boost_1_63_0</span><br><span class="line"></span><br><span class="line">The following directory should be added to linker library paths:</span><br><span class="line"></span><br><span class="line">    C:\Users\jon\Desktop\boost_1_63_0\stage\lib</span><br></pre></td></tr></table></figure>
<h3 id="编译并指定目录"><a href="#编译并指定目录" class="headerlink" title="编译并指定目录"></a>编译并指定目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./b2 install --prefix=PREFIX</span><br></pre></td></tr></table></figure>
<p><a href="http://www.boost.org/doc/libs/1_55_0/doc/html/bbv2/installation.html" target="_blank" rel="noopener">参考</a></p>
<h3 id="编译参数示例"><a href="#编译参数示例" class="headerlink" title="编译参数示例"></a>编译参数示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\b2 install --prefix=C:\Users\jon\Desktop\builds\boost --toolset=msvc --without-python link=static runtime-link=shared debug release</span><br></pre></td></tr></table></figure>
<h3 id="使用-boost-头文件库（Header-Only）"><a href="#使用-boost-头文件库（Header-Only）" class="headerlink" title="使用 boost 头文件库（Header Only）"></a>使用 boost 头文件库（Header Only）</h3><p>将下载的 boost 目录添加到项目的 include 路径即可</p>
<h3 id="使用-boost-编译库（Header-CPP）"><a href="#使用-boost-编译库（Header-CPP）" class="headerlink" title="使用 boost 编译库（Header+CPP）"></a>使用 boost 编译库（Header+CPP）</h3><p>除了将 boost 目录添加到 include，还要将上面编译出来的 <code>stage/lib</code> 目录添加到 library 路径</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> boost </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chromium 拾遗]]></title>
      <url>/2017/01/19/chrome-tips/</url>
      <content type="html"><![CDATA[<h4 id="记录-SSL-的-Session-Key"><a href="#记录-SSL-的-Session-Key" class="headerlink" title="记录 SSL 的 Session Key"></a>记录 SSL 的 Session Key</h4><p>在环境变量中添加一个变量</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSLKEYLOGFILE  C:\Users\Jonathan\Documents\SSLKEYLOGFILE.txt</span><br></pre></td></tr></table></figure>
<h4 id="可用的命令行参数"><a href="#可用的命令行参数" class="headerlink" title="可用的命令行参数"></a>可用的命令行参数</h4><p><a href="http://peter.sh/experiments/chromium-command-line-switches/" target="_blank" rel="noopener">参考</a></p>
<h4 id="Chrome-发布日历"><a href="#Chrome-发布日历" class="headerlink" title="Chrome 发布日历"></a>Chrome 发布日历</h4><p><a href="https://chromiumdash.appspot.com/releases?platform=Windows" target="_blank" rel="noopener">最新日历</a></p>
<p><a href="https://www.chromium.org/developers/calendar" target="_blank" rel="noopener">Chromium Development Calendar and Release Info</a></p>
<h4 id="Chromium-分支和标签"><a href="#Chromium-分支和标签" class="headerlink" title="Chromium 分支和标签"></a>Chromium 分支和标签</h4><p><a href="https://chromium.googlesource.com/chromium/src.git/+refs" target="_blank" rel="noopener">src.git/+refs</a></p>
<h4 id="Chrome-功能更新"><a href="#Chrome-功能更新" class="headerlink" title="Chrome 功能更新"></a>Chrome 功能更新</h4><p>查看 <a href="https://www.chromestatus.com/features#milestone%3D68" target="_blank" rel="noopener">这里</a></p>
<h4 id="Chrome-CI-持续集成"><a href="#Chrome-CI-持续集成" class="headerlink" title="Chrome CI 持续集成"></a>Chrome CI 持续集成</h4><p>查看 <a href="https://ci.chromium.org/p/chromium/g/main/console" target="_blank" rel="noopener">这里</a></p>
<h4 id="chromium-browser-official"><a href="#chromium-browser-official" class="headerlink" title="chromium-browser-official"></a>chromium-browser-official</h4><p><a href="https://gsdview.appspot.com/chromium-browser-official/?marker=chromium-49.0.2623.11.tar.xz.hashe%40" target="_blank" rel="noopener">chromium-browser-official</a></p>
<p><a href="https://chromium.googlesource.com/chromium/src.git" target="_blank" rel="noopener">chromium src</a></p>
<h4 id="Chrome-历史离线包"><a href="#Chrome-历史离线包" class="headerlink" title="Chrome 历史离线包"></a>Chrome 历史离线包</h4><p><a href="https://www.slimjet.com/chrome/google-chrome-old-version.php" target="_blank" rel="noopener">Google Chrome Older Versions Download</a></p>
<h4 id="Chrome-扩展抓取"><a href="#Chrome-扩展抓取" class="headerlink" title="Chrome 扩展抓取"></a>Chrome 扩展抓取</h4><ul>
<li><a href="https://crx.dam.io/" target="_blank" rel="noopener">全部扩展列表</a></li>
<li><a href="https://github.com/mdamien/chrome-extensions-archive" target="_blank" rel="noopener">抓取源码</a></li>
</ul>
<h4 id="Chrome-安装路径"><a href="#Chrome-安装路径" class="headerlink" title="Chrome 安装路径"></a>Chrome 安装路径</h4><ul>
<li>mac：<code>/Users/{user-name}/Library/Application Support/Google/Chrome</code></li>
<li>windows： <code>C:/Users/{user-name}/App Data/Local/Google/Chrome</code></li>
<li>linux：<code>/home/{user-name}/.config/google-chrome</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPStorm 设置 watcher]]></title>
      <url>/2017/01/19/phpstorm-file-watcher/</url>
      <content type="html"><![CDATA[<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><img src="/images/posts/phpstorm_watch/pic-1.png" alt=""></p>
<p><img src="/images/posts/phpstorm_watch/pic-2.png" alt=""></p>
<h4 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments:"></a>Arguments:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--no-cache --update $FileName$:$ProjectFileDir$/dist/css/$FileNameWithoutExtension$.css</span><br></pre></td></tr></table></figure>
<h4 id="Outputs-path-to-refresh"><a href="#Outputs-path-to-refresh" class="headerlink" title="Outputs path to refresh:"></a>Outputs path to refresh:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">ProjectFileDir$/dist/css/<span class="variable">$FileNameWithoutExtension</span>$.css:<span class="variable">$ProjectFileDir</span>$/dist/css/<span class="variable">$FileNameWithoutExtension</span>$.css.map</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> ide </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译 Chromium 常见问题]]></title>
      <url>/2017/01/17/build-chromium-issues/</url>
      <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="命令行翻墙设置"><a href="#命令行翻墙设置" class="headerlink" title="命令行翻墙设置"></a>命令行翻墙设置</h3><p><strong>Windows 命令行设置</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=127.0.0.1:1080</span><br><span class="line">set https_proxy=127.0.0.1:1080</span><br><span class="line">set socks5_proxy=127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<p><strong>Git 设置</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:1080</span><br><span class="line">git config --global https.proxy 127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<h2 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a>获取代码</h2><h3 id="gclient-sync-参数"><a href="#gclient-sync-参数" class="headerlink" title="gclient sync 参数"></a>gclient sync 参数</h3><h4 id="–nohooks"><a href="#–nohooks" class="headerlink" title="–nohooks"></a>–nohooks</h4><h4 id="–no-history"><a href="#–no-history" class="headerlink" title="–no-history"></a>–no-history</h4><h4 id="–with-branch-heads"><a href="#–with-branch-heads" class="headerlink" title="–with_branch_heads"></a>–with_branch_heads</h4><h4 id="–with-tags"><a href="#–with-tags" class="headerlink" title="–with_tags"></a>–with_tags</h4><h4 id="–output-json"><a href="#–output-json" class="headerlink" title="–output-json"></a>–output-json</h4><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="DEPOT-TOOLS-WIN-TOOLCHAIN"><a href="#DEPOT-TOOLS-WIN-TOOLCHAIN" class="headerlink" title="DEPOT_TOOLS_WIN_TOOLCHAIN"></a>DEPOT_TOOLS_WIN_TOOLCHAIN</h3><h3 id="GYP-GENERATORS-msvs-ninja-ninja"><a href="#GYP-GENERATORS-msvs-ninja-ninja" class="headerlink" title="GYP_GENERATORS=msvs-ninja,ninja"></a>GYP_GENERATORS=msvs-ninja,ninja</h3><h3 id="GYP-DEFINES"><a href="#GYP-DEFINES" class="headerlink" title="GYP_DEFINES"></a>GYP_DEFINES</h3><h3 id="buildtype-Official"><a href="#buildtype-Official" class="headerlink" title="buildtype=Official"></a>buildtype=Official</h3><p>如果不添加 <code>buildtype=Official</code> 可能会遇到下面问题：</p>
<ol>
<li>XP 系统不能正常运行</li>
</ol>
<p>在添加了该编译参数情况下，也会遇到某些奇怪问题：</p>
<ol>
<li>在某些机器上，当打开某些页面，比如<a href="http://video.sina.com.cn/p/news/o/doc/2018-06-12/151568884855.html" target="_blank" rel="noopener">新浪视频</a>，退出浏览器后，会收到网络层不能析构的 bug</li>
</ol>
<h3 id="gclient-runhooks"><a href="#gclient-runhooks" class="headerlink" title="gclient runhooks"></a>gclient runhooks</h3><p>gclient runhooks 会做二件事：一是检查编译环境，二是生成编译脚本。我们也可以跳过检查编译环境，直接生成编译脚本：</p>
<p><strong>生成全部脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python src\build\gyp_chromium</span><br></pre></td></tr></table></figure>
<p><strong>生成某个工程</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chrome 工程</span></span><br><span class="line">python src\build\gyp_chromium src\chrome\chrome.gyp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装包工程</span></span><br><span class="line">python src\build\gyp_chromium src\chrome\installer\mini_installer.gyp</span><br></pre></td></tr></table></figure>
<p>Goutput_dir</p>
<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h3 id="查找错误"><a href="#查找错误" class="headerlink" title="查找错误"></a>查找错误</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ninja -C src/out/Debug chrome | findstr error</span><br></pre></td></tr></table></figure>
<h3 id="VS-忽略错误"><a href="#VS-忽略错误" class="headerlink" title="VS 忽略错误"></a>VS 忽略错误</h3><p>VS2015 编译时会遇到一些错误，通过以下设置解决</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4334, # </span><br><span class="line">4595, # </span><br><span class="line">4275, # </span><br><span class="line">4819, # The file contains a character that cannot berepresented in the current code page (936).</span><br></pre></td></tr></table></figure>
<h3 id="gclient-sync-错误-1"><a href="#gclient-sync-错误-1" class="headerlink" title="gclient sync 错误 1"></a>gclient sync 错误 1</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fatal: Needed a single revision</span><br><span class="line">Does not point to a valid commit: 4ce7fef091e1d63a3bfc2ed225619893b0eb1782</span><br><span class="line"><span class="meta">32&gt;</span><span class="bash"> Unrecognized error, please merge or rebase manually.  </span></span><br><span class="line"><span class="meta">32&gt;</span><span class="bash"> <span class="built_in">cd</span> src\third_party\libjingle\<span class="built_in">source</span>\talk &amp;&amp; git rebase --onto 4ce7fef091e1d63a3bfc2ed225619893b0eb1782 refs/remotes/origin/master</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gclient sync --with_branch_heads</span><br></pre></td></tr></table></figure>
<h3 id="gclient-sync-错误-2"><a href="#gclient-sync-错误-2" class="headerlink" title="gclient sync 错误 2"></a>gclient sync 错误 2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Cannot rebase:You have unstaged changes.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Please commit or stash them.</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong></p>
<p>忽略行结尾的不一致：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf true</span><br></pre></td></tr></table></figure>
<h3 id="Windows-系统语言错误"><a href="#Windows-系统语言错误" class="headerlink" title="Windows 系统语言错误"></a>Windows 系统语言错误</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> The file contains a character that cannot berepresented <span class="keyword">in</span> the current code page.</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong></p>
<p>依次打开：Region and Language &gt; Administrative &gt; Langeuage for non-Unicode programs </p>
<p>点击 Change system locale…，切换为 English (United State)</p>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SourceTree 操作被挂起]]></title>
      <url>/2017/01/17/source-tree-hungs/</url>
      <content type="html"><![CDATA[<h4 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">The server's host key is not cached in the registry. You</span><br><span class="line">have no guarantee that the server is the computer you</span><br><span class="line">think it is.</span><br><span class="line">The server's rsa2 key fingerprint is:</span><br><span class="line">ssh-rsa 2048 59:ca:22:af:f9:8e:6f:f7:87:b3:ea:da:1b:2b:aa:f2</span><br><span class="line">If you trust this host, enter "y" to add the key to</span><br><span class="line">PuTTY's cache and carry on connecting.</span><br><span class="line">If you want to carry on connecting just once, without</span><br><span class="line">adding the key to the cache, enter "n".</span><br><span class="line">If you do not trust this host, press Return to abandon the</span><br><span class="line">connection.</span><br></pre></td></tr></table></figure>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>手动连接一次 git 服务器，比如 GitLab，<a href="http://stackoverflow.com/questions/32437659/cannot-pull-git-remote-repository-from-sourcetree" target="_blank" rel="noopener">StackOverflow</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"C:\Program Files (x86)\Atlassian\SourceTree\tools\putty\plink.exe" gitlab.com</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> SourceTree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows Batch 用法]]></title>
      <url>/2017/01/17/batch-usage/</url>
      <content type="html"><![CDATA[<h4 id="当前脚本目录"><a href="#当前脚本目录" class="headerlink" title="当前脚本目录"></a>当前脚本目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">~dp0</span></span><br></pre></td></tr></table></figure>
<h4 id="当前目录"><a href="#当前目录" class="headerlink" title="当前目录"></a>当前目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for %%* in (.) do set CurrentDirName=%%~nx*</span><br></pre></td></tr></table></figure>
<h4 id="当前目录（不带斜线-）"><a href="#当前目录（不带斜线-）" class="headerlink" title="当前目录（不带斜线 ）"></a>当前目录（不带斜线 ）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET mypath=%~dp0</span><br><span class="line">echo %mypath:~0,-1%</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> bat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WebBrowser 运行 ActiveX 异常]]></title>
      <url>/2017/01/17/webbrowser-nxcompat-issue/</url>
      <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>前段时间使用 VS2015 编译 WebBrowser 的程序，然后运行包含 ActiveX 的页面时，出现了一些奇怪的问题（呃…问题记不清了）。但是，换成 VS2008 或其它低版本编译器时，又不会出现该问题了。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>经过一翻查找，发现是编译参数 <code>/NXCOMPAT</code> 引起的，早期的 VS，该参数默认为 <code>NO</code>，新版本默认为 <code>YES</code>。可修改默认值为 <code>NO</code> 解决此问题。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote>
<p><a href="http://blog.csdn.net/charlessimonyi/article/details/30479131" target="_blank" rel="noopener">WebBrowser无法显示招商银行密码输入控件的问题</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> activex </category>
            
        </categories>
        
        
        <tags>
            
            <tag> activex </tag>
            
            <tag> webbrowser </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 vs2015 编译 OpenSSL]]></title>
      <url>/2017/01/16/build-openssl-with-vs2015/</url>
      <content type="html"><![CDATA[<h3 id="OpenSSL-版本"><a href="#OpenSSL-版本" class="headerlink" title="OpenSSL 版本"></a>OpenSSL 版本</h3><p>openssl-1.0.2j</p>
<h3 id="必需的工具"><a href="#必需的工具" class="headerlink" title="必需的工具"></a>必需的工具</h3><ul>
<li>Visual Studio 2015</li>
<li>ActivePerl</li>
<li>Nasm (The Netwide Assembler)</li>
</ul>
<p>nasm 需要根据需要下载32位或64位版本：</p>
<ul>
<li><a href="http://www.nasm.us/pub/nasm/releasebuilds/2.12.02/win32/" target="_blank" rel="noopener">32位</a></li>
<li><a href="http://www.nasm.us/pub/nasm/releasebuilds/2.12.02/win64/" target="_blank" rel="noopener">64位</a></li>
</ul>
<h3 id="编译32位版本"><a href="#编译32位版本" class="headerlink" title="编译32位版本"></a>编译32位版本</h3><h4 id="1-初始化命令行环境"><a href="#1-初始化命令行环境" class="headerlink" title="1. 初始化命令行环境"></a>1. 初始化命令行环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd C:\build\src\openssl-1.0.2j</span><br><span class="line"></span><br><span class="line">set PATH=%PATH%;C:\nasm</span><br><span class="line"></span><br><span class="line">"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat"</span><br></pre></td></tr></table></figure>
<h4 id="2-初始化编译配置"><a href="#2-初始化编译配置" class="headerlink" title="2. 初始化编译配置"></a>2. 初始化编译配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">perl Configure VC-WIN32 no-asm</span><br><span class="line"></span><br><span class="line">ms\do_nasm</span><br></pre></td></tr></table></figure>
<h4 id="3-编译"><a href="#3-编译" class="headerlink" title="3. 编译"></a>3. 编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 静态库</span><br><span class="line">nmake /f ms\nt.mak</span><br><span class="line">nmake /f ms\nt.mak test</span><br><span class="line">nmake /f ms\nt.mak install</span><br><span class="line"></span><br><span class="line">// 动态库</span><br><span class="line">nmake -f ms\ntdll.mak</span><br><span class="line">nmake -f ms\ntdll.mak install</span><br></pre></td></tr></table></figure>
<h3 id="编译64位版本"><a href="#编译64位版本" class="headerlink" title="编译64位版本"></a>编译64位版本</h3><h4 id="1-初始化命令行环境-1"><a href="#1-初始化命令行环境-1" class="headerlink" title="1. 初始化命令行环境"></a>1. 初始化命令行环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd C:\build\src\openssl-1.0.2j</span><br><span class="line"></span><br><span class="line">set PATH=%PATH%;C:\nasm</span><br><span class="line"></span><br><span class="line">"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64</span><br></pre></td></tr></table></figure>
<h4 id="2-初始化编译配置-1"><a href="#2-初始化编译配置-1" class="headerlink" title="2. 初始化编译配置"></a>2. 初始化编译配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">perl Configure VC-WIN64A no-asm</span><br><span class="line"></span><br><span class="line">ms\do_win64a</span><br></pre></td></tr></table></figure>
<h4 id="3-编译-1"><a href="#3-编译-1" class="headerlink" title="3. 编译"></a>3. 编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 静态库</span><br><span class="line">nmake /f ms\nt.mak</span><br><span class="line">nmake /f ms\nt.mak test</span><br><span class="line">nmake /f ms\nt.mak install</span><br><span class="line"></span><br><span class="line">// 动态库</span><br><span class="line">nmake -f ms\ntdll.mak</span><br><span class="line">nmake -f ms\ntdll.mak install</span><br></pre></td></tr></table></figure>
<h3 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Assembling: tmp32\sha1-586.asm</span><br><span class="line">tmp32\sha1-586.asm(1427) : error A2070: invalid instruction operands</span><br><span class="line">tmp32\sha1-586.asm(1571) : error A2070: invalid instruction operands</span><br><span class="line">NMAKE : fatal error U1077: 'ml' : return code '0x1'</span><br><span class="line">Stop.</span><br></pre></td></tr></table></figure>
<p>解决： <code>perl Configure VC-WIN32 no-asm</code> 加上 no-asm</p>
]]></content>
      
        <categories>
            
            <category> openssl </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
            <tag> vs2015 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于证书类型]]></title>
      <url>/2016/12/20/about-cert-type/</url>
      <content type="html"><![CDATA[<h3 id="证书的编码（encoding）分类"><a href="#证书的编码（encoding）分类" class="headerlink" title="证书的编码（encoding）分类"></a>证书的编码（encoding）分类</h3><p>首先，ASN.1 定义了几个编码格式，成为了 <a href="https://en.wikipedia.org/wiki/X.690#DER_encoding" target="_blank" rel="noopener">X.690</a> 标准，它们是：</p>
<ul>
<li>Basic Encoding Rules (BER)</li>
<li>Canonical Encoding Rules (CER)</li>
<li>Distinguished Encoding Rules (DER)</li>
</ul>
<p>然后证书采用了 DER 作为 <strong>二进制</strong> 编码格式；但是为了便于阅读和传送，也可以将二进制转换为 base64 形式，又引入了 PEM 格式，如下所示：</p>
<ul>
<li>Privacy-enhanced Electronic Mail (PEM) ：将 DER 的做 base64 编码，并在开头和结尾加入标识：<code>&quot;-----BEGIN CERTIFICATE-----&quot;</code> 和 <code>&quot;-----END CERTIFICATE-----&quot;</code></li>
</ul>
<h3 id="证书的存储格式"><a href="#证书的存储格式" class="headerlink" title="证书的存储格式"></a>证书的存储格式</h3><ul>
<li>.pem</li>
<li>.cer, .crt, .der</li>
<li>.p7b, .p7c</li>
<li>.p12</li>
<li>.pfx</li>
<li>.key</li>
</ul>
<h4 id="pem"><a href="#pem" class="headerlink" title=".pem"></a>.pem</h4><p>存储的是 base64 格式，也就是 PEM 格式</p>
<h4 id="cer-crt-der"><a href="#cer-crt-der" class="headerlink" title=".cer, .crt, .der"></a>.cer, .crt, .der</h4><p>通常存储的是 DER 编码的二进制格式</p>
<h4 id="p7b-p7c"><a href="#p7b-p7c" class="headerlink" title=".p7b, .p7c"></a>.p7b, .p7c</h4><p>不包含数据的 PKCS#7 签名格式, 只包含证书或CRL<br>开头和结尾是：<code>&quot;-----BEGIN PKCS7-----&quot;</code> 和 <code>&quot;-----END PKCS7-----&quot;</code></p>
<h4 id="pfx"><a href="#pfx" class="headerlink" title=".pfx"></a>.pfx</h4><p>personal information exchange (PFX) 也是 PKCS#12 格式，这是微软提出的格式</p>
<h4 id="p12"><a href="#p12" class="headerlink" title=".p12"></a>.p12</h4><p>PKCS#12 格式，包含了证书和私钥，私钥有密码保护，Netscape 提出的格式</p>
<h4 id="key"><a href="#key" class="headerlink" title=".key"></a>.key</h4><p>用于 PKCS#8 的公钥或私钥，编码支持 DER 或 PEM 2种格式</p>
<h3 id="查看证书"><a href="#查看证书" class="headerlink" title="查看证书"></a>查看证书</h3><h4 id="查看-DER-证书"><a href="#查看-DER-证书" class="headerlink" title="查看 DER 证书"></a>查看 DER 证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in certificate.der -inform der -text -noout</span><br></pre></td></tr></table></figure>
<h4 id="查看-PEM-证书"><a href="#查看-PEM-证书" class="headerlink" title="查看 PEM 证书"></a>查看 PEM 证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in cert.pem -text -noout</span><br><span class="line">openssl x509 -in cert.cer -text -noout</span><br><span class="line">openssl x509 -in cert.crt -text -noout</span><br></pre></td></tr></table></figure>
<h3 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h3><h4 id="DER-gt-PEM"><a href="#DER-gt-PEM" class="headerlink" title="DER -&gt; PEM"></a>DER -&gt; PEM</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in cert.crt -inform der -outform pem -out cert.pem</span><br></pre></td></tr></table></figure>
<h4 id="PEM-gt-DER"><a href="#PEM-gt-DER" class="headerlink" title="PEM -&gt; DER"></a>PEM -&gt; DER</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in cert.crt -outform der -out cert.der</span><br></pre></td></tr></table></figure>
<h4 id="PEM-gt-P7B"><a href="#PEM-gt-P7B" class="headerlink" title="PEM -&gt; P7B"></a>PEM -&gt; P7B</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl crl2pkcs7 -nocrl -certfile certificate.cer -out certificate.p7b -certfile CACert.cer</span><br></pre></td></tr></table></figure>
<h4 id="PEM-gt-PFX"><a href="#PEM-gt-PFX" class="headerlink" title="PEM -&gt; PFX"></a>PEM -&gt; PFX</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CACert.crt</span><br></pre></td></tr></table></figure>
<h4 id="PFX-gt-PEM"><a href="#PFX-gt-PEM" class="headerlink" title="PFX -&gt; PEM"></a>PFX -&gt; PEM</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -in certificate.pfx -out certificate.cer -nodes</span><br></pre></td></tr></table></figure>
<h4 id="P7B-gt-PEM"><a href="#P7B-gt-PEM" class="headerlink" title="P7B -&gt; PEM"></a>P7B -&gt; PEM</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer</span><br></pre></td></tr></table></figure>
<h4 id="P7B-gt-PFX"><a href="#P7B-gt-PFX" class="headerlink" title="P7B -&gt; PFX"></a>P7B -&gt; PFX</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer</span><br><span class="line"></span><br><span class="line">openssl pkcs12 -export -in certificate.cer -inkey privateKey.key -out certificate.pfx -certfile CACert.cer</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> crypto </category>
            
        </categories>
        
        
        <tags>
            
            <tag> crypto </tag>
            
            <tag> cert </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL升级到5.7]]></title>
      <url>/2016/08/28/upgrade-mysql/</url>
      <content type="html"><![CDATA[<p>Step 1: Uninstall MySQL Packages<br>First uninstall all the MySQL packages installed on your server</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> yum remove mysql mysql-server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> yum list installed | grep mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> yum remove mysql-client mysql-server mysql-common mysql-devel</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rm -rf /var/lib/mysql/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rm -rf /etc/my.cnf</span></span><br></pre></td></tr></table></figure>
<p>Step 2: Romove MySQL Directory<br>Now we need to remove MySQL data directory from system which by default exists at /var/lib/mysql. If you didn’t find this, It may be changed to some other place, which you can find in my.cnf file with variable datadir. Delete the /var/lib/mysql directory from system but we prefer to rename it to keep a backup of existing files.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> mv /var/lib/mysql /var/lib/mysql_old_backup</span></span><br></pre></td></tr></table></figure>
<p>Step 3: Install MySQL Packages Again<br>After removing MySQL completely, install it again using yum package manager, It will re create mysql directory under /var/lib/.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> yum install mysql mysql-server</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> mysql_upgrade -uroot -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> mysql_secure_installation</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> we can <span class="built_in">set</span> it <span class="keyword">in</span> my.cnf file</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [mysqld]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> validate_password_policy=LOW</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://www.tecmint.com/install-latest-mysql-on-rhel-centos-and-fedora/" target="_blank" rel="noopener">How to Install Latest MySQL 5.7.9 on RHEL/CentOS 7/6/5 and Fedora</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> cenos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6 安装 nginx, MySQL, PHP]]></title>
      <url>/2016/08/28/install-nmp-on-centos6/</url>
      <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-6" target="_blank" rel="noopener">How To Install Linux, nginx, MySQL, PHP (LEMP) stack on CentOS 6</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> cenos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 查看磁盘空间使用]]></title>
      <url>/2016/08/18/view-disk-usage/</url>
      <content type="html"><![CDATA[<h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><h3 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://os.51cto.com/art/201012/240726_all.htm" target="_blank" rel="noopener">df、du、fdisk：Linux磁盘管理三板斧的使用心得</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ，Tomcat，Maven，Spring]]></title>
      <url>/2016/08/16/intellij-tomcat/</url>
      <content type="html"><![CDATA[<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1）IntelliJ-部署目录是不是-Tomcat-webapps-目录？"><a href="#1）IntelliJ-部署目录是不是-Tomcat-webapps-目录？" class="headerlink" title="1）IntelliJ 部署目录是不是 Tomcat webapps 目录？"></a>1）IntelliJ 部署目录是不是 Tomcat webapps 目录？</h4><p>IntelliJ 默认发布到 <code>${dir.to.idea.project}\YourWebApp\out\artifacts</code>，而不是 Tomcat webapps 目录。但是可以通过配置，将配置文件发现到 Tomcat 目录：</p>
<p><img src="http://i.stack.imgur.com/yGOph.png" alt="配置发布tomcat"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> server </tag>
            
            <tag> mac </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Supervisor 使用小结]]></title>
      <url>/2016/06/03/supervisor-usage/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>通过 pip 来安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install supervisor</span></span><br></pre></td></tr></table></figure>
<p>如果还没有 pip，运行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> curl -O http://python-distribute.org/distribute_setup.py</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> python distribute_setup.py</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo easy_install pip</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo pip install supervisor</span></span><br></pre></td></tr></table></figure>
<p>在 Mac OS 下，还可能通过 homebrew 安装：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> brew install distribute</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo easy_install pip</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo pip install supervisor</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 创建配置文件</span></span></span><br><span class="line"></span><br><span class="line">一旦安装完成，运行 `echo_supervisord_conf` 将打印一个标准的配置模板，可将其保存到下列配置路径中：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">/usr/local/share/etc/supervisord.conf</span><br><span class="line">/usr/local/share/supervisord.conf</span><br><span class="line">./supervisord.conf</span><br><span class="line">./etc/supervisord.conf</span><br><span class="line">/etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<p>将标准配置输出到某个路径下的命令是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> echo_supervisord_conf &gt; /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure>
<h3 id="运行-supervisor"><a href="#运行-supervisor" class="headerlink" title="运行 supervisor"></a>运行 supervisor</h3><p>supervisor 提供了2个运行程序：守护程序 <code>supervisord</code> 和客户端程序 <code>supervisorctl</code>。守护程序在后台运行，管理其它进程；客户端程序用于操作supervisor。</p>
<p>启动守护进程：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> supervisord </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> supervisord -c /path/to/supervisord.conf    <span class="comment"># 或指定配置文件</span></span></span><br></pre></td></tr></table></figure>
<h4 id="Mac-OS-配置-launchd"><a href="#Mac-OS-配置-launchd" class="headerlink" title="Mac OS 配置 launchd"></a>Mac OS 配置 <code>launchd</code></h4><p>添加文件 <code>/Library/LaunchDaemons/com.agendaless.supervisord.plist</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=\<span class="string">"1.0\" encoding=\"UTF-8\"?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">\</span>"<span class="attr">1.0</span>\"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>SuccessfulExit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.agendaless.supervisord<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/share/python/supervisord<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>-n<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/share/supervisor/supervisord.conf<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注册 plist<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> launchctl load /Library/LaunchDaemons/com.agendaless.supervisord.plist</span></span><br></pre></td></tr></table></figure></p>
<h3 id="使用-supervisorctl"><a href="#使用-supervisorctl" class="headerlink" title="使用 supervisorctl"></a>使用 supervisorctl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> supervisorctl -c /etc/supervisord.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> status    <span class="comment"># 查看程序状态</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> stop foo   <span class="comment"># 关闭 foo 程序</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> start foo  <span class="comment"># 启动 foo 程序</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> restart foo    <span class="comment"># 重启 foo 程序</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> reread    ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> update    ＃ 重启配置文件修改过的程序</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> tail foo stdout</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> tail -f foo</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> tail -f foo stderr</span></span><br></pre></td></tr></table></figure>
<p>通过命令行直接运行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo supervisorctl start foo</span></span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=0700                 ; socket 文件的 mode，默认是 0700</span><br><span class="line">;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid</span><br><span class="line"></span><br><span class="line">[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</span><br><span class="line">port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username=user              ; 登录管理后台的用户名</span><br><span class="line">;password=123               ; 登录管理后台的密码</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB</span><br><span class="line">logfile_backups=10           ; 日志文件保留备份数量默认 10</span><br><span class="line">loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ; pid 文件</span><br><span class="line">nodaemon=false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs=200                 ; 可以打开的进程数的最小值，默认 200</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord</span><br><span class="line"></span><br><span class="line">; 包含其他的配置文件</span><br><span class="line">[include]</span><br><span class="line">files = relative/directory/*.ini    ; 可以是 *.conf 或 *.ini</span><br></pre></td></tr></table></figure>
<p>当更新配置文件后，重新启动守护进程：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<h3 id="常用程序"><a href="#常用程序" class="headerlink" title="常用程序"></a>常用程序</h3><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[program:nginx]</span><br><span class="line">command=sudo /usr/local/sbin/nginx</span><br><span class="line">autostart=false</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure>
<h4 id="laravel-queue"><a href="#laravel-queue" class="headerlink" title="laravel queue"></a>laravel queue</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:laravel-worker]</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br><span class="line">command=php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=3 --daemon</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=forge</span><br><span class="line">numprocs=8</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/home/forge/app.com/worker.log</span><br></pre></td></tr></table></figure>
<h3 id="可能遇到的问题："><a href="#可能遇到的问题：" class="headerlink" title="可能遇到的问题："></a>可能遇到的问题：</h3><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><pre><code class="shell">* Starting Supervisor daemon manager...
Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.
For help, use /usr/bin/supervisord -h
   ...fail!
</code></pre>
<p>解决办法：<br>删除 supervisor.sock</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> server </tag>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 使用小结]]></title>
      <url>/2016/05/28/php-common-usage/</url>
      <content type="html"><![CDATA[<h3 id="PHP-环境信息"><a href="#PHP-环境信息" class="headerlink" title="PHP 环境信息"></a>PHP 环境信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i</span><br></pre></td></tr></table></figure>
<ul>
<li>查看配置文件位置：<code>php -i | grep php.ini</code></li>
<li>根据关键字查询配置：<code>php -i | grep memory</code></li>
</ul>
<p>### </p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> server </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COM 组件 AddRef/Release 用法]]></title>
      <url>/2016/05/24/com-addref-release-usage/</url>
      <content type="html"><![CDATA[<p><code>AddRef/Release</code> 是 COM 组件的垃圾回收机制。当请求一个接口时，调用<code>AddRef</code>增加引用计数；当使用完该接口时，调用<code>Release</code>减少计数，计数为0时，释放接口（释放接口对应的对象，内存如何操作？）。</p>
<h3 id="IUnknown"><a href="#IUnknown" class="headerlink" title="IUnknown"></a>IUnknown</h3><h3 id="QueryInterface-VS-QueryControl"><a href="#QueryInterface-VS-QueryControl" class="headerlink" title="QueryInterface VS QueryControl"></a>QueryInterface VS QueryControl</h3><h3 id="CoCreateInstance"><a href="#CoCreateInstance" class="headerlink" title="CoCreateInstance"></a>CoCreateInstance</h3><h3 id="CComQIPtr-VS-CComPtr"><a href="#CComQIPtr-VS-CComPtr" class="headerlink" title="CComQIPtr VS CComPtr"></a>CComQIPtr VS CComPtr</h3><p><em>附录</em>：</p>
<ul>
<li><a href="http://blog.csdn.net/yangshuangtao/article/details/51220110" target="_blank" rel="noopener">COM组件的AddRef和Release()方法使用</a>  </li>
<li><a href="https://support.microsoft.com/en-us/kb/104138" target="_blank" rel="noopener">Reference Counting Rules</a></li>
<li><a href="http://www.cnblogs.com/hibernate6/archive/2009/11/12/2522119.html" target="_blank" rel="noopener">COM :IUnknown接口QueryInterface函数介绍</a></li>
<li><a href="http://www.jellythink.com/archives/232" target="_blank" rel="noopener">COM编程——引用计数（1）</a></li>
<li><a href="http://www.jellythink.com/archives/242" target="_blank" rel="noopener">COM编程——引用计数（2）</a></li>
<li><a href="http://www.jellythink.com/archives/188" target="_blank" rel="noopener">COM编程——QueryInterface函数（1）</a></li>
<li><a href="http://www.jellythink.com/archives/198" target="_blank" rel="noopener">COM编程——QueryInterface函数（2）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vc++ </tag>
            
            <tag> com </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Amazon EC2 启用 root 登录]]></title>
      <url>/2016/03/06/amazon-ec2-enable-root-login/</url>
      <content type="html"><![CDATA[<p>在亚马逊安装完 EC2 云主机实例，当使用 root 账号登录时，会收到下面的信息：</p>
<blockquote>
<p>“Please login as the user “centos” rather than the user “root”.” Then the connection will close.</p>
</blockquote>
<p>如果你想启用root账号 SSH 登录，可以按下面的步骤：</p>
<ul>
<li>第一步：先登录云主机</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh -i privateKey.pem  root@ip-address</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二步：切换到 root 模式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo -s</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第三步：修改密钥验证文件<br>打开 <code>authorized_keys</code>，删除从开头到 <code>sh-rsa</code> 之前的内容。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /root/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第四步：修改ssh配置文件</li>
</ul>
<p>打开 <code>sshd_config</code>，注释掉 <code>PermitRootLogin yes</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/ssh/sshd_config</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第五步：重启 SSH 守护进程（demand）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl restart sshd</span></span><br></pre></td></tr></table></figure>
<p>现在，你可以重新以 root 用户登录实例了。</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装 Composer]]></title>
      <url>/2016/03/05/install-composer-linux/</url>
      <content type="html"><![CDATA[<p>Composer 是一个 PHP 依赖管理程序。可以按照下面的步骤以全局方式安装到 Linux 系统。</p>
<ul>
<li>第一步：下载 composer.phar</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp  </span><br><span class="line"></span><br><span class="line">curl -sS https://getcomposer.org/installer | php</span><br></pre></td></tr></table></figure>
<ul>
<li>第二步：移动到全局目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>
<p>现在能够以全局方式在命令行中执行 <code>composer</code></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> composer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript 编码常规]]></title>
      <url>/2015/07/03/javascript-code-conventions/</url>
      <content type="html"><![CDATA[<p>标题写成常规，非规范，是由于只要没有语法错误，如何写代码本身就是编码者的一个喜好而已，但是好的习惯有助于提高可读性，减少错误，尤其提高团队合作的效率。</p>
<p>下面内容搜集了业内顶级开发者的习惯，来源见底部附录。</p>
<h2 id="JavaScript-文件"><a href="#JavaScript-文件" class="headerlink" title="JavaScript 文件"></a>JavaScript 文件</h2><p>所有 javascript 文件根据依赖关系，按序放置在 <code>&lt;body&gt;</code> 结束标签前。<br>原因：  </p>
<ul>
<li>不会因为 javascript 文件的加载和解析延缓页面显示</li>
<li>防止标签在加载完成前被 js 代码调用。</li>
</ul>
<h2 id="缩进-Indentation"><a href="#缩进-Indentation" class="headerlink" title="缩进 Indentation"></a>缩进 Indentation</h2><ul>
<li>使用空格代替 <code>tab</code></li>
<li>缩进单位是2个空格</li>
</ul>
<h2 id="代码行"><a href="#代码行" class="headerlink" title="代码行"></a>代码行</h2><ul>
<li>每行不超过80字符</li>
<li>换行缩进8个空格</li>
</ul>
<h2 id="注释-Comment"><a href="#注释-Comment" class="headerlink" title="注释 Comment"></a>注释 Comment</h2><ul>
<li>尽量多地注释代码的思路、注意点等</li>
<li>修改代码时同步更新注释</li>
</ul>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul>
<li>使用26大写和小写字母<code>(A .. Z, a .. z)</code>，10个数字<code>(0 .. 9)</code>，下划线<code>(_)</code>。不要使用 <code>$ (dollar sign)</code> 或 <code>\ (backslash)</code></li>
<li>首尾不使用下划线</li>
<li>变量或方法遵守驼峰（camelCase）规则</li>
<li>构造函数遵守大写驼峰规则</li>
<li>全局变量遵守全大写规则</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MESSAGE_TYPE_BROADCAST = <span class="number">0</span>,    <span class="comment">// 全局变量</span></span><br><span class="line">    MESSAGE_TYPE_PERSON = <span class="number">1</span>,</span><br><span class="line">    MESSAGE_TYPE_GROUP = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">messageType, message</span>)</span>&#123;    <span class="comment">// 方法名</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> httpStatus,</span><br><span class="line">        sendResult;     <span class="comment">// 变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// detect message target by message type</span></span><br><span class="line">    ... </span><br><span class="line">    </span><br><span class="line">    httpStatus = httpRequest(message);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// handle result</span></span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> sendResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="变量-Variable"><a href="#变量-Variable" class="headerlink" title="变量 Variable"></a>变量 Variable</h2><ul>
<li>所有变量在使用前声明，<code>var</code> 应该是 <code>Function</code> 第一行语句</li>
<li>变量及其注释单独一行</li>
<li><p>变量名遵守驼峰（camelCase）规则</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentEntry, <span class="comment">// currently selected table entry</span></span><br><span class="line">level,        <span class="comment">// indentation level</span></span><br><span class="line">size;         <span class="comment">// size of table</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="方法-Function"><a href="#方法-Function" class="headerlink" title="方法 Function"></a>方法 Function</h2><ul>
<li>方法名遵守驼峰（camelCase）规则</li>
<li><p>立即执行的方法使用小括号封装</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = [], values = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> at = keys.indexOf(key);</span><br><span class="line">            <span class="keyword">if</span> (at &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> values[at];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> at = keys.indexOf(key);</span><br><span class="line">            <span class="keyword">if</span> (at &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                at = keys.length;</span><br><span class="line">            &#125;</span><br><span class="line">            keys[at] = key;</span><br><span class="line">            values[at] = value;</span><br><span class="line">        &#125;,</span><br><span class="line">        remove: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> at = keys.indexOf(key);</span><br><span class="line">            <span class="keyword">if</span> (at &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                keys.splice(at, <span class="number">1</span>);</span><br><span class="line">                values.splice(at, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="格式示例"><a href="#格式示例" class="headerlink" title="格式示例"></a>格式示例</h2><h3 id="if-语句（Statement）"><a href="#if-语句（Statement）" class="headerlink" title="if 语句（Statement）"></a>if 语句（Statement）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; update) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object) &#123;</span><br><span class="line">    <span class="keyword">if</span> (filter) &#123;</span><br><span class="line">        statements</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="do-语句"><a href="#do-语句" class="headerlink" title="do 语句"></a>do 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure>
<p>Unlike the other compound statements, the do statement always ends with a ; (semicolon).</p>
<h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line"><span class="keyword">case</span> expression:</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一组必须有结束代码：<code>break, return, or throw</code></p>
<h3 id="try-语句"><a href="#try-语句" class="headerlink" title="try 语句"></a>try 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     statements</span><br><span class="line"> &#125; <span class="keyword">catch</span> (variable) &#123;</span><br><span class="line">     statements</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     statements</span><br><span class="line"> &#125; <span class="keyword">catch</span> (variable) &#123;</span><br><span class="line">     statements</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><p><strong>不要使用</strong></p>
<h3 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h3><p><strong>不要使用</strong></p>
<h3 id="eval-语句"><a href="#eval-语句" class="headerlink" title="eval 语句"></a>eval 语句</h3><p><strong>不要使用</strong></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><em><a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html" target="_blank" rel="noopener">Javascript编程风格</a></em><br><em><a href="http://javascript.crockford.com/code.html" target="_blank" rel="noopener">Code Conventions for the JavaScript Programming Language</a></em><br><em><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank" rel="noopener">Google JavaScript Style Guide</a></em></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[url 编码常规]]></title>
      <url>/2015/07/03/url-code-conventions/</url>
      <content type="html"><![CDATA[<h2 id="MVC-框架支持的模式（Pattern）："><a href="#MVC-框架支持的模式（Pattern）：" class="headerlink" title="MVC 框架支持的模式（Pattern）："></a>MVC 框架支持的模式（Pattern）：</h2><ul>
<li>GET 模式： <code>fumujidi.com/index.php?controller=life&amp;action=books</code></li>
<li>Path Info 模式： <code>fumujidi.com/index.php/life/books.html</code></li>
<li>SEO 模式： <code>fumujidi.com/life/books.html</code><br>NODIR 模式： <code>fumujidi.com/life-books.html</code></li>
</ul>
<h2 id="我们使用："><a href="#我们使用：" class="headerlink" title="我们使用："></a>我们使用：</h2><ul>
<li><code>SEO</code> 模式</li>
<li>使用连字符规则，不使用大写</li>
<li>命名首选 <code>RESTful</code> 方式</li>
<li>每个尽量不要超过2个单词，多个单词使用 <code>hyphens（dash）</code> 格式 </li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> url </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php 编码常规]]></title>
      <url>/2015/07/03/php-code-conventions/</url>
      <content type="html"><![CDATA[<h2 id="MVC-框架命名规范"><a href="#MVC-框架命名规范" class="headerlink" title="MVC 框架命名规范"></a>MVC 框架命名规范</h2><h3 id="控制器（controller）"><a href="#控制器（controller）" class="headerlink" title="控制器（controller）"></a>控制器（controller）</h3><ul>
<li>类名遵守大写CamelCase，继承<code>RootController</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">RootController</span>   // 类后缀为 <span class="title">Controller</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>Action名、变量名、方法名采用小写camelCase： </li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loginAction</span> <span class="params">()</span> </span>&#123;...&#125;    <span class="comment">// Action 后缀为 Action</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Action 名与 url 的映射关系： </li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">high-school -&gt; highSchoolAction</span><br></pre></td></tr></table></figure>
<h3 id="模型（model）"><a href="#模型（model）" class="headerlink" title="模型（model）"></a>模型（model）</h3><ul>
<li>类名遵守大写CamelCase，继承<code>RootModel</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="title">entends</span> <span class="title">RootModel</span>    //类后缀为 <span class="title">Model</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>类方法和变量遵守小写camelCase</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateScore</span> <span class="params">()</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<h3 id="视图（view）"><a href="#视图（view）" class="headerlink" title="视图（view）"></a>视图（view）</h3><ul>
<li>视图模板（tpl）文件路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">views/&lt;Controller&gt;/&lt;action&gt;.tpl.php</span><br></pre></td></tr></table></figure>
<ul>
<li>目录名对应 <code>Controller</code>，首字母大写</li>
<li>文件名对应 <code>action</code>，首字母小写</li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bower usage]]></title>
      <url>/2015/06/11/bower-usage/</url>
      <content type="html"><![CDATA[<h4 id="1-安装-nodejs"><a href="#1-安装-nodejs" class="headerlink" title="1. 安装 nodejs"></a>1. 安装 <code>nodejs</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install nodejs</span></span><br></pre></td></tr></table></figure>
<p>NPM是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。</p>
<h4 id="2-安装-bower"><a href="#2-安装-bower" class="headerlink" title="2. 安装 bower"></a>2. 安装 <code>bower</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g bower</span></span><br></pre></td></tr></table></figure>
<h4 id="3-使用-bower-安装其它库"><a href="#3-使用-bower-安装其它库" class="headerlink" title="3. 使用 bower 安装其它库"></a>3. 使用 <code>bower</code> 安装其它库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bower install jquery</span></span><br></pre></td></tr></table></figure>
<p>NPM是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[osx配置xdebug]]></title>
      <url>/2015/06/04/osx-config-xdebug/</url>
      <content type="html"><![CDATA[<h2 id="一、xdebug-工作原理"><a href="#一、xdebug-工作原理" class="headerlink" title="一、xdebug 工作原理"></a>一、xdebug 工作原理</h2><p>引用 xdebug 的文档：<a href="http://xdebug.org/docs/remote" target="_blank" rel="noopener">Communication Set-up</a> </p>
<p>当远程调试时，xdebug 充当着客户端的角色，而 IDE 像是服务器，它会侦听调试端口，就是默认的9000，等待 xdebug 建立远程调试的连接。如下图所求：</p>
<p><img src="/images/posts/xdebug/dbgp-setup.gif" alt=""></p>
<ul>
<li>The IP of the server is 10.0.1.2 with HTTP on port 80</li>
<li>The IDE is on IP 10.0.1.42, so xdebug.remote_host is set to 10.0.1.42</li>
<li>The IDE listens on port 9000, so xdebug.remote_port is set to 9000</li>
<li>The HTTP request is started on the machine running the IDE</li>
<li>Xdebug connects to 10.0.1.42:9000</li>
<li>Debugging runs, HTTP Response provided</li>
</ul>
<p>当使用匿名IP时，是通过配置 xdebug.remote_connect_back，工作流程像下图所求：</p>
<p><img src="/images/posts/xdebug/dbgp-setup2.gif" alt=""></p>
<ul>
<li>The IP of the server is 10.0.1.2 with HTTP on port 80</li>
<li>The IDE is on an unknown IP, so xdebug.remote_connect_back is set to 1</li>
<li>The IDE listens on port 9000, so xdebug.remote_port is set to 9000</li>
<li>The HTTP request is made, Xdebug detects the IP addres from the HTTP headers</li>
<li>Xdebug connects to the detected IP (10.0.1.42) on port 9000</li>
<li>Debugging runs, HTTP Response provided</li>
</ul>
<p>当有了侦听端口的机制，那他们是如何配合起来工作的呢？</p>
<p>HTTP Debug Sessions</p>
<p>Xdebug 是依靠 cookies 来跟踪来自浏览器的请求. 工作流程是这样:</p>
<ol>
<li>使用GET或POST的请求参数：<code>XDEBUG_SESSION_START=name</code>， 当有请求参数时会忽略 <code>XDEBUG_SESSION</code> cookies 的值。</li>
<li>设置请求的cookies值 <code>XDEBUG_SESSION</code></li>
</ol>
<p>当xdebug检测到 <code>XDEBUG_SESSION_START</code> 或 <code>XDEBUG_SESSION</code>时，会尝试连接调用的客户端</p>
<p>当xdebug检测到 <code>XDEBUG_SESSION_STOP</code> 时，会终止调试。</p>
<h2 id="二、配置-xdebug"><a href="#二、配置-xdebug" class="headerlink" title="二、配置 xdebug"></a>二、配置 xdebug</h2><p>首先安装 xdebug 模块</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pecl install xdebug</span><br></pre></td></tr></table></figure>
<p>配置 <code>php.ini</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[xdebug]</span></span><br><span class="line"><span class="attr">zend_extension</span>=/usr/local/Cellar/php56/<span class="number">5.6</span>.<span class="number">8</span>/lib/php/extensions/<span class="literal">no</span>-debug-non-zts-<span class="number">20131226</span>/xdebug.so</span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.remote_autostart=1 </span><br><span class="line">xdebug.remote_host=127.0.0.1</span><br><span class="line">xdebug.remote_port=9001</span><br><span class="line">xdebug.idekey = "PHPSTORM"</span><br></pre></td></tr></table></figure>
<p>更多配置参数请查看：<strong><a href="https://xdebug.org/docs/all_settings" target="_blank" rel="noopener">XDebug 参数列表</a></strong></p>
<p><em>如何知道配置成功了？</em></p>
<p>通过 <code>phpinfo()</code>，如何看到启动的模块中包含 xdebug 信息，且配置如上面所示，则表示成功了。</p>
<h2 id="四、配置IDE"><a href="#四、配置IDE" class="headerlink" title="四、配置IDE"></a>四、配置IDE</h2><p>这里使用 phpstrom。</p>
<ol>
<li><p>配置 phpstorm 的侦听端口：</p>
<p>  <img src="/images/posts/xdebug/phpstorm-debug-settings.png" alt=""></p>
</li>
<li><p>启动侦听端口</p>
<p> <img src="/images/posts/xdebug/phpstorm-bug-phone.png" alt=""></p>
</li>
<li><p>（可选）安装浏览器插件，设置idekey<br>如果你使用不同的IDE调试，每个IDE的key是不一样的，你可以通过安装浏览器插件，让它配置key并插入cookies，比如chrome插件xdebug helper</p>
<p> <img src="/images/posts/xdebug/xdebug-browser-extension.png" alt=""></p>
</li>
</ol>
<p><em>如何知道IDE配置成功了？</em></p>
<p>通过 terminal，执行 <code>sudo lsof -n -i4TCP:9001 | grep LISTEN</code>，如果看到IDE在侦听该端口，则表示成功了。</p>
<h2 id="五、开始调试"><a href="#五、开始调试" class="headerlink" title="五、开始调试"></a>五、开始调试</h2><p>设置断点，然后浏览器打开要调试的url。</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> osx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[osx安装php扩展]]></title>
      <url>/2015/06/03/osx-install-php-extension/</url>
      <content type="html"><![CDATA[<h2 id="一、安装xcdoe命令行"><a href="#一、安装xcdoe命令行" class="headerlink" title="一、安装xcdoe命令行"></a>一、安装xcdoe命令行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<h2 id="二、通过PECL来安装PHP扩展"><a href="#二、通过PECL来安装PHP扩展" class="headerlink" title="二、通过PECL来安装PHP扩展"></a>二、通过PECL来安装PHP扩展</h2><p>在 <code>/usr/lib/php</code> 目录下有个 <code>install-pear-nozlib.phar</code> 文件（怎么来的？），通过它首先安装 PECL 管理器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php install-pear-nozlib.phar</span><br></pre></td></tr></table></figure>
<h2 id="三、获取所需的扩展"><a href="#三、获取所需的扩展" class="headerlink" title="三、获取所需的扩展"></a>三、获取所需的扩展</h2><p>比如，我们安装 xdebug</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pecl install xdebug</span><br></pre></td></tr></table></figure>
<h2 id="四、更新-php-配置文件"><a href="#四、更新-php-配置文件" class="headerlink" title="四、更新 php 配置文件"></a>四、更新 php 配置文件</h2><p>打开 <code>php.ini</code>，配置新获取的扩展（略）</p>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> extension </tag>
            
            <tag> osx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[osx 常用命令]]></title>
      <url>/2015/06/02/osx-commans/</url>
      <content type="html"><![CDATA[<h2 id="一、网络"><a href="#一、网络" class="headerlink" title="一、网络"></a>一、网络</h2><h3 id="查看谁在侦听端口"><a href="#查看谁在侦听端口" class="headerlink" title="查看谁在侦听端口"></a>查看谁在侦听端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -n -i4TCP:<span class="variable">$PORT</span> | grep LISTEN</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://en.wikipedia.org/wiki/Lsof" target="_blank" rel="noopener">lsof</a> is a command meaning “list open files”, which is used in many Unix-like systems to report a list of all open files and the processes that opened them.</p>
</blockquote>
<h3 id="修改-Host"><a href="#修改-Host" class="headerlink" title="修改 Host"></a>修改 Host</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>
<p>注意 <code>::1</code> 的写法：</p>
<blockquote>
<p>如果地址中出现连续的0，则可以用“::”号来压缩(称为零压缩)，进一步简化IP v6地址表示。例如，地址FE80:0:0:0:2AA:FF:FE9A:4CA2 可以压缩成FE80::2AA:FF:FE9A:4CA2；FF02:0:0:0:0:0:0:2 可以压缩成 FF02::2。零压缩只能用于压缩冒号十六进制地址中一个连续的16位块，不能压缩部分16位信息块，例如，不能将FF02:30:0:0:0:0:0:5 表示成 FF02:3::5。用 :: 表示0位的数量用(8-n)×16公式来计算，其中n为地址中的16位块的数量。例如，在地址FF02::2中，被压缩了96=(8-2)×16个0。零压缩只能在给定地址中使用一次，否则，就无法确定每个双冒号 (::)实例所表示的 0位数量。</p>
<p>特殊地址。IP v6中有两个特殊地址：</p>
<ul>
<li>未指定地址(0:0:0:0:0:0:0:0 或::)：仅用于指出某个地址不存在，它等价于 IP v4 未指定地址0.0.0.0。未指定地址通常作为源地址来验证暂定地址的惟一性，但不会用作目的地址。</li>
<li>环回地址(0:0:0:0:0:0:0:1或::1)：用来标识环回接口，允许节点自发自收，它等价于IP v4环回地址 127.0.0.1。</li>
</ul>
</blockquote>
<h3 id="统计代码行数"><a href="#统计代码行数" class="headerlink" title="统计代码行数"></a>统计代码行数</h3><ul>
<li>列出每个文件的行数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -or -name <span class="string">"*.h"</span> -or -name <span class="string">"*.xib"</span> -or -name <span class="string">"*.c"</span> |xargs wc -l</span><br></pre></td></tr></table></figure>
<ul>
<li>列出代码行数总和 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -or -name <span class="string">"*.h"</span> -or -name <span class="string">"*.xib"</span> -or -name <span class="string">"*.c"</span> |xargs grep -v <span class="string">"^$"</span>|wc -l</span><br></pre></td></tr></table></figure>
<h3 id="查看正在运行的进程"><a href="#查看正在运行的进程" class="headerlink" title="查看正在运行的进程"></a>查看正在运行的进程</h3><ul>
<li>通过进程名查看</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep <span class="string">"Application Name"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>按 CPU 排序</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -o cpu</span><br></pre></td></tr></table></figure>
<ul>
<li>按内存使用排序</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -o rsize</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> osx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> osx </tag>
            
            <tag> command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Chromium Extension Event]]></title>
      <url>/2015/05/23/chromium-create-extension-event/</url>
      <content type="html"><![CDATA[<h2 id="一、创建事件名"><a href="#一、创建事件名" class="headerlink" title="一、创建事件名"></a>一、创建事件名</h2><ul>
<li>打开 <code>chrome/browser/extensions/event_names.h</code></li>
</ul>
<p>添加</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> event_names &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span> kOnLoginByCertComplete[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>打开 <code>chrome/browser/extensions/event_names.cc</code></li>
</ul>
<p>添加</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> event_names &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">const</span> <span class="keyword">char</span> kOnLoginByCertComplete[] = <span class="string">"wintrust.onLoginByCertComplete"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、添加事件的描述"><a href="#二、添加事件的描述" class="headerlink" title="二、添加事件的描述"></a>二、添加事件的描述</h2><ul>
<li>打开 <code>chrome\common\extensions\api\wintrust.json</code></li>
</ul>
<p>添加</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="string">"namespace"</span>: <span class="string">"wintrust"</span>,</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">+    <span class="string">"events"</span>: [&#123;</span><br><span class="line">+      <span class="string">"name"</span>: <span class="string">"onLoginByCertComplete"</span>,</span><br><span class="line">+      <span class="string">"description"</span>: <span class="string">"Fired when login vpn by cert."</span>,</span><br><span class="line">+      <span class="string">"type"</span>: <span class="string">"function"</span>,</span><br><span class="line">+      <span class="string">"parameters"</span>: [&#123;<span class="string">"name"</span>: <span class="string">"success"</span>, <span class="string">"type"</span>:<span class="string">"boolean"</span>&#125;]</span><br><span class="line">+    &#125;]</span><br><span class="line"></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<h2 id="三、添加触发扩展事件的事件"><a href="#三、添加触发扩展事件的事件" class="headerlink" title="三、添加触发扩展事件的事件"></a>三、添加触发扩展事件的事件</h2><ul>
<li>打开 <code>content\public\browser\notification_types.h</code></li>
</ul>
<p>添加</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> NotificationType &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">+<span class="comment">// 证书登录的结果</span></span><br><span class="line">+NOTIFICATION_LOGIN_BY_CERT_COMPLETE,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、绑定第三步事件的回调"><a href="#四、绑定第三步事件的回调" class="headerlink" title="四、绑定第三步事件的回调"></a>四、绑定<strong>第三步</strong>事件的回调</h2><ul>
<li>打开 <code>chrome/browser/extensions/browser_event_router.cc</code></li>
</ul>
<p>添加绑定</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BrowserEventRouter::BrowserEventRouter(Profile* profile)</span><br><span class="line">    : profile_(profile) &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  registrar_.Add(<span class="keyword">this</span>,</span><br><span class="line">                 content::NOTIFICATION_LOGIN_BY_CERT_COMPLETE,</span><br><span class="line">                 content::Source&lt;Profile&gt;(profile_));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现回调</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> BrowserEventRouter::Observe(<span class="keyword">int</span> type,</span><br><span class="line">                                 <span class="keyword">const</span> content::NotificationSource&amp; source,</span><br><span class="line">                                 <span class="keyword">const</span> content::NotificationDetails&amp; details) &#123;</span><br><span class="line">  ...</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == content::NOTIFICATION_LOGIN_BY_CERT_COMPLETE) &#123;</span><br><span class="line">    scoped_ptr&lt;ListValue&gt; args(<span class="keyword">new</span> ListValue());</span><br><span class="line">    <span class="keyword">bool</span> value = *(content::Details&lt;<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&gt;(details).ptr()) == <span class="string">"true"</span>;</span><br><span class="line">    args-&gt;Append(Value::CreateBooleanValue(value));</span><br><span class="line">    DispatchEvent(profile_, events::kOnLoginByCertComplete, args.Pass(), EventRouter::USER_GESTURE_UNKNOWN);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    NOTREACHED();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五、实现触发消息"><a href="#五、实现触发消息" class="headerlink" title="五、实现触发消息"></a>五、实现触发消息</h2><p>在某个合适和需要的位置以下列的代码触发 <code>NOTIFICATION_LOGIN_BY_CERT_COMPLETE</code> 事件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+  <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">detail</span><span class="params">(<span class="string">"false"</span>)</span></span>;</span><br><span class="line">+  content::NotificationService::current()-&gt;Notify(</span><br><span class="line">+      content::NOTIFICATION_LOGIN_BY_CERT_COMPLETE,</span><br><span class="line">+      content::Source&lt;Profile&gt;(browser_-&gt;profile()),</span><br><span class="line">+      content::Details&lt;<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&gt;(&amp;detail));</span><br></pre></td></tr></table></figure>
<h2 id="六、测试新事件"><a href="#六、测试新事件" class="headerlink" title="六、测试新事件"></a>六、测试新事件</h2><ol>
<li><p>在扩展的 <code>manifest</code> 里首先声明对 <code>wintrust</code> 命名空间的权限</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"*://*/*"</span>,</span><br><span class="line">    <span class="string">"wintrust"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>绑定事件回调函数</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome.wintrust.onLoginByCertComplete.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">success</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Login result is: '</span>, success);  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>触发<strong>第五步</strong>定义的条件，使事件发生。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Chromium Extension API]]></title>
      <url>/2015/05/22/chromium-create-extension-api/</url>
      <content type="html"><![CDATA[<h2 id="一、添加新接口描述文件"><a href="#一、添加新接口描述文件" class="headerlink" title="一、添加新接口描述文件"></a>一、添加新接口描述文件</h2><ol>
<li><p>新建描述文件</p>
<p> 创建 <code>chrome\common\extensions\api\wintrust.json</code></p>
<p> 添加接口描述代码：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// 获取浏览器模块目录</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"versionDirectory"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"function"</span>,</span><br><span class="line">        <span class="string">"parameters"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"function"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"callback"</span>,</span><br><span class="line">            <span class="string">"parameters"</span>: [&#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="string">"name"</span>: <span class="string">"path"</span></span><br><span class="line">            &#125;]</span><br><span class="line">         &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加新文件到 <code>GYP</code></p>
<p> 打开 <code>src\chrome\common\extensions\api\api.gyp</code>, 添加：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">'schema_files'</span>: [</span><br><span class="line">  ...</span><br><span class="line">+  # 新接口	  </span><br><span class="line">+  <span class="string">'wintrust.json'</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加新文件到 <code>grd</code> </p>
<p> 打开 <code>src\chrome\common\extensions_api_resources.grd</code>，添加</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">grit</span> <span class="attr">latest_public_release</span>=<span class="string">"0"</span> <span class="attr">current_release</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">outputs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">filename</span>=<span class="string">"grit/extensions_api_resources.h"</span> <span class="attr">type</span>=<span class="string">"rc_header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">emit</span> <span class="attr">emit_type</span>=<span class="string">'prepend'</span>&gt;</span><span class="tag">&lt;/<span class="name">emit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">filename</span>=<span class="string">"extensions_api_resources.pak"</span> <span class="attr">type</span>=<span class="string">"data_package"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">filename</span>=<span class="string">"extensions_api_resources.rc"</span> <span class="attr">type</span>=<span class="string">"rc_all"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">outputs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">release</span> <span class="attr">seq</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">	  ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"IDR_EXTENSION_API_JSON_WINTRUST"</span> <span class="attr">file</span>=<span class="string">"extensions\api\wintrust.json"</span> <span class="attr">type</span>=<span class="string">"BINDATA"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">release</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">grit</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="二、添加新接口头文件和实现"><a href="#二、添加新接口头文件和实现" class="headerlink" title="二、添加新接口头文件和实现"></a>二、添加新接口头文件和实现</h2><ol>
<li><p>新建头文件和实现文件</p>
<p> 创建 <code>src\chrome\browser\extensions\api\wintrust\wintrust_api.h</code> 和 <code>src\chrome\browser\extensions\api\wintrust\wintrust_api.cc</code></p>
</li>
<li><p>添加新文件到 <code>GYP</code></p>
<p> 打开 <code>src\chrome\chrome_browser_extensions.gypi</code>, 添加：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'sources'</span>: [</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">   +   # win-trust 添加的插件接口</span><br><span class="line">   +    <span class="string">'browser/extensions/api/wintrust/wintrust_api.h'</span>,</span><br><span class="line">   +    <span class="string">'browser/extensions/api/wintrust/wintrust_api.cc'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现 <code>wintrust_api.h</code></p>
</li>
</ol>
<pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"chrome/browser/extensions/extension_function.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> extensions &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">WintrustVersionDirectoryFunction</span> :</span> <span class="keyword">public</span> SyncExtensionFunction &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    WintrustVersionDirectoryFunction();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">RunImpl</span><span class="params">()</span> OVERRIDE</span>;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~WintrustVersionDirectoryFunction()&#123;&#125;;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    DECLARE_EXTENSION_FUNCTION(<span class="string">"wintrust.versionDirectory"</span>, WINTRUST_VERSIONDIRECTORY);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><ol>
<li>实现 <code>wintrust_api.cc</code></li>
</ol>
<pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"chrome/browser/extensions/api/wintrust/wintrust_api.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base/file_util.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base/path_service.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"chrome/browser/profiles/profile.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> extensions&#123;</span><br><span class="line">  </span><br><span class="line">  WintrustVersionDirectoryFunction::WintrustVersionDirectoryFunction()&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">bool</span> WintrustVersionDirectoryFunction::RunImpl() &#123;</span><br><span class="line">    base::FilePath path;</span><br><span class="line">    PathService::Get(base::DIR_MODULE, &amp;path);</span><br><span class="line"></span><br><span class="line">    scoped_ptr&lt;base::StringValue&gt; value (base::Value::CreateStringValue(path.value().c_str()));</span><br><span class="line">    </span><br><span class="line">    SetResult(value.release());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><h2 id="三、重新生成项目（sln）"><a href="#三、重新生成项目（sln）" class="headerlink" title="三、重新生成项目（sln）"></a>三、重新生成项目（sln）</h2><p>执行 <code>python build\gyp_chromium</code></p>
<h2 id="四、为新接口定义C-常量"><a href="#四、为新接口定义C-常量" class="headerlink" title="四、为新接口定义C++常量"></a>四、为新接口定义C++常量</h2><ul>
<li>打开 <code>src\chrome\browser\extensions\extension_function_histogram_value.h</code></li>
</ul>
<p>添加下面代码, 转换示例： <code>Example: &quot;tabs.create&quot; -&gt; TABS_CREATE</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> HistogramValue &#123;</span><br><span class="line">  UNKNOWN = <span class="number">0</span>,</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">+  <span class="comment">// 赢达信客户端添加的接口</span></span><br><span class="line">+  WINTRUST_VERSIONDIRECTORY,</span><br><span class="line"></span><br><span class="line">  ENUM_BOUNDARY <span class="comment">// Last entry: Add new entries above.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="五、注册新接口类（class）"><a href="#五、注册新接口类（class）" class="headerlink" title="五、注册新接口类（class）"></a>五、注册新接口类（class）</h2><ul>
<li>打开 <code>src\chrome\browser\extensions\extension_function_registry.cc</code></li>
</ul>
<p>添加下面代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 赢达信客户端接口</span><br><span class="line">#include &quot;chrome/browser/extensions/api/wintrust/wintrust_api.h&quot;</span><br><span class="line"></span><br><span class="line">void ExtensionFunctionRegistry::ResetFunctions() &#123;</span><br><span class="line">#if defined(ENABLE_EXTENSIONS)</span><br><span class="line"></span><br><span class="line">  // Register all functions here.</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  // 赢达信客户端定义的接口</span><br><span class="line">  RegisterFunction&lt;extensions::WintrustVersionDirectoryFunction&gt;();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  // Generated APIs</span><br><span class="line">  extensions::api::GeneratedFunctionRegistry::RegisterAll(this);</span><br><span class="line">  </span><br><span class="line">#endif  // defined(ENABLE_EXTENSIONS)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="六、定义新接口的访问权限"><a href="#六、定义新接口的访问权限" class="headerlink" title="六、定义新接口的访问权限"></a>六、定义新接口的访问权限</h2><ol>
<li><p>定义该接口可用于的扩展程序类型：</p>
<p> 打开 <code>src\chrome\common\extensions\api\_permission_features.json</code></p>
<p> 添加下面代码， <code>extension_types</code> 定义了哪些类型的扩展可以使用新接口。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="comment">// found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">+  <span class="comment">// 赢达信的接口</span></span><br><span class="line">+   <span class="string">"wintrust"</span>: &#123;</span><br><span class="line">+    <span class="string">"channel"</span>: <span class="string">"stable"</span>,</span><br><span class="line">+    <span class="string">"extension_types"</span>: [<span class="string">"extension"</span>, <span class="string">"packaged_app"</span>,<span class="string">"platform_app"</span>,<span class="string">"hosted_app"</span>]</span><br><span class="line">+  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义权限的键名，该常量也显示到 <code>manifest permission</code> 中</p>
<p> 打开 <code>src\chrome\common\extensions\permissions\api_permission.h</code>，添加</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> ID &#123;</span><br><span class="line">	<span class="comment">// Error codes.</span></span><br><span class="line">	kInvalid = <span class="number">-2</span>,</span><br><span class="line">	kUnknown = <span class="number">-1</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Real permissions.</span></span><br><span class="line">	...</span><br><span class="line">+	kWintrust,</span><br><span class="line">	kEnumBoundary</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现该键名</p>
<p> 打开 <code>src\chrome\common\extensions\permissions\chrome_api_permissions.cc</code>，添加</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;APIPermissionInfo*&gt; ChromeAPIPermissions::GetAllPermissions()</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">PermissionRegistration</span> &#123;</span></span><br><span class="line">	APIPermission::ID id;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* name;</span><br><span class="line">	<span class="keyword">int</span> flags;</span><br><span class="line">	<span class="keyword">int</span> l10n_message_id;</span><br><span class="line">	PermissionMessage::ID message_id;</span><br><span class="line">	APIPermissionInfo::APIPermissionConstructor constructor;</span><br><span class="line">	&#125; PermissionsToRegister[] = &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Register extension permissions.</span></span><br><span class="line">	...</span><br><span class="line">	&#123; APIPermission::kWintrust, <span class="string">"wintrust"</span> &#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="七、测试新接口"><a href="#七、测试新接口" class="headerlink" title="七、测试新接口"></a>七、测试新接口</h2><ol>
<li><p>创建扩展  <code>manifest</code> 文件</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"WinTrust API"</span>,</span><br><span class="line">  <span class="string">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.1"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Test new extenslion api"</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="string">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="string">"default_icon"</span>: &#123;                    </span><br><span class="line">      <span class="string">"19"</span>: <span class="string">"img/icon19.png"</span>,           </span><br><span class="line">      <span class="string">"38"</span>: <span class="string">"img/icon38.png"</span>            </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"default_title"</span>: <span class="string">"VPN"</span>, </span><br><span class="line">    <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span>        </span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="string">"background"</span>: &#123;</span><br><span class="line">    <span class="string">"page"</span>: <span class="string">"background.html"</span></span><br><span class="line">  &#125;,  </span><br><span class="line">  </span><br><span class="line">  <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"*://*/*"</span>,</span><br><span class="line">    <span class="string">"wintrust"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建扩展  <code>manifest</code> 文件</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome.wintrust.versionDirectory(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Test reust:'</span>, path);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS 安装 nginx, php, mysql]]></title>
      <url>/2015/05/07/mac-install-nginx-php-mysql/</url>
      <content type="html"><![CDATA[<h2 id="常用位置："><a href="#常用位置：" class="headerlink" title="常用位置："></a>常用位置：</h2><ol>
<li><p>nginx: </p>
<ul>
<li>安装位置：<code>/usr/local/Cellar/nginx</code></li>
<li>log: <code>/usr/local/var/log/nginx/error.log</code></li>
<li>配置位置：<code>/usr/local/etc/nginx</code></li>
<li>document root: <code>/var/www</code></li>
</ul>
</li>
<li><p>php</p>
<ul>
<li>安装位置：<code>/usr/local/Cellar/php56/5.6.8/</code></li>
<li>配置位置：<code>/usr/local/etc/php/5.6/php.ini</code></li>
</ul>
</li>
<li><p>mysql</p>
<ul>
<li>查看server信息：<code>mysqld --help --verbose</code></li>
<li>安装位置：<code>/usr/local/Cellar/mysql</code> </li>
</ul>
</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>引用一篇非常详细的博客：<a href="http://blog.frd.mn/install-nginx-php-fpm-mysql-and-phpmyadmin-on-os-x-mavericks-using-homebrew/" target="_blank" rel="noopener">Install Nginx, PHP-FPM, MySQL and phpMyAdmin on OS X Mavericks or Yosemite</a></p>
<h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>
<p>Check for any conflicts or problems (If you have confilcts, sort them out before you continue with this guide):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew doctor</span><br></pre></td></tr></table></figure>
<p>Update and upgrade its formulas in case you already had Homebrew installed before:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade</span><br></pre></td></tr></table></figure>
<h3 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/dupes</span><br><span class="line">brew tap homebrew/php</span><br></pre></td></tr></table></figure>
<p>Now install it with the following arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --without-apache --with-fpm --with-mysql php56</span><br></pre></td></tr></table></figure>
<p>Setup PHP CLI binary</p>
<p>If you want to use the PHP command line binary, you need to update the $PATH environment variable of your shell profile:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># If you use Bash    </span><br><span class="line">echo &apos;export PATH=&quot;/usr/local/sbin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">. ~/.bash_profile</span><br><span class="line"></span><br><span class="line"># If you use ZSH</span><br><span class="line">echo &apos;export PATH=&quot;/usr/local/sbin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">. ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>Setup auto start</p>
<p>Create a folder for our LaunchAgents and symlink the start/stop service:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/Library/LaunchAgents</span><br><span class="line">ln -sfv /usr/local/opt/php56/homebrew.mxcl.php56.plist ~/Library/LaunchAgents/</span><br></pre></td></tr></table></figure>
<p>And start PHP-FPM:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist</span><br></pre></td></tr></table></figure>
<p>Make sure PHP-FPM is listening on port 9000:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -Pni4 | grep LISTEN | grep php</span><br></pre></td></tr></table></figure>
<p>The output should look something like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php-fpm   69659  frdmn    6u  IPv4 0x8d8ebe505a1ae01      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm   69660  frdmn    0u  IPv4 0x8d8ebe505a1ae01      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm   69661  frdmn    0u  IPv4 0x8d8ebe505a1ae01      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm   69662  frdmn    0u  IPv4 0x8d8ebe505a1ae01      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br></pre></td></tr></table></figure>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>Next step is to install MySQL:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>
<p>Setup auto start</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents</span><br></pre></td></tr></table></figure>
<p>And start the database server:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>Test connection</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>
<h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><p>Install autoconf, which is needed for the installation of phpMyAdmin:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autoconf</span><br></pre></td></tr></table></figure>
<p>Set $PHP_AUTOCONF:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># If you use Bash</span><br><span class="line">echo &apos;PHP_AUTOCONF=&quot;&apos;$(which autoconf)&apos;&quot;&apos; &gt;&gt; ~/.bash_profile &amp;&amp; . ~/.bash_profile</span><br><span class="line"># If you use ZSH</span><br><span class="line">echo &apos;PHP_AUTOCONF=&quot;&apos;$(which autoconf)&apos;&quot;&apos; &gt;&gt; ~/.zshrc &amp;&amp; . ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>Let’s start with the installation of phpMyAdmin:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install phpmyadmin</span><br></pre></td></tr></table></figure>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Install the default Nginx with:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure>
<p>Setup auto start</p>
<p>Since we want to use port 80 have to start the Nginx process as root:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -v /usr/local/opt/nginx/*.plist /Library/LaunchDaemons/</span><br><span class="line">sudo chown root:wheel /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure>
<p>Test web server</p>
<p>Start Nginx for the first with:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure>
<p>Stop Nginx again:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure>
<p>Make alias:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">alias nginx.start=&apos;sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.nginx.plist&apos;</span><br><span class="line">alias nginx.stop=&apos;sudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.nginx.plist&apos;</span><br><span class="line">alias nginx.restart=&apos;nginx.stop &amp;&amp; nginx.start&apos;</span><br><span class="line">alias php-fpm.start=&quot;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist&quot;</span><br><span class="line">alias php-fpm.stop=&quot;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist&quot;</span><br><span class="line">alias php-fpm.restart=&apos;php-fpm.stop &amp;&amp; php-fpm.start&apos;</span><br><span class="line">alias mysql.start=&quot;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&quot;</span><br><span class="line">alias mysql.stop=&quot;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&quot;</span><br><span class="line">alias mysql.restart=&apos;mysql.stop &amp;&amp; mysql.start&apos;</span><br><span class="line">alias nginx.logs.error=&apos;tail -250f /usr/local/etc/nginx/logs/error.log&apos;</span><br><span class="line">alias nginx.logs.access=&apos;tail -250f /usr/local/etc/nginx/logs/access.log&apos;</span><br><span class="line">alias nginx.logs.default.access=&apos;tail -250f /usr/local/etc/nginx/logs/default.access.log&apos;</span><br><span class="line">alias nginx.logs.default-ssl.access=&apos;tail -250f /usr/local/etc/nginx/logs/default-ssl.access.log&apos;</span><br><span class="line">alias nginx.logs.phpmyadmin.error=&apos;tail -250f /usr/local/etc/nginx/logs/phpmyadmin.error.log&apos;</span><br><span class="line">alias nginx.logs.phpmyadmin.access=&apos;tail -250f /usr/local/etc/nginx/logs/phpmyadmin.access.log&apos;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> mac </tag>
            
            <tag> nginx </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[发布到 App Store]]></title>
      <url>/2015/02/15/deliver-to-app-store/</url>
      <content type="html"><![CDATA[<h2 id="一-一些名词"><a href="#一-一些名词" class="headerlink" title="一 一些名词"></a>一 一些名词</h2><h3 id="App-ID：应用的标识"><a href="#App-ID：应用的标识" class="headerlink" title="App ID：应用的标识"></a>App ID：应用的标识</h3><ul>
<li><p>格式：上由2部分组成： <code>&lt;Bundle Seed ID&gt;.&lt;Bundle Identifier&gt;</code>，例如，<code>ABCDE12345.com.foocompany.appname</code>:</p>
<ul>
<li><code>ABCDE12345</code> 是 Bundle Seed ID (苹果生成)</li>
<li><code>com.foocompany.appname</code> is the App ID’s Bundle Identifier and needs to be the same as your app’s Bundle Identifier</li>
</ul>
</li>
<li><p>分类： 通配符方式（wildcard） VS 显示定义（explicit）</p>
<ul>
<li>通配符方式： 一般的ID都应该用此方式，理由是一个 Wildcard App ID 可用于编译和安装多个 App。注意星要放到最后<br><code>Example App ID: ABCDE12345.com.foocompany.*</code></li>
<li>显示定义：只能用于一个 App，但是，如果你的应用需要诸如 In App Purchase and Apple Push Notification service 的功能，你就必须使用显示定义<br><code>Example App ID: ABCDE12345.com.foocompany.appname</code></li>
</ul>
</li>
</ul>
<p>扩展阅读：<a href="https://developer.apple.com/library/ios/qa/qa1713/_index.html" target="_blank" rel="noopener">Q:  When should I use a wildcard App ID vs. an explicit App ID?</a> </p>
<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/AppStoreDistributionTutorial/CreatingYourTeamProvisioningProfile/CreatingYourTeamProvisioningProfile.html#//apple_ref/doc/uid/TP40013839-CH33-SW1" target="_blank" rel="noopener">Provisioning profile</a>：配置文件</li>
</ul>
<p>开始 ios 开发时，最大的不适就是复杂的测试发布限制，你不能简单的编译个 app 放到任一设备中运行。比如符合 Provisioning profile 的设定。A picture worth a thousand words，先看下面的图：</p>
<p><img src="/images/posts/itunes_connect/teamprovisioningprofile_2x.png" alt=""></p>
<p>一个 Provisioning profile 设置了 APP ID，证书和设备。当你使用某个 Provisioning profile 签名应用时，其实是使用它包含的证书来签名，并且签证对应的 APP ID，并只允许安装到被包含其中的设备中。</p>
<h3 id="Certification：证书"><a href="#Certification：证书" class="headerlink" title="Certification：证书"></a>Certification：证书</h3><p><img src="/images/posts/itunes_connect/certificates_2x.png" alt=""></p>
<p>如上图所示，证书的公钥保存在苹果的用户中心，公私钥对保存到开发者 keychain 中。你必须有私钥才可以签名应用。</p>
<ul>
<li>Development certification：开发证书</li>
<li>Adhoc certification：真机部署测试证书</li>
<li>Distribution certification：发布证书 </li>
</ul>
<h3 id="Deployment-Target：部署目标"><a href="#Deployment-Target：部署目标" class="headerlink" title="Deployment Target：部署目标"></a>Deployment Target：部署目标</h3><p>面向的 ios 版本</p>
<h3 id="iTunes-Connect"><a href="#iTunes-Connect" class="headerlink" title="iTunes Connect"></a>iTunes Connect</h3><p>This is the version number shown in the App Store; This must be a pure version number like1.2.3</p>
<h3 id="Bundle-Version-CFBundleVersion"><a href="#Bundle-Version-CFBundleVersion" class="headerlink" title="Bundle Version (CFBundleVersion)"></a>Bundle Version (CFBundleVersion)</h3><p>This doesn’t need to be a pure version number. This can be something like 12345 or 1.2.3 (Build 12345AB). This is shown in the About window for Mac OS X apps for example and is often more a “Build Number” than a “Version Number”. 真实版本号，用来判断版本信息的。</p>
<h3 id="Bundle-Version-String-CFBundleShortVersionString"><a href="#Bundle-Version-String-CFBundleShortVersionString" class="headerlink" title="Bundle Version String (CFBundleShortVersionString)"></a>Bundle Version String (CFBundleShortVersionString)</h3><p>This value is used as the “real” version number. This must be the same string as used for the version in iTunes Connect. 面向用户市场的束的版本字符串–用户看到的版本号；</p>
<h2 id="二-流程"><a href="#二-流程" class="headerlink" title="二 流程"></a>二 流程</h2><h3 id="下载安装证书"><a href="#下载安装证书" class="headerlink" title="下载安装证书"></a>下载安装证书</h3><h3 id="配置编译参数"><a href="#配置编译参数" class="headerlink" title="配置编译参数"></a>配置编译参数</h3><ul>
<li>设置 Deployment Target (部署目标)<br>  首选最新的 IOS 版本作为发布版本</li>
</ul>
<h3 id="填写-iTunes-Connect-信息"><a href="#填写-iTunes-Connect-信息" class="headerlink" title="填写 iTunes Connect 信息"></a>填写 iTunes Connect 信息</h3><p>打开<a href="https://itunesconnect.apple.com" target="_blank" rel="noopener">iTunes Connect</a>，填表：  </p>
<ol>
<li><p>第一组：</p>
<ul>
<li>选择语言</li>
<li>应用名称</li>
<li>skunumber：一个用来识别app的特殊字符串。</li>
<li>bundleID</li>
</ul>
</li>
<li><p>第二组</p>
<ul>
<li>版本</li>
<li>版权</li>
<li>软件首类别</li>
<li>次类别</li>
<li>评级划分</li>
<li>内容描述</li>
<li>关键字</li>
<li>技术支持url，以及下面的技术负责人的名字，姓，email，手机号码</li>
</ul>
</li>
</ol>
<p>填写完成后如下图所示：<br><img src="/images/posts/itunes_connect/itunes_connect.png" alt=""></p>
<h3 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h3><h4 id="使用-xcode-直接上传："><a href="#使用-xcode-直接上传：" class="headerlink" title="使用 xcode 直接上传："></a>使用 xcode 直接上传：</h4><ol>
<li>检查代码，去除 log，debug 等相关的信息</li>
<li>清理项目（clean project）</li>
<li>生成包文件（archive）</li>
<li>发送包文件（submit）</li>
<li>选择发布证书（注意要使用 Agent 账号上传）</li>
<li>发布成功</li>
</ol>
<h4 id="使用-application-loader-上传"><a href="#使用-application-loader-上传" class="headerlink" title="使用 application loader 上传"></a>使用 application loader 上传</h4><p>以后补充</p>
<h3 id="itunes-connect-关联上传的包文件"><a href="#itunes-connect-关联上传的包文件" class="headerlink" title="itunes connect 关联上传的包文件"></a>itunes connect 关联上传的包文件</h3><p>上传成功之后，在 Build 分类下，可以关联此包。</p>
<h3 id="提交审核（submit-for-review）"><a href="#提交审核（submit-for-review）" class="headerlink" title="提交审核（submit for review）"></a>提交审核（submit for review）</h3><p>以后补充</p>
]]></content>
      
        <categories>
            
            <category> ios </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
            <tag> app </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Grit - Chromium 国际化（2）]]></title>
      <url>/2015/01/31/chromium-grit-2/</url>
      <content type="html"><![CDATA[<p>经过上一篇的分析，虽然对工作原理有了简单认识，但实际修改或添加支持多语言的文本还是蛮麻烦。所以这里提供一个小工具，简化这个流程。</p>
<p>下面说一下工具的使用：</p>
<h3 id="1-准备修改前的文件"><a href="#1-准备修改前的文件" class="headerlink" title="1. 准备修改前的文件"></a>1. 准备修改前的文件</h3><ul>
<li><p>修改前的默认语言文件（grd）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chromium_strings.grd</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改前的翻译文件（xtb）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chromium_strings_zh-CN.xtb</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>将2个文件放到工具的 <code>old</code> 目录中。 </p>
<blockquote>
<p>注意如果有的 grd 文件中引用了其它资源，需要将这些资源一并放到 <code>old</code> 目录中</p>
</blockquote>
<h3 id="2-准备新的默认语言文件（grd）"><a href="#2-准备新的默认语言文件（grd）" class="headerlink" title="2. 准备新的默认语言文件（grd）"></a>2. 准备新的默认语言文件（grd）</h3><p>根据需要，修改旧的默认语言文件，最好将新加的文本放到文档的最后，以便和 chromium 原有的文本作区分。修改完成后的将文件放到 <code>new</code> 目录中。 这里，我将修改好的 <code>chromium_strings.grd</code> 放置到 <code>new</code> 目录。</p>
<blockquote>
<p>注意如果有的 grd 文件中引用了其它资源，需要将这些资源一并放到 <code>old</code> 目录中</p>
</blockquote>
<h3 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a>3. 执行</h3><p>准备好的目录结构：</p>
<p><img src="/images/posts/grit/grit-tool-structure.jpg" alt=""></p>
<p>运行根目录的 <code>run.bat</code>，它会根据上面的三个文件生成新的翻译文件 <code>xtb</code>。</p>
<p><em>run.bat</em></p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> handling chromium_strings.grd...</span><br><span class="line">python3 "generate_translation_bundle.py" "--old_grd" "old/chromium_strings.grd" "--old_xtb" "old/chromium_strings_zh-CN.xtb" "--new_grd" "new/chromium_strings.grd" "-o" "new/chromium_strings_zh-CN.xtb"</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">0</span> <span class="built_in">ECHO</span> Success!</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> handling generated_resources.grd...</span><br><span class="line">python3 "generate_translation_bundle.py" "--old_grd" "old/generated_resources.grd" "--old_xtb" "old/generated_resources_zh-CN.xtb" "--new_grd" "new/generated_resources.grd" "-o" "new/generated_resources_zh-CN.xtb"</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">0</span> <span class="built_in">ECHO</span> Success!</span><br><span class="line"></span><br><span class="line"><span class="built_in">cmd</span> /k</span><br></pre></td></tr></table></figure>
<p>新生成的 xtb 实际是 xml 格式，将包含三种类型的结点（node）：</p>
<ul>
<li>未修改：该类结点和原结点格式一样</li>
<li>修改：该类结点是修改了原文档内容，为了方便，生成文件会包含原翻译，用作参考。此类结点包含属性 <code>TODO=&quot;NEED_UPDATE&quot;</code></li>
<li>新添加：该类结点是新添加的文本，为了方便，生成文件会包含默认语言（grd）的文本。此类结点包含属性 <code>TODO=&quot;NEED_TRANSLATE&quot;</code></li>
</ul>
<p>如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE translationbundle&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">translationbundle</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">translation</span> <span class="attr">id</span>=<span class="string">"6970811910055250180"</span>&gt;</span>正在更新设备...<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">translation</span> <span class="attr">TODO</span>=<span class="string">"NEED-UPDATE"</span> <span class="attr">id</span>=<span class="string">"4109624392265076313"</span>&gt;</span>Chromium<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">translation</span> <span class="attr">TODO</span>=<span class="string">"NEED-TRANSLATE"</span> <span class="attr">desc</span>=<span class="string">"Select the theme."</span> <span class="attr">id</span>=<span class="string">"233572109030077464"</span>&gt;</span></span><br><span class="line">    Select Theme</span><br><span class="line">  <span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">translationbundle</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>附： <a href="https://github.com/chengxuebin/chromium-grit" target="_blank" rel="noopener">Chromium-grit 工具</a></p>
<h3 id="提醒："><a href="#提醒：" class="headerlink" title="提醒："></a><span class="text-danger">提醒：</span></h3><ul>
<li>保证 <code>old</code> 和 <code>new</code> 中的 grd 文件行数对应，因为是按照行号对应查找旧翻译文的，否则编译时出现错误</li>
<li>如果修改 zh-CN 以外的语言，需要手动修改生成的 xtb 文件中 <code>lang=&quot;zh-CN&quot;</code> 属性</li>
</ul>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grit </tag>
            
            <tag> chromium </tag>
            
            <tag> i18n </tag>
            
            <tag> l10n </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Grit - Chromium 国际化（1）]]></title>
      <url>/2015/01/29/chromium-grit/</url>
      <content type="html"><![CDATA[<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>chrome_string 是关于国际化的项目（Project）， 这是一个只包含 <code>build step</code> 定义的空项目， <code>build step</code> 中定义了该项目编译时执行的程序或命令。在VS2010下编辑build step 可以用文本编辑软件直接打开 <code>chrome_strings.vcxproj</code>。</p>
<p>chrome_string 会在 chrome 编译之前编译，它将国际化定义的文件转换成资源文件（.pak）和 C++ 头文件，C++ 头文件将作为源代码在编译 chrome 时一起被编译。</p>
<p>语言包编译过程</p>
<p><img src="/images/posts/grit/grit.jpg" alt=""></p>
<h2 id="Grit-工具"><a href="#Grit-工具" class="headerlink" title="Grit 工具"></a>Grit 工具</h2><p>grit（Google Resource and Internationalization Tool）是一个python开源工具，用于支持多国际化，位于 <code>src/tools/grit</code> 目录下。<code>chrome_string</code> 编译时会执行 <code>grit.py</code> 可以，然后由grit工具将grd和xtb文件编译成pak资源文件。</p>
<h2 id="国际化文件分类"><a href="#国际化文件分类" class="headerlink" title="国际化文件分类"></a>国际化文件分类</h2><ul>
<li><code>generated_resources.grd</code>：该文件定义了大部分国际化字符串定义，包括按钮的文字，窗口的标题等。</li>
<li><code>chromium_string.grd</code>：文件包括 generated_resources.grd 之外的国际化字符串定义，其中包含“安装、卸载”、“关于”等内容，把它独立出来主要是因为要和谷歌chrome 区别开来。</li>
<li><code>google_chrome_strings.grd</code>：用于编译 chrome 时使用，是和 chromium_string.grd 相对应的一个文件。</li>
<li><code>locale_settings.grd</code>：该文件定义了多语言的样式配置，例如窗口的大小，某些控件的尺寸，样式可以根据语言的不同而变化。</li>
</ul>
<h2 id="国际化文件的格式"><a href="#国际化文件的格式" class="headerlink" title="国际化文件的格式"></a>国际化文件的格式</h2><h3 id="grd-文件格式"><a href="#grd-文件格式" class="headerlink" title="grd 文件格式"></a>grd 文件格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;grit base_dir=&quot;.&quot; latest_public_release=&quot;0&quot; current_release=&quot;1&quot;</span><br><span class="line">      source_lang_id=&quot;en&quot; enc_check=&quot;m?l&quot;&gt;</span><br><span class="line">  &lt;outputs&gt;</span><br><span class="line">    &lt;output filename=&quot;grit/google_chrome_strings.h&quot; type=&quot;rc_header&quot;&gt;</span><br><span class="line">      &lt;emit emit_type=&apos;prepend&apos;&gt;&lt;/emit&gt;</span><br><span class="line">    &lt;/output&gt;</span><br><span class="line">    &lt;output filename=&quot;google_chrome_strings_zh-CN.pak&quot; type=&quot;data_package&quot; lang=&quot;zh-CN&quot; /&gt;</span><br><span class="line">    …</span><br><span class="line">  &lt;/outputs&gt;</span><br><span class="line">  &lt;translations&gt;</span><br><span class="line">    &lt;file path=&quot;resources/google_chrome_strings_zh-CN.xtb&quot; lang=&quot;zh-CN&quot; /&gt;</span><br><span class="line">    …</span><br><span class="line">  &lt;/translations&gt;</span><br><span class="line">  &lt;release seq=&quot;1&quot; allow_pseudo=&quot;false&quot;&gt;</span><br><span class="line">    &lt;messages fallback_to_english=&quot;true&quot;&gt;</span><br><span class="line">      &lt;message name=&quot;IDS_PRODUCT_NAME&quot; desc=&quot;The Chrome application name&quot;&gt;</span><br><span class="line">        Google Chrome</span><br><span class="line">      &lt;/message&gt;</span><br><span class="line">      …</span><br><span class="line">    &lt;/messages&gt;</span><br><span class="line">  &lt;/release&gt;</span><br><span class="line">&lt;/grit&gt;</span><br></pre></td></tr></table></figure>
<p>grd 是xml的格式，它有三个部分： <code>outputs</code>、<code>translations</code>、<code>release</code>。</p>
<ul>
<li><code>outputs</code> 中定义编译出的C++头文件的位置和语言资源文件的位置，默认是在 <code>src/build/Debug</code> 或 <code>Release/obj/global_intermediate/chrome/</code></li>
<li><code>translates</code> 中定义了多语言的定义文件的位置，每一种支持的语言都应该有一个翻译文件，这些文件将作为输入。</li>
<li><code>release</code> 中的 messages 定义的是默认语言的定义，当程序 找不到合适的语言显示时，将使用默认语言中的定义。<br>  message 的属性如下：<ul>
<li><code>name</code>：标识一个字符串的变量名</li>
<li><code>desc</code>：该变量的介绍</li>
<li><code>translateable</code>：是否使用翻译，默认true</li>
<li><code>use_name_for_id</code>：是否使用name作为翻译的id标识。默认是false，翻译文件（xtb）中的id使用转换后的数字做映射；如果true，则使用 name 的值来和 grd 文件中的记录来映射。</li>
</ul>
</li>
</ul>
<h3 id="xtb-文件格式"><a href="#xtb-文件格式" class="headerlink" title="xtb 文件格式"></a>xtb 文件格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE translationbundle&gt;</span><br><span class="line">&lt;translationbundle lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;translation id=&quot;6676384891291319759&quot;&gt;访问互联网&lt;/translation&gt;</span><br><span class="line">…</span><br><span class="line">&lt;/translationbundle&gt;</span><br></pre></td></tr></table></figure>
<p>xtb 是多语言的翻译文件，也是xml格式，每种语言对应一个xtb文件。<code>&lt;translateion/&gt;</code> 结点中的 id 的数字对应于 grd 文件中 <code>&lt;message/&gt;</code> 中的 <code>name</code> 或 <code>content</code> 值，注意默认不是根据 <code>name</code>，而是根据内容来生成 <code>id</code>值，这样的好处是可以去除冗余的文字。 转换的过程定义在 <code>/src/tools/grit/external/FP.py</code> 中。</p>
<h2 id="国际化自定义步骤"><a href="#国际化自定义步骤" class="headerlink" title="国际化自定义步骤"></a>国际化自定义步骤</h2><ol>
<li>打开 grd 文件，添加 message 结点，或找到要修改的 message 结点；</li>
<li>根据 message 的内容运行grit 工具，得到翻译文件 xtb 的id值；</li>
<li>打开要修改的 xtb 文件，每种语言对应一个xtb 文件， 新建 translation 结点，id为第2步中计算得到的 id 值，结点内容为对应语言的翻译， 如果不知道如何计算 id，也可以 将 message 结点的属性use_name_for_id 设置成true，则 translate 的id 对应为 message 的name值；</li>
<li>重新编译 chrome_string 项目，生成新的头文件和资源包。</li>
</ol>
<p>改动文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chromium_strings.grd</span><br><span class="line">generated_resource.grd </span><br><span class="line">chromium_strings_zh-CN.xtb </span><br><span class="line">generated_resources_zh-CN.xtb</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grit </tag>
            
            <tag> chromium </tag>
            
            <tag> i18n </tag>
            
            <tag> l10n </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的正则表达式]]></title>
      <url>/2015/01/25/the-most-used-regular-expression/</url>
      <content type="html"><![CDATA[<h2 id="常用表达式"><a href="#常用表达式" class="headerlink" title="常用表达式"></a>常用表达式</h2><h3 id="1-中文字符"><a href="#1-中文字符" class="headerlink" title="1. 中文字符"></a>1. 中文字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[\u4e00-\u9fa5]/</span><br></pre></td></tr></table></figure>
<h3 id="2-邮箱"><a href="#2-邮箱" class="headerlink" title="2. 邮箱"></a>2. 邮箱</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^([a-z0<span class="number">-9</span>\+_\-]+)(\.[a-z0<span class="number">-9</span>\+_\-]+)*@([_a-z0<span class="number">-9</span>]+\.)+[a-z]&#123;<span class="number">2</span>,<span class="number">5</span>&#125;$/</span><br></pre></td></tr></table></figure>
<h3 id="3-多个单词或"><a href="#3-多个单词或" class="headerlink" title="3. 多个单词或"></a>3. 多个单词或</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(?:apple|banna)/</span><br></pre></td></tr></table></figure>
<h3 id="4-不包含某个单词"><a href="#4-不包含某个单词" class="headerlink" title="4. 不包含某个单词"></a>4. 不包含某个单词</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^((?!hede).)*$/</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><a href="http://fineonly.com/solutions/regex-exclude-a-string" target="_blank" rel="noopener">Exclude a String</a></li>
<li><a href="http://www.vaikan.com/regular-expression-to-match-string-not-containing-a-word/" target="_blank" rel="noopener">正则表达式里字符串”不包含”匹配技巧</a></li>
<li><a href="http://stackoverflow.com/questions/2078915/a-regular-expression-to-exclude-a-word-string" target="_blank" rel="noopener">A regular expression to exclude a word/string</a></li>
</ul>
<h3 id="5-神奇的全部-ASCII-字符"><a href="#5-神奇的全部-ASCII-字符" class="headerlink" title="5. 神奇的全部 ASCII 字符"></a>5. 神奇的全部 ASCII 字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/[ -~]/</span><br><span class="line">/[\x20-\x7E]/</span><br></pre></td></tr></table></figure>
<p><strong>解释</strong>：<a href="http://www.asciitable.com/" target="_blank" rel="noopener">ASCII 表</a>中大于空格（0x20），小于~（0x7E）的字符为全部的<strong>打印</strong>字符。</p>
<h3 id="6-处理-HTML-标签"><a href="#6-处理-HTML-标签" class="headerlink" title="6. 处理 HTML 标签"></a>6. 处理 HTML 标签</h3><p>参考：</p>
<ul>
<li><a href="http://haacked.com/archive/2004/10/25/usingregularexpressionstomatchhtml.aspx/" target="_blank" rel="noopener">Using a Regular Expression to Match HTML</a></li>
<li><a href="http://www.pagecolumn.com/tool/all_about_html_tags.htm" target="_blank" rel="noopener">All about HTML tags</a></li>
</ul>
<h3 id="7-使用空格分隔中文和英文单词"><a href="#7-使用空格分隔中文和英文单词" class="headerlink" title="7. 使用空格分隔中文和英文单词"></a>7. 使用空格分隔中文和英文单词</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">([\x&#123;4E00&#125;-\x&#123;9FA5&#125;])([a-z0-9@#&amp;;=_\[\$\%\^\*\-\+\(\/]+)</span><br><span class="line"></span><br><span class="line">$<span class="number">1</span> $<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><table>
<thead>
<tr>
<th style="text-align:center">Modifier</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:left">Perform case-insensitive matching</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:left">Perform a global match (find all matches rather than stopping after the first match)</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:left">Perform multiline matching</td>
</tr>
</tbody>
</table>
<p>收集了一些总结的很好的文章：</p>
<ul>
<li><a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="noopener">最全的常用正则表达式大全</a></li>
<li><a href="http://www.regular-expressions.info/lookaround.html" target="_blank" rel="noopener">regular-expressions.info</a></li>
<li><a href="http://regexr.com/30npe" target="_blank" rel="noopener">RegExr</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> program </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regexp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 常用命令]]></title>
      <url>/2015/01/25/linux-commands/</url>
      <content type="html"><![CDATA[<h2 id="1-打开服务器的被禁用（blocked）端口（port）"><a href="#1-打开服务器的被禁用（blocked）端口（port）" class="headerlink" title="1 打开服务器的被禁用（blocked）端口（port）"></a>1 打开服务器的被禁用（blocked）端口（port）</h2><ul>
<li>启用被 iptables 禁用的 80 端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>
<ul>
<li>将上面的配置作为规则保存到 iptables，以便服务器重启后，能再次生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/service iptables save</span><br></pre></td></tr></table></figure>
<h2 id="2-通过-systemctl-启动服务"><a href="#2-通过-systemctl-启动服务" class="headerlink" title="2 通过 systemctl 启动服务"></a>2 通过 systemctl 启动服务</h2><ul>
<li>启动、停止、重启</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start nginx.service</span></span><br><span class="line"><span class="comment"># systemctl stop nginx.service</span></span><br><span class="line"><span class="comment"># systemctl restart nginx.service</span></span><br></pre></td></tr></table></figure>
<p>除了 nginx.service, 常用的服务还有：php-fpm.service, mysqld.service</p>
<ul>
<li>设置开机自启</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl enable nginx.service</span></span><br></pre></td></tr></table></figure>
<h2 id="3-查看进程信息"><a href="#3-查看进程信息" class="headerlink" title="3 查看进程信息"></a>3 查看进程信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ps -aux | grep 关键字</span></span><br></pre></td></tr></table></figure>
<h2 id="4-查看进程的安装位置"><a href="#4-查看进程的安装位置" class="headerlink" title="4 查看进程的安装位置"></a>4 查看进程的安装位置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep tomcat</span><br></pre></td></tr></table></figure>
<h2 id="5-sudo-保留系统环境"><a href="#5-sudo-保留系统环境" class="headerlink" title="5 sudo 保留系统环境"></a>5 sudo 保留系统环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -E env</span><br></pre></td></tr></table></figure>
<h2 id="6-查找最大目录或文件"><a href="#6-查找最大目录或文件" class="headerlink" title="6 查找最大目录或文件"></a>6 查找最大目录或文件</h2><h3 id="1）查找最大目录"><a href="#1）查找最大目录" class="headerlink" title="1）查找最大目录"></a>1）查找最大目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -a | sort -n -r | head -n 5</span><br></pre></td></tr></table></figure>
<h3 id="2）查找最大文件"><a href="#2）查找最大文件" class="headerlink" title="2）查找最大文件"></a>2）查找最大文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -type f -exec du -Sh &#123;&#125; + | sort -rh | head -n 5</span><br></pre></td></tr></table></figure>
<p><a href="https://www.tecmint.com/find-top-large-directories-and-files-sizes-in-linux/" target="_blank" rel="noopener">参考</a></p>
<h2 id="7-挂载"><a href="#7-挂载" class="headerlink" title="7 挂载"></a>7 挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mount -t vboxsf 源媒体 目标路径</span></span><br></pre></td></tr></table></figure>
<h2 id="8-查找文件包含字符"><a href="#8-查找文件包含字符" class="headerlink" title="8 查找文件包含字符"></a>8 查找文件包含字符</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> This will only search through those files <span class="built_in">which</span> have .c or .h extensions:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> grep --include=\*.&#123;c,h&#125; -rnw <span class="string">'/path/to/somewhere/'</span> -e <span class="string">"pattern"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This will exclude searching all the files ending with .o extension:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> grep --exclude=*.o -rnw <span class="string">'/path/to/somewhere/'</span> -e <span class="string">"pattern"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">For directories it<span class="string">'s possible to exclude a particular directory(ies) through --exclude-dir parameter. For example, this will exclude the dirs dir1/, dir2/ and all of them matching *.dst/:</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> grep --exclude-dir=&#123;dir1,dir2,*.dst&#125; -rnw <span class="string">'/path/to/somewhere/'</span> -e <span class="string">"pattern"</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的快捷键]]></title>
      <url>/2015/01/10/development-shortcuts/</url>
      <content type="html"><![CDATA[<h2 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h2><ul>
<li><code>Ctrl</code> + <code>J</code> ： 智能提示</li>
<li><code>Ctrl</code> + <code>,</code> ： Display Navigate-To dialog box，大爱</li>
<li><code>Ctrl</code> + <code>]</code> ： Go to matching brace in source file</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>]</code> : Extend selection to nexst brace</li>
<li><code>Ctrl</code> + <code>Alt</code> + <code>F</code>： 搜索文件，尤其是整个项目</li>
<li><code>F3</code> / <code>Shift</code> + <code>F3</code> : Find next / find previous</li>
<li><code>Ctrl</code> + <code>W</code> ： Select current word</li>
<li><code>Ctrl</code> + <code>l</code> ： Delete current line or selection of lines to and add to clipboard</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>Enter</code> ：Enter blank line below cursor</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>u</code> ： Make uppercase</li>
<li><code>Ctrl</code> + <code>u</code> ： Make lowercase (reverse upercase)</li>
<li><code>Ctrl</code> + <code>k</code> + <code>c</code> : Comment selected text</li>
<li><code>Ctrl</code> + <code>k</code> + <code>u</code> : Uncomment selected text</li>
<li><code>Ctrl</code> + <code>k</code> + <code>d</code> : Format document to code formatting settings</li>
<li><code>Ctrl</code> + <code>k</code> + <code>f</code> : Format selection to code formatting settings</li>
<li><code>F5</code> : Start debugging</li>
<li><code>Ctrl</code> + <code>F5</code> : Bypass debugger</li>
<li><code>F10</code> ： Debug / step over</li>
<li><code>Shift</code> + <code>F11</code> ： Debug / step out</li>
<li><code>Ctrl</code> + <code>F10</code> ： Debug / run to cursor</li>
</ul>
<h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><ul>
<li><code>Ctrl</code> + <code>W</code> ： 关闭 Tab</li>
<li><code>Ctrl</code> + <code>T</code> ： 新建 Tab</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>T</code>： 恢复上一个关闭的 Tab</li>
<li><code>Ctrl</code> + <code>L</code> ： 定位到 Location Bar</li>
<li><code>Ctrl</code> + <code>F</code> ： 搜索页面</li>
<li><code>F12</code> ： 开发者模式</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>F</code> ： 搜索全部资源</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>Del</code> ： 清除缓存</li>
</ul>
<h2 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h2><ul>
<li><code>Ctrl</code> + <code>Space</code> ： 智能提示</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>R</code> ： 搜索全部资源</li>
</ul>
<h2 id="UE"><a href="#UE" class="headerlink" title="UE"></a>UE</h2><ul>
<li><code>Ctrl</code> + <code>R</code> ： 替换</li>
</ul>
<h2 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h2><ul>
<li><code>Command</code> + <code>Control</code> + <code>⬆</code> ： 上移一行</li>
<li><code>Command</code> + <code>Control</code> + <code>⬇</code> ： 下移一行</li>
<li><code>Control</code> + <code>Shift</code> + <code>⬆或⬇</code> ： 多行编辑</li>
</ul>
<h2 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h2><h3 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h3><ul>
<li><img src="/images/posts/shortcuts/menusym-command.gif" alt=""> : Command/Apple Key (like Control on a PC) Also written as Cmd</li>
<li><img src="/images/posts/shortcuts/menusym-option.gif" alt=""> : Option (like Alt on a PC)</li>
<li><img src="/images/posts/shortcuts/menusym-shift.gif" alt=""> : Shift</li>
<li><img src="/images/posts/shortcuts/menusym-control.gif" alt=""> : Control (Control-click = Right-click)</li>
<li><img src="/images/posts/shortcuts/menusym-tab.gif" alt=""> : Tab</li>
<li><img src="/images/posts/shortcuts/menusym-return.gif" alt=""> : Return</li>
<li><img src="/images/posts/shortcuts/menusym-enter.gif" alt=""> : Enter (on Number Pad)</li>
<li><img src="/images/posts/shortcuts/menusym-eject.gif" alt=""> : Eject</li>
<li><img src="/images/posts/shortcuts/menusym-escape.gif" alt=""> : Escape</li>
<li><img src="/images/posts/shortcuts/menusym-pageup.gif" alt=""> : Page Up</li>
<li><img src="/images/posts/shortcuts/menusym-pagedown.gif" alt=""> : Page Down</li>
<li><img src="/images/posts/shortcuts/menusym-home.gif" alt=""> : Home</li>
<li><img src="/images/posts/shortcuts/menusym-end.gif" alt=""> : End</li>
<li><img src="/images/posts/shortcuts/menusym-arrowkeys.gif" alt=""> : Arrow Keys</li>
<li><img src="/images/posts/shortcuts/menusym-delete.gif" alt=""> : Delete Left (like Backspace on a PC)</li>
<li><img src="/images/posts/shortcuts/menusym-delete-forward.gif" alt=""> : Delete Right (also called Forward Delete)</li>
</ul>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li><code>Cmd</code> + <code>Shift</code> + <code>3</code> ： Take picture of the entire screen</li>
<li><code>Cmd</code> + <code>Shift</code> + <code>4</code> ： Take picture of a selected area</li>
<li><code>Cmd</code> + <code>Shift</code> + <code>4</code> -&gt; <code>Space</code>： Cmd-Shift-4, then press Spacebar, then Click on the window/object</li>
<li><code>Cmd</code> + <code>Opt</code> + <code>Esc</code> ： Force Quit (displayed list of apps)</li>
</ul>
<h2 id="XCode"><a href="#XCode" class="headerlink" title="XCode"></a>XCode</h2><ul>
<li><code>Esc</code> ： 智能提示</li>
</ul>
<h2 id="PHPStorm"><a href="#PHPStorm" class="headerlink" title="PHPStorm"></a>PHPStorm</h2><ul>
<li><code>SHIFT</code> + <code>SHIFT</code> ： 智能查找</li>
<li><code>SHIFT</code> + <code>F6</code> ： 智能提示</li>
<li><code>CTRL</code> + <code>D</code> ： 复制当前行或复制选中内容</li>
<li><code>CTRL</code> + <code>Y</code> ： 删除当前行或选中内容所涉及的行</li>
<li><code>CTRL</code> + <code>R</code> ： 查找替换</li>
<li><code>ALT</code> + <code>W</code> ： 选中单词</li>
<li><code>ALT</code> + <code>上下箭头</code> ： 向上向下函数间切换</li>
<li><code>CTRL</code> + <code>SHIFT</code> + <code>V</code> ： 显示最近粘贴板中的内容，选择后内容插入到光标位置</li>
<li><code>CTRL</code> + <code>Q</code> ： 显示说明文档</li>
<li><code>CTRL</code> + <code>B</code> ： 跳转到声明处</li>
<li><code>CTRL</code> + <code>N</code> ： 类名查找</li>
<li><code>CTRL</code> + <code>SHIFT</code> + <code>N</code> ： 文件名查找</li>
<li><code>CTRL</code> + <code>SHIFT</code> + <code>ALT</code> + <code>N</code> ： 函数名查找</li>
<li><code>ALT</code> + <code>SHIFT</code> + <code>C</code> ： 快速回顾最近修改的项目</li>
<li><code>CTRL</code> + <code>SHIFT</code> + <code>I</code> ： 查看变量初始化的值</li>
<li><code>CTRL</code> + <code>ALT</code> + <code>T</code> ： 插入环绕代码</li>
<li><code>CTRL</code> + <code>ALT</code> + <code>F12</code> ： 跳转至当前文件所在磁盘上的位置</li>
<li><code>ALT</code> + <code>左右键</code> ： 标签切换</li>
<li><code>CTRL</code> + <code>F12</code> ： 在当前类文件中快速查找方法</li>
</ul>
]]></content>
      
        <categories>
            
            <category> computer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shortcut </tag>
            
            <tag> chrome </tag>
            
            <tag> mac </tag>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置 Zend Studio, Xdebug]]></title>
      <url>/2014/12/01/zend-studio-xdebug-setting-up/</url>
      <content type="html"><![CDATA[<p>开发 PHP 过程中，经常不是一蹴而就的，某些疑难问题需要像本地程序一样调试。本文记录如何配置 Zend Studio 和 Xdebug，实现本地调试或远程（Remote）调试。</p>
<p>说到本地或远程调试，就要涉及到 PHP 的2种运行方式：CLI 和 CGI。</p>
<h3 id="TIPS：什么是-CLI-和-CGI？"><a href="#TIPS：什么是-CLI-和-CGI？" class="headerlink" title="TIPS：什么是 CLI 和 CGI？"></a>TIPS：什么是 CLI 和 CGI？</h3><ul>
<li>CLI（Command Line Interface），即“命令行界面”，是指在命令行界面的运行方式。比如在本地执行一个 PHP 脚本。</li>
<li>CGI（Common Gateway Interface），即“通用网关接口”，是 HTTP 服务器和脚本解释器之间的接口。通过这个通用接口，可以忽略 HTTP 服务器或脚本解释器的技术限制。HTTP 服务器常用的就是 Apache，Lighttpd，Nginx，Tomcat等，脚本解释器常用的有 PHP，ASP，JSP 等解释器。</li>
</ul>
<h2 id="安装-Xdebug"><a href="#安装-Xdebug" class="headerlink" title="安装 Xdebug"></a>安装 Xdebug</h2><h3 id="A-安装到远程服务器"><a href="#A-安装到远程服务器" class="headerlink" title="A. 安装到远程服务器"></a>A. 安装到远程服务器</h3><ol>
<li><p>下载 Xdebug 到远程服务器</p>
</li>
<li><p>修改 php.ini<br> 打开 php.ini，添加 Xdebug 扩展（dll）的路径</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Linux and Mac OS: zend_extension=&quot;/usr/local/php/modules/xdebug.so&quot;</span><br><span class="line">Windows: zend_extension=&quot;&lt;path to .dll file&gt;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Xdebug<br> 在 php.ini 中，添加配置，其中关键的几个是：<code>remote_enable</code>，<code>remote_autostart</code>，<code>remote_port</code>，<code>remote_handler</code> </p>
<pre><code class="ini">xdebug.auto_trace= "On"
xdebug.collect_params= "On"
xdebug.collect_return= "On"
xdebug.trace_output_dir="/path/to/log/dir/xdebug/trace"
xdebug.profiler_enable= "true"
xdebug.profiler_output_dir="/path/to/log/dir/xdebug/profiler"
xdebug.profiler_append = "On"
xdebug.profiler_enable_trigger = "On"
xdebug.profiler_output_name = "cachegrind.out.%t-%s"
xdebug.remote_enable = "On" 
xdebug.remote_autostart = 0  
xdebug.remote_host = 127.0.0.1
xdebug.remote_port = 9000 
xdebug.remote_handler = "dbgp"
xdebug.remote_log="/path/to/log/dir/remote.log"
</code></pre>
</li>
<li><p>验证安装是否成功<br> 远程打印<code>&lt;?php phpinfo(); ?&gt;</code>，查看是否安装了 Xdebug 模块。</p>
</li>
</ol>
<h3 id="B-安装到-Zend-Studio-运行环境（PHP-Executable）"><a href="#B-安装到-Zend-Studio-运行环境（PHP-Executable）" class="headerlink" title="B. 安装到 Zend Studio 运行环境（PHP Executable）"></a>B. 安装到 Zend Studio 运行环境（PHP Executable）</h3><p>Zend Studio 自带了 PHP 运行环境的插件，在 <code>&lt;Zend_Studio_install_dir&gt;\plugins\com.zend.php.debug.debugger.&lt;version_info&gt;\</code> 目录里。默认配置的是使用自家的 zend debug，切换成 xdebug，需要修改这里的 php 设置。</p>
<ol>
<li><p>下载 Xdebug 到 <code>&lt;Zend_Studio_install_dir&gt;\plugins\com.zend.php.debug.debugger.&lt;version_info&gt;\</code></p>
</li>
<li><p>修改 php.ini<br> 注释掉 zend debug，添加 Xdebug，写法和上节一样。</p>
</li>
<li><p>配置 Xdebug<br> 配置参数参见上节</p>
</li>
<li><p>验证安装是否成功<br> 打开命令行，执行<code>php --re xdebug</code>，如果输出不是<code>Exception: Extension xdebug does not exist</code>, 表示 Xdebug 扩展安装成功。</p>
</li>
</ol>
<p>到这里，已经完成了配置 Xdebug 部分，其实现在已经可以使用多种工具来远程或本地调试了，包括设置断点、单步、查看运行参数等。反映较好的调式客户端有 PhpStorm，eclipse+PDT，netbeans，Notepad++等，Zend Studio 也算是 “eclipse+插件”性质的，下面将描述它的配置。顺道说一下，还有一个极好用的工具，是 Chrome 的插件 WebGDBp，可以直接在浏览器里远程调试，非常 Cool。</p>
<h2 id="配置-Zend-Studio"><a href="#配置-Zend-Studio" class="headerlink" title="配置 Zend Studio"></a>配置 Zend Studio</h2><h3 id="A-配置-Xdebug-CLI-调试"><a href="#A-配置-Xdebug-CLI-调试" class="headerlink" title="A. 配置 Xdebug CLI 调试"></a>A. 配置 Xdebug CLI 调试</h3><ol>
<li><p>打开 <code>Window | Preferences | PHP | PHP Executables</code><br> <img src="/images/posts/zend_xdebug/cli_1.jpg" alt=""></p>
</li>
<li><p>打开 <code>Add</code> ，添加 PHP 运行环境<br> <img src="/images/posts/zend_xdebug/cli_2.jpg" alt=""></p>
<ul>
<li>Name - PHP 运行环境名（比如 PHP 5.5.7 with Xdebug）</li>
<li>Executable path - 运行环境路径.</li>
<li>PHP ini file (Optional) - 运行环境对应的 php.ini 路径</li>
<li>SAPI type - 设置为 CLI</li>
<li>PHP debugger - 设置为 Xdebug.</li>
</ul>
</li>
<li><p>设置 Xdebug 为默认运行环境<br> 上一步保存后的回到运行环境设置窗口，选择添加的运行环境，点击 <code>Set as Default</code></p>
</li>
<li><p>打开 <code>Window | Preferences | PHP | Debug</code><br> <img src="/images/posts/zend_xdebug/cli_3.jpg" alt=""><br> 在 CLI 设置区，选择 Xdebug</p>
</li>
</ol>
<p>到此，CLI 使用 Xdebug 已经配置完成。</p>
<h3 id="B-配置-Xdebug-远程调试"><a href="#B-配置-Xdebug-远程调试" class="headerlink" title="B. 配置 Xdebug 远程调试"></a>B. 配置 Xdebug 远程调试</h3><p>允许远程调试网站程序（Web Application Debugging）</p>
<ol>
<li><p>打开 <code>Window | Preferences | PHP | PHP Servers</code><br> <img src="/images/posts/zend_xdebug/remote_1.jpg" alt="">  </p>
</li>
<li><p>添加服务器（Server）<br> <img src="/images/posts/zend_xdebug/remote_2.jpg" alt="">  </p>
</li>
<li><p>配置路径映射（Path Mapping）<br> <img src="/images/posts/zend_xdebug/remote_3.jpg" alt="">  </p>
</li>
<li><p>配置 DBGp 协议<br> 由于是远程调试，使用了 DBGp 协议通信，需要配置通信参数。<br> 打开 <code>Window | Preferences | PHP | Debug | Installed Debuggers</code><br> <img src="/images/posts/zend_xdebug/remote_6.jpg" alt=""><br> 编辑 Xdebug<br> <img src="/images/posts/zend_xdebug/remote_7.jpg" alt=""><br> 这里非常关键的地方是 <code>Access reomte session (JIT)</code>，它能配置触发 Zend Studio 调试的条件。当我们从浏览器里访问要调试的网站时，可以选择：</p>
<ul>
<li><code>off</code>: 关闭远程调试功能</li>
<li><code>localhost</code>: 通过 localhost 访问时触发调试</li>
<li><code>any</code>: 任何访问都触发调试</li>
<li><code>prompt</code>: 任何访问弹出提示，选择是否触发调试<br>由于我一般都是内网调试，这里选择 localhost，然后配合网站 Xdebug 的配置 <code>xdebug.remote_autostart = 0</code> 来使用，只有当访问 localhost 时才触发 Zend Studio 进入调试状态。</li>
</ul>
</li>
<li><p>开始调试<br> （可选）为项目指定默认服务器<br> <img src="/images/posts/zend_xdebug/remote_8.jpg" alt=""><br> 现在 Xdebug 已经是这个项目的默认远程 PHP 调试器。你可以通过 <code>Debug as web application</code> 来调试某个文件。<br> <img src="/images/posts/zend_xdebug/remote_4.jpg" alt=""><br> 查看结果：<br> <img src="/images/posts/zend_xdebug/remote_5.jpg" alt="">  </p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> xdebug </tag>
            
            <tag> zend studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub，GitLab的多账户配置（Windows）]]></title>
      <url>/2014/11/26/github-multi-account-configuration/</url>
      <content type="html"><![CDATA[<p>Windows 系统通过 SSH 方式使用 Git 时，如果有多个账户，需要手工配置多个 rsa 密钥，这里记录一下过程。下面以 GitHub 为例。</p>
<h2 id="单个账号"><a href="#单个账号" class="headerlink" title="单个账号"></a>单个账号</h2><h3 id="1-生成密钥"><a href="#1-生成密钥" class="headerlink" title="1.生成密钥"></a>1.生成密钥</h3><p>打开 Git Bash，运行命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "your_email@example.com"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Creates a new ssh key, using the provided email as a label</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generating public/private rsa key pair.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span></span><br></pre></td></tr></table></figure>
<p>下一步，输入密钥的口令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Enter same passphrase again: [Type passphrase again]</span></span><br></pre></td></tr></table></figure>
<p>执行后，将产生公钥、私钥对：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.</span><br><span class="line"><span class="meta">#</span><span class="bash"> Your public key has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The key fingerprint is:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span></span><br></pre></td></tr></table></figure>
<h3 id="2-将公钥、私钥加入到-ssh-agent"><a href="#2-将公钥、私钥加入到-ssh-agent" class="headerlink" title="2.将公钥、私钥加入到 ssh-agent"></a>2.将公钥、私钥加入到 ssh-agent</h3><ul>
<li>命令方式：  </li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> start the ssh-agent <span class="keyword">in</span> the background</span></span><br><span class="line">ssh-agent -s</span><br><span class="line"><span class="meta">#</span><span class="bash"> Agent pid 59566</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<ul>
<li>或者手工将2个文件复制到 user/.ssh/ 目录</li>
</ul>
<h3 id="3-将公钥文件的内容复制到-GitHub-账户中"><a href="#3-将公钥文件的内容复制到-GitHub-账户中" class="headerlink" title="3.将公钥文件的内容复制到 GitHub 账户中"></a>3.将公钥文件的内容复制到 GitHub 账户中</h3><p>密钥是自己保存的，公钥是需要公开给你使用的网站。登录 GitHub 账户，从账户管理里找到密钥（SSH keys）配置，新建一个key，将公钥（一串 Base64 格式）文本复制到其中，并给这个 key 标记个名字。 </p>
<p>标记个名字，方便多个账号同时使用时，方便管理。</p>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p>在 Git Bash 中输入:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> Attempts to ssh to GitHub</span></span><br></pre></td></tr></table></figure>
<p>会收到一个提示：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host 'github.com (207.97.227.239)' can't be established.</span><br><span class="line"><span class="meta">#</span><span class="bash"> RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>
<p>检查一下指纹（fingerprint）和你上面产生的密钥是否一致，然后输入<code>yes</code>.</p>
<p>最后，你将收到配置成功的消息 :)</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You've successfully authenticated, but GitHub does not</span><br><span class="line"><span class="meta">#</span><span class="bash"> provide shell access.</span></span><br></pre></td></tr></table></figure>
<h2 id="添加多个账户"><a href="#添加多个账户" class="headerlink" title="添加多个账户"></a>添加多个账户</h2><p>上面操作时<strong>手工</strong>产生的<code>id_rsa</code>密钥文件放到<code>username\.ssh\</code>目录下，如果改成其它文件名，在连接时将出错，这就不能支持多个账号的ssh key。  </p>
<p>（不过，我猜可能通过命令 <code>ssh-add ~/.ssh/id_rsa</code> 添加的 key 可能会自动产生多账号配置文件。有待验证！！！）</p>
<p>那如果有多个同名的<code>id_rsa</code>密钥对文件如何处理呢？</p>
<p>做法是添加一个配置文件，来管理（映射）密钥的关系，这只是 windows 的方案，Linux 自带 SSH agent 的。</p>
<h3 id="1-创建管理文件"><a href="#1-创建管理文件" class="headerlink" title="1.创建管理文件"></a>1.创建管理文件</h3><p>在 <code>.ssh</code> 目录下创建 <code>config</code> 文件，同时将产生的 <code>id_rsa</code> 文件改成较好记的名字，比如 <code>username.github.com</code>。</p>
<h3 id="2-添加映射"><a href="#2-添加映射" class="headerlink" title="2.添加映射"></a>2.添加映射</h3><p>打开 <code>config</code> 文件，添加：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">	User git</span><br><span class="line">	Hostname ssh.github.com</span><br><span class="line">	PreferredAuthentications publickey</span><br><span class="line">	IdentityFile ~/.ssh/username.github.com</span><br><span class="line">	Port 443</span><br><span class="line"></span><br><span class="line">Host anothersite.com</span><br><span class="line">	User git</span><br><span class="line">	Hostname ssh.anothersite.com</span><br><span class="line">	PreferredAuthentications publickey</span><br><span class="line">	IdentityFile ~/.ssh/username.anothersite.com</span><br><span class="line">	Port 443</span><br></pre></td></tr></table></figure>
<p>上面是2个密钥映射的关系，<code>IdentityFile</code>是改名后的文件，其它参数根据网站需要来更改。</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> autolayout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优先级：hugging vs compression resistance]]></title>
      <url>/2014/11/12/content-hugging-vs-content%20compression-resistance-priority/</url>
      <content type="html"><![CDATA[<p>开发IOS应用最快速的手段就是自动布局（auto layout）以及它的约束（constraint）机制，下面说几个属性。</p>
<h3 id="1-内嵌内容大小（Intrinsic-Content-Size）"><a href="#1-内嵌内容大小（Intrinsic-Content-Size）" class="headerlink" title="1.内嵌内容大小（Intrinsic Content Size）"></a>1.内嵌内容大小（Intrinsic Content Size）</h3><p>IOS本身依靠一套布局系统（layout system）完成计算各组件大小，最大限度满足尽可能多的约束，说尽可能多的原因是可能存在有冲突的约束，造成没法全部满足。回过头来说，设置了Intrinsic Content Size属性，一是就是通知布局系统本组件包含不容易知道大小的内容，二是会提示布局系统自身的大小，也就是组件本身可以知道自身内容大小。  </p>
<p>常见的组件有UILabel, UIButton, 它们都设置了Intrinsic Content Size这个属性，也就是运行时会根据内容的大小来缩小或扩大。</p>
<p>参见<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/AutoLayoutConcepts/AutoLayoutConcepts.html" target="_blank" rel="noopener">苹果开发文档</a></p>
<h3 id="2-内容保持紧固的优先级（Content-hugging-priority）"><a href="#2-内容保持紧固的优先级（Content-hugging-priority）" class="headerlink" title="2.内容保持紧固的优先级（Content hugging priority）"></a>2.内容保持紧固的优先级（Content hugging priority）</h3><p>上面说组件会适应其内容大小。那会出现一个问题，例如，当组件还设置了其它约束条件，将左（leading）和右（trailing）边界固定（pinned）到了父视图（superview）上，假如内容宽度是200，父视图宽度是500，那么组件要应用哪个呢？</p>
<p>这时就很有必要为每个条件设置一个优先级，ios默认有高（1000）、中（750）和低（250）3个级别，当然如果需要比较的情况复杂，也可以为优先级设置任意0至1000的数值。</p>
<p>内容保持紧固的优先级指的是组件保持内容大小，<strong>不被拉伸</strong>的优先级别。</p>
<p>回到刚才的例子，将组件的Content hugging priority设置为251，而左右约束设置为250，这时组件会维持自身大小，不会随着父视图拉伸。</p>
<h3 id="3-内容抵抗压缩的优先级（content-compression-resistance-priority）"><a href="#3-内容抵抗压缩的优先级（content-compression-resistance-priority）" class="headerlink" title="3.内容抵抗压缩的优先级（content compression resistance priority）"></a>3.内容抵抗压缩的优先级（content compression resistance priority）</h3><p>思路与上边相似，本属性指的是组件保持内容大小，<strong>不被压缩</strong>的优先级别。</p>
<p>试想上例中，如果父视图只有宽度只有100，组件内容是200，将组件的content compression resistance priority设置为751，而左右约束设置为750，这时组件会维持自身大小，不会随着父视图被压缩。</p>
<h3 id="4-附上一个讲的很清楚的例子"><a href="#4-附上一个讲的很清楚的例子" class="headerlink" title="4. 附上一个讲的很清楚的例子"></a>4. 附上一个讲的很清楚的例子</h3><p>Say you’ve got button like this:</p>
<p><strong>[       Click Me      ]</strong></p>
<p>and you’ve pinned the edges to a larger superview with priority 500.</p>
<p>Then, if Hugging priority &gt; 500 it’ll look like this:</p>
<p><strong>[Click Me]</strong></p>
<p>If Hugging priority &lt; 500 it’ll look like this:</p>
<p><strong>[       Click Me      ]</strong></p>
<p>If superview now shrinks then, if the Compression Resistance priority &gt; 500, it’ll look like this</p>
<p><strong>[Click Me]</strong></p>
<p>Else if Compression Resistance priority &lt; 500, it could look like this:</p>
<p><strong>[Cli..]</strong></p>
<p>from <a href="http://stackoverflow.com/questions/15850417/cocoa-autolayout-content-hugging-vs-content-compression-resistance-priority" target="_blank" rel="noopener">stackoverflow</a></p>
]]></content>
      
        <categories>
            
            <category> ios </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
            <tag> autolayout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 9-Patch]]></title>
      <url>/2014/08/09/android-nine-patch/</url>
      <content type="html"><![CDATA[<p>9-Patch是Android设备上处理可扩展图片的方式。众所周知，Android设备的屏幕尺寸和分辨率众多，为了图片能完美的适配各种屏幕，Android采用了支持可扩展的图片的方案。</p>
<p>9-Patch的使用非常简便。围绕在图片周围的黑线便是定义之处。关于此格式需要注意的地方：</p>
<ul>
<li>png图片的一周有 <strong>1px的边框</strong>，用于定义可扩展区域和静态区域（黑线）</li>
<li>图片一周，黑线标识可扩展区域，黑线必须是 <strong>纯黑</strong> (#000)，不透明的，添加深灰色的线都不能起作用，其它区域必须是完全透明或者纯白色。</li>
<li>可以使用任意图片处理工具处理，比如Windows的画板（MS Paint）也没有问题</li>
<li>保存时使用扩展名 <strong>.9.png</strong></li>
</ul>
<p>下面说明黑线的作用。</p>
<p><img src="/images/posts/ninepatch_raw.png" alt=""></p>
<h3 id="Top和Left"><a href="#Top和Left" class="headerlink" title="Top和Left"></a>Top和Left</h3><p>Top和Left定义了将要被拉伸的部分。要注意的点：</p>
<ul>
<li><p>9-Patch图 <strong>只能拉伸</strong>，不是整块复制，不能收缩<br>  <img src="/images/posts/greater-than-1px.jpg" alt=""></p>
</li>
<li><p>同一边可以定义多个区域，使用时将按照区域的宽度等比例拉伸<br>  <img src="/images/posts/multi-scretch-lines.jpg" alt=""></p>
</li>
</ul>
<h3 id="Right和Bottom"><a href="#Right和Bottom" class="headerlink" title="Right和Bottom"></a>Right和Bottom</h3><p>Right和Bottom定义了内容的区域。</p>
<p><img src="/images/posts/9-patch-content-area.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 9-Patch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见的中文编码]]></title>
      <url>/2014/07/26/chinese-charsets/</url>
      <content type="html"><![CDATA[<p>工作经常碰到编码、字符集等概念，下面收集了一下常见的中文编码，方便日后查阅。</p>
<p>常见的有国家标准的<a href="http://zh.wikipedia.org/wiki/GB_2312" target="_blank" rel="noopener">GB 2312-80</a>，<a href="http://zh.wikipedia.org/wiki/GB18030" target="_blank" rel="noopener">GB 18030-2005</a>，以及并非国家标准但应用很广的<a href="http://zh.wikipedia.org/wiki/%E6%B1%89%E5%AD%97%E5%86%85%E7%A0%81%E6%89%A9%E5%B1%95%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">GBK</a>。</p>
<p>先说说这些名称的所表示的意思：标准类别代号 顺序号-年代号 中文名称。如”GB 2312-(19)80”, “GB 18030-2005”。</p>
<h2 id="GB-2312"><a href="#GB-2312" class="headerlink" title="GB 2312"></a>GB 2312</h2><p>标准共收录6763个汉字，其中一级汉字3755个，二级汉字3008个；同时收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的682个字符。</p>
<p>在使用GB2312的程序通常采用EUC储存方法，以便兼容于ASCII。浏览器编码表上的“GB2312”，通常都是指“EUC-CN”表示法。</p>
<p>每个汉字及符号以两个字节来表示。第一个字节称为“高位字节”，第二个字节称为“低位字节”。</p>
<p>“高位字节”使用了0xA1-0xF7（把01-87区的区号加上0xA0），“低位字节”使用了0xA1-0xFE（把01-94加上0xA0）。 由于一级汉字从16区起始，汉字区的“高位字节”的范围是0xB0-0xF7，“低位字节”的范围是0xA1-0xFE，占用的码位是72*94=6768。其中有5个空位是D7FA-D7FE。</p>
<p>例如“啊”字在大多数程序中，会以两个字节，0xB0（第一个字节）0xA1（第二个字节）储存。（与区位码对比：0xB0=0xA0+16,0xA1=0xA0+1）。</p>
<h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>由于GB 2312-80只收录6763个汉字，有不少汉字，如部分在GB 2312-80推出以后才简化的汉字（如“啰”），部分人名用字（如中国前总理朱镕基的“镕”字），台湾及香港使用的繁体字，日语及朝鲜语汉字等，并未有收录在内。于是厂商微软利用GB 2312-80未使用的编码空间，收录GB 13000.1-93全部字符制定了GBK编码。</p>
<p>根据微软资料，GBK是对GB2312-80的扩展，也就是CP936字码表 (Code Page 936)的扩展（之前CP936和GB 2312-80一模一样），最早实现于Windows 95简体中文版。虽然GBK收录GB 13000.1-93的全部字符，但编码方式并不相同。</p>
<p>GBK自身并非国家标准，只是曾由国家技术监督局标准化司、电子工业部科技与质量监督司公布为“技术规范指导性文件”。原始GB13000一直未被业界采用，后续国家标准GB18030技术上兼容GBK而非GB13000。</p>
<p>字符有一字节和双字节编码，00–7F范围内是一位，和ASCII保持一致，此范围内严格上说有96个文字和32个控制符号。</p>
<p>之后的双字节中，前一字节是双字节的第一位。总体上说第一字节的范围是81–FE（也就是不含80和FF），第二字节的一部分领域在40–7E，其他领域在80–FE。</p>
<h2 id="GB-18030"><a href="#GB-18030" class="headerlink" title="GB 18030"></a>GB 18030</h2><p>全称：国家标准GB 18030-2005《信息技术　中文编码字符集》，是中华人民共和国现时最新的内码字集，是GB 18030-2000《信息技术　信息交换用汉字编码字符集　基本集的扩充》的修订版。与GB 2312-1980完全兼容，与GBK基本兼容，支持GB 13000及Unicode的全部统一汉字，共收录汉字70244个。</p>
<p>GB 18030主要有以下特点：</p>
<p>代码页 54936<br>与 UTF-8 相同，采用多字节编码，每个字可以由1个、2个或4个字节组成。<br>编码空间庞大，最多可定义161万个字符。<br>支持中国国内少数民族的文字，不需要动用造字区。<br>汉字收录范围包含繁体汉字以及日韩汉字。</p>
<p>单字节，其值从0到0x7F。<br>双字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x40到0xFE（不包括0x7F）。<br>四字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x30到0x39，第三个字节从0x81到0xFE，第四个字节从0x30到0x39。</p>
<h2 id="区别与联系"><a href="#区别与联系" class="headerlink" title="区别与联系"></a>区别与联系</h2><ul>
<li>容量：GB 2312 &lt; GBK &lt; GB 18030</li>
<li>GB 2312 和 GBK 是16位的，GB 18030 是32位</li>
<li>GB 18030, GBK 都是向后兼容，GB 18030兼容GBK，GBK兼容GB 2312</li>
</ul>
<p>平常使用中，应该首选Unicode编码，保证在多语言环境下的兼容性。如果需要使用中文编码，首选GB 18030，能保证更多的汉字正常显示，如果终端不支持，可以按序向后换小一些的编码集。</p>
]]></content>
      
        <categories>
            
            <category> programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> encoding </tag>
            
            <tag> charset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[32位和64位程序的注册表知识点]]></title>
      <url>/2014/07/06/32bit-64bit-registry/</url>
      <content type="html"><![CDATA[<p>众所周知，注册表是windows系统的数据库，系统本身以及安装的程序都依赖注册表。当windows进化到64位，还要兼容大量的32位老程序，便碰到了注册表的问题。这里只讨论64位系统的注册表机制。</p>
<p>注册表树最大可以有512级深度，通过注册表API一次可以创建32级深的键值。</p>
<p>为了解决64位系统遇到的问题，Windows使用了三套方案，共享（Shared）、<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384232\(v=vs.85\" target="_blank" rel="noopener">注册表重定向（Registry Redirector）</a>.aspx)和<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384235\(v=vs.85\" target="_blank" rel="noopener">注册表反射（Registry Reflection）</a>.aspx)。</p>
<ul>
<li><p>共享，顾名思义，保存可以被32位和64位共同使用的注册表。</p>
</li>
<li><p>反射，这是一个早期的方案，只用于Windows Server 2008, Windows Vista, Windows Server 2003, 和Windows XP，从Windows 7 和 Windows Server 2008 R2 开始被移除。  </p>
<p>  它的做法是备份和同步，就是把同一份注册表保存到两个物理位置，这两个位置会分别被32位或64位程序使用。保存发生在RegCloseKey调用结束。使用 RegDisableReflectionKey和RegEnableReflectionKey方法可以禁用/启用反射机制。</p>
</li>
<li><p>重定向，主要使用的机制，它会区分32位和64位程序（Application），分别提供给他们不同的注册表物理存储位置，但会映射成同一个逻辑视图（View），这个过程对程序本身是透明的。也就是说，一个32位程序可以像在32位系统中一样来使用注册表，虽然它们在64位系统上被存储在不同的物理位置。  </p>
<p>  32位程序重定向的注册表存放在Wow6432Node下，例如, HKEY_LOCAL_MACHINE\Software 会被重定向到 HKEY_LOCAL_MACHINE\Software\Wow6432Node。但是，这些操作应该由系统而非程序本身来做。  </p>
<p>  当注册表包含%ProgramFiles% 或 %commonprogramfiles%时，64位系统会自动替换为 “%ProgramFiles(x86)%” 和 “%commonprogramfiles(x86)%”，同样的system32 被替换为  syswow64。具体的替换规则请阅读 <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384232\(v=vs.85\" target="_blank" rel="noopener">MSDN</a>.aspx)</p>
</li>
</ul>
<p>关于Windows系统中哪些目录使用的是哪种机制，请<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384253\(v=vs.85\" target="_blank" rel="noopener">更详细的列表</a>.aspx)。</p>
<p>上面是系统的解决方案，如果你需要显式地访问64位注册表或32位注册表，可以使用KEY_WOW64_64KEY和KEY_WOW64_32KEY标识。</p>
]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> registry </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IOS要点总结]]></title>
      <url>/2014/06/16/ios-bullet/</url>
      <content type="html"><![CDATA[<p>总结ios开发遇到的易混知识点、陷阱</p>
<h2 id="Frame-VS-Bounds"><a href="#Frame-VS-Bounds" class="headerlink" title="Frame VS Bounds"></a>Frame VS Bounds</h2><p>A picture worth thousand words! 见下图。</p>
<ul>
<li><p><strong>Frame</strong>： 视图的frame是相对父坐标系的原点和矩形，默认从左上点开始。</p>
</li>
<li><p><strong>Bounds</strong>： 视图的bounds是相对自身坐标系的原点和区域。</p>
</li>
<li><p><strong>Center</strong>： 中点是相对父坐标系的中心点。 注意<strong>middle</strong>是相对自身坐标系的中心点</p>
</li>
</ul>
<p>注意，当view旋转（rotate）时：</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frame.size != bounds.size</span><br></pre></td></tr></table></figure>
<p><img src="http://i.stack.imgur.com/3jcne.jpg" alt="The Kitchen Drawer based on Stanford CS193p course"></p>
<h2 id="initWithFrame-VS-initWithCoder-VS-awakeFromNib"><a href="#initWithFrame-VS-initWithCoder-VS-awakeFromNib" class="headerlink" title="initWithFrame VS initWithCoder VS awakeFromNib"></a>initWithFrame VS initWithCoder VS awakeFromNib</h2><ul>
<li>initWithFrame 是用户主动调用的，传入用来初始化的frame</li>
<li>initWithCoder 是被触发的。当UIView被反序列化（deserialize）后，被触发。</li>
<li>awakeFromNib 是被触发的。当UIView与xib内组件建立好连接（connection）后被触发。</li>
</ul>
<p>注：initWithNibName:boundle是发送到UIViewController的消息，与上面的方法对象不同。</p>
<p><img src="/images/posts/view-init.png" alt=""></p>
<h2 id="extension-VS-category"><a href="#extension-VS-category" class="headerlink" title="extension VS category"></a>extension VS category</h2><ul>
<li><p>category是一种扩展已经存在的Class的方法。当你不能接触到Class的源码时，这是一种很有用的方式. 它常把文件取名为 “Class+CategoryName.h”, 比如 “NSView+CustomAdditions.h”， 包括.m的命名.</p>
</li>
<li><p>extension是一种特殊的category, 有以下两个不同：</p>
<ul>
<li><p>没有被扩展类名的category. 它的声明像这样:</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SomeClass</span> ()</span></span><br><span class="line">	- (<span class="keyword">void</span>) anAdditionalMethod;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>extension常定义在实现（.m）文件的顶部，然后在其下@implementation部分实现它。这也成为一种实现“伪私有”（pseudo-private）成员的方式。伪私有顾名思义，并不是真的声明了私有成员，只是达到了不能在外部访问的目的。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ios </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XCode 5 添加复制/删除行快捷键]]></title>
      <url>/2014/05/16/xcode5-delete-duplicate-line/</url>
      <content type="html"><![CDATA[<p>习惯了某些编辑器的复制一行和删除一行快捷方式后，使用xcode时没有相应快捷键有些不适应，下面是一种为其添加快捷键的方式。</p>
<h3 id="修改快捷键配置文件的权限"><a href="#修改快捷键配置文件的权限" class="headerlink" title="修改快捷键配置文件的权限"></a>修改快捷键配置文件的权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 666 /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist</span><br><span class="line"></span><br><span class="line">sudo chmod 777 /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/</span><br></pre></td></tr></table></figure>
<p><img src="/images/posts/duplicate_delete_line_2.png" alt=""></p>
<h3 id="修改快捷键配置文件"><a href="#修改快捷键配置文件" class="headerlink" title="修改快捷键配置文件"></a>修改快捷键配置文件</h3><ol>
<li>添加Customized类别</li>
<li><p>添加Delete Current Line宏（macro）  </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectLine:, cut:</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加Duplicate Current Line宏  </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectLine:, copy:, moveToEndOfLine:, insertNewline:, paste:, deleteBackward:</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&nbsp;<br><img src="/images/posts/duplicate_delete_line_1.png" alt=""></p>
<h3 id="绑定快捷键"><a href="#绑定快捷键" class="headerlink" title="绑定快捷键"></a>绑定快捷键</h3><p>重启 Xcode，打开菜单 <code>Xcode &gt; Preferences &gt; KeyBindings</code>。 找到上面定义的宏，为其定义快捷键。</p>
<p><img src="/images/posts/duplicate_delete_line_3.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ios </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
            <tag> xcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chromium 用户界面分析（1）]]></title>
      <url>/2014/05/05/chromium-ui-1/</url>
      <content type="html"><![CDATA[<h2 id="基础界面库的类结构"><a href="#基础界面库的类结构" class="headerlink" title="基础界面库的类结构"></a>基础界面库的类结构</h2><p>基础界面库位于src\ui\views目录下，定义了 <strong>跨平台</strong> 的组件，是Chromium界面的基础，顶层chrome/browser/ui/下的类都继承或使用这些基础类。</p>
<h3 id="关于Widget静态图"><a href="#关于Widget静态图" class="headerlink" title="关于Widget静态图"></a>关于Widget静态图</h3><p>下面是Widget及内部结构的类图，类关系做了简化，只显示较关键的联系。<br><img src="/images/posts/chromium_ui_hierarchy.jpg" alt="chromium ui hierarchy"></p>
<h3 id="Widget内组件布局"><a href="#Widget内组件布局" class="headerlink" title="Widget内组件布局"></a>Widget内组件布局</h3><ul>
<li>总体来说，Widget是最底层的UI组件（此处不区分Widget和NativeWidget，后面讨论其关系），与本地（Native）平台交互，处理平台相关的消息、事件等，转换到Chromium UI体系内。  </li>
<li>为了统一处理视图组件的消息事件，Widget内定义了一个根视图RootView    </li>
<li>NonClientView是RootView的唯一孩子，也是其它所有视图的逻辑根  （<strong>为什么RootView和NonClientView不合并为一个视图？</strong>） </li>
<li>NonClientFrameView 是NonClientView孩子之一，负责非客户区的绘制和消息处理，根据不同的系统会有不同的实现，比如Windows下有OpaqueFrameView和GlassFrameView，非客户区一般包括窗口控制按钮（最大化，最小化，关闭）和标题栏（Title bar） </li>
<li>ClientView 是另一个孩子，负责客户区的绘制和消息处理，客户区包括工具栏、标签栏、地址栏、页面等。  </li>
</ul>
<p>&nbsp;</p>
<pre><code>//  The NonClientView is the logical root of all Views contained within a
//  Window, except for the RootView which is its parent and of which it is the
//  sole child. The NonClientView has two children, the NonClientFrameView which
//  is responsible for painting and responding to events from the non-client
//  portions of the window, and the ClientView, which is responsible for the
//  same for the client area of the window:
//
//  +- views::Widget ------------------------------------+
//  | +- views::RootView ------------------------------+ |
//  | | +- views::NonClientView ---------------------+ | |
//  | | | +- views::NonClientFrameView subclas  ---+ | | |
//  | | | |                                        | | | |
//  | | | | &lt;&lt; all painting and event receiving &gt;&gt; | | | |
//  | | | | &lt;&lt; of the non-client areas of a     &gt;&gt; | | | |
//  | | | | &lt;&lt; views::Widget.                   &gt;&gt; | | | |
//  | | | |                                        | | | |
//  | | | +----------------------------------------+ | | |
//  | | | +- views::ClientView or subclass --------+ | | |
//  | | | |                                        | | | |
//  | | | | &lt;&lt; all painting and event receiving &gt;&gt; | | | |
//  | | | | &lt;&lt; of the client areas of a         &gt;&gt; | | | |
//  | | | | &lt;&lt; views::Widget.                   &gt;&gt; | | | |
//  | | | |                                        | | | |
//  | | | +----------------------------------------+ | | |
//  | | +--------------------------------------------+ | |
//  | +------------------------------------------------+ |
//  +----------------------------------------------------+
//
// The NonClientFrameView and ClientView are siblings because due to theme
// changes the NonClientFrameView may be replaced with different
// implementations (e.g. during the switch from DWM/Aero-Glass to Vista Basic/
// Classic rendering).
</code></pre><h3 id="类关系（Class-Relationship）的建立"><a href="#类关系（Class-Relationship）的建立" class="headerlink" title="类关系（Class Relationship）的建立"></a>类关系（Class Relationship）的建立</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Widget::Init(<span class="keyword">const</span> InitParams&amp; params) &#123;</span><br><span class="line">  ...</span><br><span class="line">  root_view_.reset(CreateRootView());                                               --&gt;<span class="number">1</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (RequiresNonClientView(params.type)) &#123;</span><br><span class="line">    non_client_view_ = <span class="keyword">new</span> NonClientView;                                           --&gt;<span class="number">2</span></span><br><span class="line">    non_client_view_-&gt;SetFrameView(CreateNonClientFrameView());                     --&gt;<span class="number">3</span></span><br><span class="line">    <span class="comment">// Create the ClientView, add it to the NonClientView and add the          </span></span><br><span class="line">    <span class="comment">// NonClientView to the RootView. This will cause everything to be parented.</span></span><br><span class="line">    non_client_view_-&gt;set_client_view(widget_delegate_-&gt;CreateClientView(<span class="keyword">this</span>));    --&gt;<span class="number">4</span></span><br><span class="line">    SetContentsView(non_client_view_);                                              --&gt;<span class="number">5</span></span><br><span class="line">    ...	</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (params.delegate) &#123;</span><br><span class="line">    SetContentsView(params.delegate-&gt;GetContentsView());</span><br><span class="line">    ...</span><br><span class="line">  &#125;	</span><br><span class="line">  ...  </span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Create root view</span><br><span class="line"><span class="number">1.</span> Create NonClientView <span class="keyword">and</span> make Widget::non_client_view_ point to it</span><br><span class="line"><span class="number">1.</span> Create NonClientFrameView <span class="keyword">and</span> add it to NonClientView</span><br><span class="line"><span class="number">1.</span> Create ClientFrameView <span class="keyword">and</span> add it to NonClientView</span><br><span class="line"><span class="number">1.</span> Add NonClientView to RootView  </span><br><span class="line"></span><br><span class="line">### RootView类</span><br><span class="line">要注意的几点：  </span><br><span class="line">- 从名字便可知，RootView是View体系（hierarchy）的根  </span><br><span class="line">- RootView起到中转的作用，把本地Widget相关的事件等转换到Chromium View体系中  </span><br><span class="line">- RootView只有一个孩子ContentView，大小正好布满整个区域  </span><br><span class="line"></span><br><span class="line">原文：</span><br><span class="line"></span><br><span class="line">	<span class="comment">// RootView class</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  The RootView is the root of a View hierarchy. A RootView is attached to a</span></span><br><span class="line">	<span class="comment">//  Widget. The Widget is responsible for receiving events from the host</span></span><br><span class="line">	<span class="comment">//  environment, converting them to views-compatible events and then forwarding</span></span><br><span class="line">	<span class="comment">//  them to the RootView for propagation into the View hierarchy.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  A RootView can have only one child, called its "Contents View" which is</span></span><br><span class="line">	<span class="comment">//  sized to fill the bounds of the RootView (and hence the client area of the</span></span><br><span class="line">	<span class="comment">//  Widget). Call SetContentsView() after the associated Widget has been</span></span><br><span class="line">	<span class="comment">//  initialized to attach the contents view to the RootView.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">### Widget和NativeWidget的关系</span><br><span class="line"></span><br><span class="line">Chromium UI的一个目标是实现 **跨平台** ，这样就抽象出一个与平台无关的Widget，而与平台相关特性则由NativeWidget处理。它们两个一一对应，可以设置为Widget拥有（owns）NativeWidget或NativeWidget拥有Widget。</span><br><span class="line"></span><br><span class="line">	<span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">	<span class="comment">// Widget class</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  Encapsulates the platform-specific rendering, event receiving and widget</span></span><br><span class="line">	<span class="comment">//  management aspects of the UI framework.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  Owns a RootView and thus a View hierarchy. Can contain child Widgets.</span></span><br><span class="line">	<span class="comment">//  Widget is a platform-independent type that communicates with a platform or</span></span><br><span class="line">	<span class="comment">//  context specific NativeWidget implementation.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  A special note on ownership:</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//    Depending on the value of the InitParams' ownership field, the Widget</span></span><br><span class="line">	<span class="comment">//    either owns or is owned by its NativeWidget:</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//    ownership = NATIVE_WIDGET_OWNS_WIDGET (default)</span></span><br><span class="line">	<span class="comment">//      The Widget instance is owned by its NativeWidget. When the NativeWidget</span></span><br><span class="line">	<span class="comment">//      is destroyed (in response to a native destruction message), it deletes</span></span><br><span class="line">	<span class="comment">//      the Widget from its destructor.</span></span><br><span class="line">	<span class="comment">//    ownership = WIDGET_OWNS_NATIVE_WIDGET (non-default)</span></span><br><span class="line">	<span class="comment">//      The Widget instance owns its NativeWidget. This state implies someone</span></span><br><span class="line">	<span class="comment">//      else wants to control the lifetime of this object. When they destroy</span></span><br><span class="line">	<span class="comment">//      the Widget it is responsible for destroying the NativeWidget (from its</span></span><br><span class="line">	<span class="comment">//      destructor).</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">&amp;nbsp;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">&amp;nbsp;</span><br><span class="line"></span><br><span class="line">## Chromium界面的类结构</span><br><span class="line"></span><br><span class="line">### 静态图</span><br><span class="line">![chromium browser hierarchy](/images/posts/chromium_browser_hierarchy.jpg)</span><br><span class="line"></span><br><span class="line">### 类关系（Class Relationship）的建立</span><br><span class="line"><span class="number">1.</span> Enter <span class="string">"Browser::Create"</span> method</span><br><span class="line"><span class="number">1.</span> Call <span class="string">"InitBrowserWindow"</span> </span><br><span class="line"><span class="number">1.</span> Call <span class="string">"CreateBrowserWindow"</span> with the parameter <span class="string">"browser"</span>(<span class="keyword">this</span>)</span><br><span class="line"><span class="number">1.</span> Create <span class="string">"BrowserView"</span> which is the subclass of <span class="string">"BrowserWindow"</span></span><br><span class="line"><span class="number">1.</span> Set up the relation of <span class="string">"BrowserView"</span> <span class="keyword">and</span> <span class="string">"BrowserFrame"</span></span><br><span class="line"><span class="number">1.</span> Return back the <span class="string">"Browser::window_"</span> to <span class="string">"BrowserView"</span> instance</span><br><span class="line"></span><br><span class="line">Pseudo code:</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">Browser::Create()&#123;                                                         --&gt;<span class="number">1</span></span><br><span class="line">    ...</span><br><span class="line">    browser-&gt;InitBrowserWindow()&#123;                                          --&gt;<span class="number">2</span></span><br><span class="line">        ...</span><br><span class="line">        browser.window_ = BrowserWindow::CreateBrowserWindow(browser)&#123;     --&gt;<span class="number">3</span>,<span class="number">6</span></span><br><span class="line">            BrowserView* view = <span class="keyword">new</span> BrowserView(browser);                  --&gt;<span class="number">4</span></span><br><span class="line">            (<span class="keyword">new</span> BrowserFrame(view))-&gt;InitBrowserFrame();                  --&gt;<span class="number">5</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> view;                                                   --&gt;<span class="number">6</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Chromium UI的目标是一套跨平台的方案，其中NativeWidget实现了平台相关的细节，Widget才是跨平台的组件，与NativeWidget做了映射。Widget是Windows组件，而Chromium UI的其它组件都是基于View建立的，所以需要一个RootView做中转，将窗口事件转换到View体系中，又作为其它View的根。</p>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> chrome </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome扩展+NPPlugin]]></title>
      <url>/2014/04/24/chrome-extension-plugin/</url>
      <content type="html"><![CDATA[<h2 id="扩展“Chrome扩展”"><a href="#扩展“Chrome扩展”" class="headerlink" title="扩展“Chrome扩展”"></a>扩展“Chrome扩展”</h2><p>虽然基于强大的Javascript和Chrome扩展接口 （Extension API）所实现的扩展简单且强大，但是，如果你已经有一些实现的很不错的本地程序（Native Program）要通过浏览器复用怎么办？或者，浏览器的API不满足需求，你需要使用某些更强大的本地接口（Native API）时呢？</p>
<p>你可以配合Chrome扩展，实现NPAPI插件，通过Javascript与本地的二进制程序交互。</p>
<p>其实Chrome本身已经集成了一些NPAPI插件，比如PDF viewer，Flash player。</p>
<p>先简单区分一下扩展（Extension）和插件（Plguin），它们的共同点是都用于扩充增强浏览器的功能，</p>
<ul>
<li><p>扩展是基于 <strong>浏览器提供的接口</strong> ，运行在浏览器的沙箱（Sandbox）中，不与本地代码交互，安全性可控，也意味着可扩展的功能有限。</p>
</li>
<li><p>插件是基于与浏览器交互的框架（chrome用的是Mozilla的NPAPI框架），实现方式为本地二进制代码，插件其实就是能通过框架与浏览器通信的 <strong>本地程序</strong> 。它可以不运行在沙箱中，所以权限很大，实现不好很容易造成浏览器的漏洞。</p>
</li>
</ul>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h2 id="实现NPAPI插件"><a href="#实现NPAPI插件" class="headerlink" title="实现NPAPI插件"></a>实现NPAPI插件</h2><h3 id="创建动态库（DLL）项目"><a href="#创建动态库（DLL）项目" class="headerlink" title="创建动态库（DLL）项目"></a>创建动态库（DLL）项目</h3><ol>
<li><p>创建空项目<br>本文通过VS2010创建，首选新建Win32|Win32 Project, 然后在创建向导中选择DLL, empty project。</p>
</li>
<li><p>复制示例代码<br>将示例包（文章附件）以下文件复制到项目中：</p>
<pre><code>common/*
include/*
lib/*
Plugin.cpp
Plugin.h
PluginObject.cpp
PluginObject.h
</code></pre></li>
</ol>
<h3 id="配置项目（Project）属性"><a href="#配置项目（Project）属性" class="headerlink" title="配置项目（Project）属性"></a>配置项目（Project）属性</h3><ol>
<li><p>修改输出的动态库名<br>修改Configuration Properties | General | Target Name，注意Mozilla规范要求，插件 <strong>必须以“np”开头</strong> 。</p>
</li>
<li><p>添加Include目录<br>在Configuration Properties | C/C++ | General | Additional Include Directories添加自定义目录include。</p>
</li>
<li><p>添加第三方库<br>这里要和前端JS交互，所以添加C++的第三方<a href="http://jsoncpp.sourceforge.net/" target="_blank" rel="noopener">JSON库</a>，<br>在Configuration Properties | Linker | General | Additional Library Directories添加链接库目录lib。<br>然后在Configuration Properties | Linker | Input | Additional Dependencies里添加库文件lib_json.lib。</p>
</li>
<li><p>添加宏定义（Preprocessor）<br>在Configuration Properties | C/C++ | Preprocessor Definitions添加宏 <strong>WIN32;_WINDOWS;XP_WIN32;XP_WIN;<em>X86</em>;</strong>。</p>
</li>
<li><p>禁止预编译头（Precompiled header)<br>Configuration Properties | C/C++ | Precompiled Header为“Not Using Precompiled Headers”。</p>
</li>
<li><p>添加.def文件<br>在Configuration Properties | Linker | Input | Module Definition File中添加NPHello.def。</p>
</li>
<li><p>修改Runtime Library<br>这一步比较关键,在发布插件时去除debug符号，以“ <strong>/MT</strong> ”方式编译，不然在某些系统会遇到缺少运行时库的问题。<br>Configuration Properties | C/C++ | Code Generation | Runtime Library设置为/MT。</p>
</li>
</ol>
<h3 id="实现插件"><a href="#实现插件" class="headerlink" title="实现插件"></a>实现插件</h3><ol>
<li><p>新建.def文件<br>在项目中新建NPHello.def：  </p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY	<span class="string">"nphello"</span>		</span><br><span class="line">EXPORTS</span><br><span class="line">	NP_GetEntryPoints     @<span class="number">1</span></span><br><span class="line">	NP_Initialize         @<span class="number">2</span></span><br><span class="line">	NP_Shutdown           @<span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改mimetype<br>npp_gate.cpp：</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">NPP_GetMIMEDescription</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"application/x-hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> NPHello.rc：</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">       VALUE <span class="string">"CompanyName"</span>, <span class="string">"XB"</span></span><br><span class="line">       VALUE <span class="string">"FileDescription"</span>, <span class="string">"XB Hello Module"</span></span><br><span class="line">       VALUE <span class="string">"FileVersion"</span>, <span class="string">"1, 0, 0, 1"</span></span><br><span class="line">       VALUE <span class="string">"InternalName"</span>, <span class="string">"nphello.dll"</span></span><br><span class="line">       VALUE <span class="string">"LegalCopyright"</span>, <span class="string">"Copyright (C) 2013"</span></span><br><span class="line">       VALUE <span class="string">"MIMEType"</span>, <span class="string">"application/x-hello"</span></span><br><span class="line">       VALUE <span class="string">"OriginalFilename"</span>, <span class="string">"nphello.dll"</span></span><br><span class="line">       VALUE <span class="string">"ProductName"</span>, <span class="string">"NPHello"</span></span><br><span class="line">       VALUE <span class="string">"ProductVersion"</span>, <span class="string">"1, 0, 0, 1"</span></span><br><span class="line">   END</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除NPP_GetJavaClass<br>np_entry.cpp</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NPNFuncs.getJavaEnv              = <span class="literal">NULL</span>;</span><br><span class="line">NPNFuncs.getJavaPeer             = <span class="literal">NULL</span>;</span><br><span class="line">...</span><br><span class="line">pluginFuncs-&gt;javaClass  = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义与Javascript交互的接口<br>PluginObject.cpp</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define function name called by JS</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* kPluginFunction = <span class="string">"function"</span>;</span><br><span class="line"><span class="comment">// define property name set by JS</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* kPluginCallback = <span class="string">"callback"</span>;</span><br></pre></td></tr></table></figure>
<p> 接口1：用于JS查询Plugin对象是否有该方法：</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> PluginObject::hasMethod(NPIdentifier methodName)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">bool</span> bRev = <span class="literal">false</span>;</span><br><span class="line">	NPUTF8 *pName = NPNFuncs.utf8fromidentifier(methodName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(pName, kPluginFunction) ==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>接口2：用于JS查询Plguin对象是否有该属性：

<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> PluginObject::hasProperty(NPIdentifier propertyName)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">bool</span> bRev = <span class="literal">false</span>;</span><br><span class="line">	NPUTF8 *pName = NPNFuncs.utf8fromidentifier(propertyName);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pName!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(pName, kPluginCallback) == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bRev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>Javascript调用Plugin的入口   </p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> PluginObject::invoke(NPIdentifier methodName,</span><br><span class="line">    <span class="keyword">const</span> NPVariant* args, <span class="keyword">uint32_t</span> argCount, NPVariant* result) &#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* name = NPNFuncs.utf8fromidentifier(methodName);</span><br><span class="line">  <span class="keyword">bool</span> ret_val = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> outString;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(name, kPluginFunction)==<span class="number">0</span>)&#123;</span><br><span class="line">    ret_val = <span class="literal">true</span>;</span><br><span class="line">    hThread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, FunctionThread, <span class="keyword">this</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    outString = <span class="string">"Called plugin method from external."</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Exception handling. </span></span><br><span class="line">    outString = <span class="string">"Called an invalid method."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">char</span>* npOutString = (<span class="keyword">char</span> *)NPNFuncs.memalloc(outString.length() + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (!npOutString)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  strcpy_s(npOutString, outString.length()+<span class="number">1</span>, outString.c_str());</span><br><span class="line">  STRINGZ_TO_NPVARIANT(npOutString, *result);</span><br><span class="line"></span><br><span class="line">  NPNFuncs.memfree(name);</span><br><span class="line">  <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在新的线程中执行插件的逻辑</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a threed</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">FunctionThread</span><span class="params">(LPVOID lparam)</span></span>&#123; </span><br><span class="line">	PluginObject* pluginObj = (PluginObject*)lparam;</span><br><span class="line">  <span class="keyword">if</span> (pluginObj==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  pluginObj-&gt;PluginFunction();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PluginObject::PluginFunction()&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    Sleep(<span class="number">3000</span>);</span><br><span class="line">    Json::Value root;</span><br><span class="line">    root[<span class="string">"msg"</span>] = <span class="string">"Plugin process complete with three minutes!"</span>;</span><br><span class="line">    CallJSFunction(root.toStyledString());</span><br><span class="line">  &#125; <span class="keyword">catch</span>(HRESULT hr)&#123;</span><br><span class="line">    _<span class="function">com_error <span class="title">error</span><span class="params">(hr)</span></span>;</span><br><span class="line">    std::wstring msg(error.ErrorMessage());</span><br><span class="line">    Json::Value root;</span><br><span class="line">    root[<span class="string">"msg"</span>] = utf8_encode(msg);</span><br><span class="line">    CallJSFunction(root.toStyledString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当插件执行完毕，回调Javascript的方法</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> PluginObject::CallJSFunction(<span class="built_in">std</span>::<span class="built_in">string</span> result)&#123;</span><br><span class="line">	<span class="keyword">int</span> iRev = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (mJSFunction != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="comment">// 转换参数列表</span></span><br><span class="line">		NPVariant relements[<span class="number">1</span>];</span><br><span class="line">    	STRINGZ_TO_NPVARIANT(result.c_str(), relements[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 调用JS函数</span></span><br><span class="line">	    NPVariant jsResult; </span><br><span class="line">		NPN_InvokeDefault(npp, mJSFunction, relements, <span class="number">1</span>, &amp;jsResult);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (NPVARIANT_IS_STRING(jsResult))&#123;</span><br><span class="line">			NPString rString = NPVARIANT_TO_STRING(jsResult);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">char</span> revBuf[<span class="number">255</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">			<span class="built_in">memcpy</span>(revBuf, rString.UTF8Characters, rString.UTF8Length);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 释放从浏览器那获取的结果</span></span><br><span class="line">		NPN_ReleaseVariantValue(&amp;jsResult);</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h3><p>以Release方式编译</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h2 id="实现一个简单的扩展"><a href="#实现一个简单的扩展" class="headerlink" title="实现一个简单的扩展"></a>实现一个简单的扩展</h2><h3 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h3><p>注意plugins属性，如果插件只希望被本扩展调用，那将public设置成false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="string">"browser_action"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span>,     </span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    &#123; <span class="string">"path"</span>: <span class="string">"plugins/nphello.dll"</span>, <span class="string">"public"</span>:<span class="literal">false</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">  <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"*://*/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="popup-html"><a href="#popup-html" class="headerlink" title="popup.html"></a>popup.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">id</span>=<span class="string">"pluginObj"</span> <span class="attr">type</span>=<span class="string">"application/x-hello"</span> <span class="attr">style</span>=<span class="string">"width:0;height:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/popup.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="popup-js"><a href="#popup-js" class="headerlink" title="popup.js"></a>popup.js</h3><p>先设置回调函数，再去调用插件的方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">  result = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">  print(<span class="string">'&lt;p class="npp"&gt; [ NPP ]: '</span>+ result[<span class="string">'msg'</span>]+<span class="string">'&lt;/p&gt;'</span>) </span><br><span class="line">  clearInterval(timer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  pluginObj = <span class="built_in">document</span>.getElementById(<span class="string">"pluginObj"</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> pluginObj == <span class="string">"object"</span>) &#123;</span><br><span class="line">    pluginObj.callback = callback;</span><br><span class="line">    print(<span class="string">'&lt;p class="js"&gt; [ JS ]: I\'m calling Plugin function!&lt;/p&gt;'</span>) </span><br><span class="line">    <span class="keyword">var</span> msg = pluginObj.function();</span><br><span class="line">    print(<span class="string">'&lt;p class="npp"&gt; [ NPP ]: '</span>+ msg+<span class="string">'&lt;/p&gt;'</span>) </span><br><span class="line">  &#125; </span><br><span class="line">  timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;count++; print(<span class="string">'&lt;p class="js"&gt; [ JS ]: Hey, I\'ve been waiting '</span>+<span class="number">500</span>*count+<span class="string">' ms...'</span>)&#125;, <span class="number">500</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/images/posts/extension_npp_result.jpg" alt=""></p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<p>附：<a href="https://github.com/chengxuebin/chrome_extension_npplugin" target="_blank" rel="noopener">chrome extension+npplugin</a></p>
<p>扩展阅读：<a href="https://developer.mozilla.org/en/docs/Compiling_The_npruntime_Sample_Plugin_in_Visual_Studio" target="_blank" rel="noopener">使用 VS 编译 NPAPI 插件</a></p>
]]></content>
      
        <categories>
            
            <category> c/c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
            <tag> c/c++ </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
